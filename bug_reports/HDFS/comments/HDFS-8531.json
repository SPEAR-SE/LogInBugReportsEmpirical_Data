[In this case, the 1st appender still get the lease because the first partial block passed FSNamesystem#verifyQuotaForUCBlock(). It is the subsequent blocks that exceed the space quota. When 2nd appender tries to recover the lease with FSNamesystem#recoverLeaseInternal(), it does not handle this where the last block is in COMPLETE state which we should allow to recover lease immediately. 

{code}

 if (lastBlock != null
              && lastBlock.getBlockUCState() == BlockUCState.UNDER_RECOVERY) {
            throw new RecoveryInProgressException(
                op.getExceptionMessage(src, holder, clientMachine,
                    "another recovery is in progress by "
                        + clientName + " on " + uc.getClientMachine()));
          } else {
            throw new AlreadyBeingCreatedException(
                op.getExceptionMessage(src, holder, clientMachine,
                    "this file lease is currently owned by "
                        + clientName + " on " + uc.getClientMachine()));
          }
{code}, Attach an initial patch that handles lease recovery upon append failure after partial block for DFSClient that is the original lease holder and that is not the original lease holder.  , \\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | pre-patch |  15m 14s | Findbugs (version ) appears to be broken on trunk. |
| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |
| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 1 new or modified test files. |
| {color:green}+1{color} | javac |   7m 38s | There were no new javac warning messages. |
| {color:green}+1{color} | javadoc |   9m 39s | There were no new javadoc warning messages. |
| {color:green}+1{color} | release audit |   0m 23s | The applied patch does not increase the total number of release audit warnings. |
| {color:green}+1{color} | checkstyle |   0m 50s | There were no new checkstyle issues. |
| {color:green}+1{color} | whitespace |   0m  0s | The patch has no lines that end in whitespace. |
| {color:green}+1{color} | install |   1m 37s | mvn install still works. |
| {color:green}+1{color} | eclipse:eclipse |   0m 33s | The patch built with eclipse:eclipse. |
| {color:green}+1{color} | findbugs |   3m 16s | The patch does not introduce any new Findbugs (version 3.0.0) warnings. |
| {color:green}+1{color} | native |   3m 16s | Pre-build of native portion |
| {color:red}-1{color} | hdfs tests | 104m 31s | Tests failed in hadoop-hdfs. |
| | | 147m  0s | |
\\
\\
|| Reason || Tests ||
| Failed unit tests | hadoop.hdfs.TestFileAppend |
|   | hadoop.hdfs.server.namenode.TestFileTruncate |
|   | hadoop.hdfs.TestFileCreation |
|   | hadoop.hdfs.TestFileAppend3 |
| Timed out tests | org.apache.hadoop.hdfs.TestInjectionForSimulatedStorage |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12737494/HDFS-8531.00.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | trunk / e830207 |
| hadoop-hdfs test log | https://builds.apache.org/job/PreCommit-HDFS-Build/11228/artifact/patchprocess/testrun_hadoop-hdfs.txt |
| Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/11228/testReport/ |
| Java | 1.7.0_55 |
| uname | Linux asf903.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/11228/console |


This message was automatically generated., TestFileAppend#testAppendTwice and TestFileAppend#testAppendTwice seems to assume the lease cannot be granted to new client before lease soft limit expires.
, After compare the pros and cons of the existing lease recovery logic and the proposed one, I found the existing one actually is actually better. 

The existing approach: new appender wait (soft limit) and retry OR explicitly force reclaim other appender's lease.
Pros: appender has better control and less thrashing
Cons: appender will have to wait or force reclaim lease from others.

The proposed: allowing one appender to implicitly reclaim other appender's lease as long as the last block is COMPLETE.
Pros: Guarantee fairness among appenders
Cons: Very aggressive, may causes unnecessary thrashing among appenders.
]