[Currently when dfs.persist.blocks is false (its default value) and the HA is not enabled, the getAdditionalBlock call will not call logSync. Even without  the sequential block ID mechanism, failing to persist the new block can still cause data loss. Thus a quick fix here is to always call logSync for getAdditionalBlock. But this may affect the performance.

Another possible fix is to make sure the next block id and generation stamp is always larger than the max block id and gs in the system. Thus in BlockManager#processFirstBlockReport, we can change the following code
{code}
      // If block does not belong to any file, we are done.
      if (storedBlock == null) continue;
{code}
to 
{code}
     if (storedBlock == null) {
       // TODO: check the block id and generation stamp id of the reported block, and increase the local latest block id and generation stamp if necessary to make sure they are larger than the reported values
     }
{code}
This can make sure we do not have overlap in block id and generation stamp. But data loss is still possible., How about always persisting to editlog when a block is allocated. This what is done in HA mode. While doing the same in non-HA mode can be construed as affecting performance, clearly here there are correctness and data loss issues. My recommendation would be always persist blocks and hence change the default value for block persistence from false to true. We also need to document this and ensure people who set this to false, do it with the understanding of the risks., Jing, thanks for reporting this regression with sequential block IDs. I would go one step further and ask if we can deprecate the setting altogether (and always persist block allocations)?, BTW I think this is not related to sequential block IDs. This can happen even with older scheme, albeit at lower probability. Please update the jira summary and description accordingly., Thanks for the comments Suresh and Arpit! So in the current patch I just change the default value to true for block persistence. Since this configuration property is not exposed in our document currently, I just update its javadoc in DFSConfigKeys., Jing - what do you think of deprecating the setting?, Yeah, I think deprecating the property is also fine. Let me upload a patch for deprecating the property also., Upload a patch that always persists blocks and deletes the dfs.persist.blocks property., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12616620/HDFS-5590.000.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/5614//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/5614//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/5614//console

This message is automatically generated., +1 for the new patch. Both Jenkins warnings look bogus. Thanks for reporting and fixing this!, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12616626/HDFS-5590.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/5616//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/5616//console

This message is automatically generated., > deprecating the property is also fine.

Jing, looks like you completely removed the opportunity to not persist blocks.
Doesn't look like deprecation to me., Hi Konstantin, currently the property is not documented in hdfs-default.xml and is just defined in DFSConfigKeys for internal usage, so there is no way to deprecate the property. If we decide to always persist blocks, I think we should completely remove the property., Yes this has always been an "undocumented" parameter.
Deprecating it means adding the respective annotation to the variables and a deprecation message when the parameter is used in hdfs-site.xml.
Based on the discussion in this jira I see Suresh proposing to change the default value and Arpit advocating to deprecate.
If you propose to remove the parameter completely then a proper discussion of such a change would be in line with the tradition., Hi Konstantin, so I mentioned I deleted the property when I uploaded the 001 patch, and the patch got +1 from Arpit. Now I also explained why I deleted the property. So back to the data loss issue and the current solution, do you still have any comment?, 'Deprecate' was a bad choice of word and I apologize for the confusion. I meant we should remove it which sounds fine to me since we never documented it., As long as the decision is concious and nobody is concerned about the performance
I don't have any more comments., And nice catch, Jing., SUCCESS: Integrated in Hadoop-trunk-Commit #4844 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4844/])
HDFS-5590. Block ID and generation stamp may be reused when persistBlocks is set to false. Contributed by Jing Zhao. (jing9: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548368)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestPersistBlocks.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestBackupNode.java
, I've committed this to trunk, branch-2 and branch-2.3. Thanks for the review Suresh, Arpit, and Konstantin., Do I understand correctly that removal of this parameter will be affecting downstream tools like CM and Ambari, but we don't care?, bq.  Do I understand correctly that removal of this parameter will be affecting downstream tools like CM and Ambari, but we don't care?

This is as indicated in comments above, an undocumented configuration. It was only used within hdfs code for optimization, which we now know causes data loss. 

This should not cause issues for downstream tools. , FAILURE: Integrated in Hadoop-Yarn-trunk #413 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/413/])
HDFS-5590. Block ID and generation stamp may be reused when persistBlocks is set to false. Contributed by Jing Zhao. (jing9: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548368)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestPersistBlocks.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestBackupNode.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1630 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1630/])
HDFS-5590. Block ID and generation stamp may be reused when persistBlocks is set to false. Contributed by Jing Zhao. (jing9: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548368)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestPersistBlocks.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestBackupNode.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1604 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1604/])
HDFS-5590. Block ID and generation stamp may be reused when persistBlocks is set to false. Contributed by Jing Zhao. (jing9: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548368)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestPersistBlocks.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestBackupNode.java
]