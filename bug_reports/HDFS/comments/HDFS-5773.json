[Issue was seen on 0.23 and believed to be 2.x but is not confirmed.  After a flow control issue described in HADOOP-10233, the NN's heartbeat manager over the course of an hour marked all the DNs dead after waking up from lengthy GC pauses.

The nodes do not appear to have attempted re-registeration between re-sending blockReceivedDeleted messages.  The replication monitor went crazy as the nodes died off, possibly eliciting the blockReceivedDeleted messages (that were rejected) from the "dead" nodes., I wrote a test case.
Steps to reproduce test case:
1. Create a MiniDFSCluster with 1 namenode and 3 datanode
2. Make the heartbeat interval (DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY, 7) too high.
3.  Make the heartbeat recheck interval (DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY)  low.
4. Open a file.
5. Sleep for an appropriate amount of time such that the namenode declares the node dead since the datanode didn't heartbeated within the  heartbeat recheck interval and datanode sent the block report.
6. This will generate an IOException with the following stack trace
    java.io.IOException: Got blockReceivedDeleted message from unregistered or dead node
    at org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.blockReceivedAndDeleted(BlockManager.java:2238)
    at org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.blockReceivedAndDeleted(NameNodeRpcServer.java:825)
7. But when the datanode heartbeated to namenode (after the heartbeat interval), the namenode re registered the data node and added it to the topology and the namenode recovered from the Exception.

So according to my test case, the namenode recovered as it should.
I was not able to reproduce the error that was mentioned in this jira

So closing the jira and feel free to reopen if it happened again.

]