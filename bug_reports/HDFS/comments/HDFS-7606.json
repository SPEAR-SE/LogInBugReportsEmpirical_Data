[In computeContentSummary():
{code}
        counts.add(Content.LENGTH, diffs.getLast().getFileSize());
{code}
diffs.getLast() should be checked against null., Hi [~tedyu@apache.org], please correct me if I am wrong. There is a condition check in the INodeFile.computeContentSummary() whether "diffs.getLast()" is null or not 

final int n = diffs.asList().size();
....
if (n > 0 && sf.isCurrentFileDeleted()) {
        counts.add(Content.LENGTH, diffs.getLast().getFileSize());
 }

, Do you mean the last element itself returned by diffs.getLast() is "null" ?, I was looking at getBlocks() method. In particular, line 435:
{code}
    snapshotBlocks = getDiffs().findLaterSnapshotBlocks(diff.getSnapshotId());
{code}, Ted, thanks for reporting. Sounds like a potential problem indeed., Attached patch.
Addesses the two spots that [~tedyu] found., Hi [~Byron Wong], thank you for your work, it will be great if you can add the unit test that can reproduce the NPE, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12692408/HDFS-7606.patch
  against trunk revision 6464a89.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.TestDatanodeReport

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9218//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9218//console

This message is automatically generated., Hey Chen, if I am not mistaken the NPE in getBlocks() is hypothetcial. I don't think Ted actually reproduced it or if it is reproducible with current code.

Byron,
# should we just use {{snapshot}} instead of {{diff.getSnapshotId()}}? I think it is the same id.
# For {{computeContentSummary()}} the null check seems to be redundant, as {{n > 0}} is guaranteed by the {{if}} statement., I am working on the unit test code to reproduce this NPE., To reproduce the NPE mentioned in this JIRA, in the INodeFile.getBlocks(), we just need to satisfy " diff=null "and "snapshotBlocks=null" before line 435 starts to execute. Then the diff.getSnapshotId() will cause NPE., NPE reproduced. Patch attached. , Hey Chen, what is the point of a unit test if it doesn't correspond to a real life scenario?, Added new patch.
We can just use the snapshotId passed in by the method as [~shv] pointed out.
The other spot is covered by the {{n>0}} check as mentioned by [~airbots] and [~shv].
[~airbots] For the unit test, the case that you've mentioned is only possible in the case when the INodeFile's blocks are null. This case is only possible in the case when we call {{INodeFile#destroyAndCollectBlocks}} or  {{FSDirConcatOp#unprotectedConcat}} (i.e. we can only have null blocks when we want to completely destroy the INodeFile). The only way to reproduce the NPE is by explicitly creating an INodeFile with null blocks as you've done in your test. I don't think we need to reproduce the NPE in a unit test if this is the case., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12692574/HDFS-7606-1.patch
  against trunk revision b6ff9c0.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9224//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9224//console

This message is automatically generated., 



{quote}(i.e. we can only have null blocks when we want to completely destroy the INodeFile){quote}
INodeFile with empty blocks is created and used for partial functionality verification in many test cases in TestINodeFile.java. 

{quote}The only way to reproduce the NPE is by explicitly creating an INodeFile with null blocks as you've done in your test. I don't think we need to reproduce the NPE in a unit test if this is the case.{quote}
There is more than one way to reproduce NPE for this JIRA. Just follow the condition in my previous comments. To address a possible or potential error, as an ASF contributor, we need to reproduce it if we can do. Otherwise, how can you prove it is a bug or error that needs to be fixed? 
, I am not intending to grab this JIRA. Maybe [~shv] is right. But it will be great and persuasive to address a bug by reproduce it., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12692576/HDFS-7606.patch
  against trunk revision 3ab3a64.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9234//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9234//console

This message is automatically generated., Hi Chen you are absolutely right that as a general rule we as developers should do our best in reproducing bugs and capturing them in unit tests in order to prevent ourselves and other developers from making the same mistake again in the future.
In this particular case 
# I don't think that Ted had actually seen HDFS failing due to the NPE.
# I think it is an observation of a potential flaw based on examining the source code alone.
# And I don't think the NPE can be reproduced using any high level API calls to the NameNode.

In summary I don't think any reasonable test case can be written here.
It is just my opinion, and I very much hope this does not discourage you.
Your contributions to the project in this and other directions are very much welcome.

+1 on the latest patch., I just committed this. Thank you Byron., FAILURE: Integrated in Hadoop-trunk-Commit #6879 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6879/])
HDFS-7606. Fix potential NPE in INodeFile.getBlocks(). Contributed by Byron Wong. (shv: rev 60cbcff2f7363e5cc386284981cac67abc965ee7)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #76 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/76/])
HDFS-7606. Fix potential NPE in INodeFile.getBlocks(). Contributed by Byron Wong. (shv: rev 60cbcff2f7363e5cc386284981cac67abc965ee7)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk #810 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/810/])
HDFS-7606. Fix potential NPE in INodeFile.getBlocks(). Contributed by Byron Wong. (shv: rev 60cbcff2f7363e5cc386284981cac67abc965ee7)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #73 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/73/])
HDFS-7606. Fix potential NPE in INodeFile.getBlocks(). Contributed by Byron Wong. (shv: rev 60cbcff2f7363e5cc386284981cac67abc965ee7)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #2008 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2008/])
HDFS-7606. Fix potential NPE in INodeFile.getBlocks(). Contributed by Byron Wong. (shv: rev 60cbcff2f7363e5cc386284981cac67abc965ee7)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #77 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/77/])
HDFS-7606. Fix potential NPE in INodeFile.getBlocks(). Contributed by Byron Wong. (shv: rev 60cbcff2f7363e5cc386284981cac67abc965ee7)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #2027 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2027/])
HDFS-7606. Fix potential NPE in INodeFile.getBlocks(). Contributed by Byron Wong. (shv: rev 60cbcff2f7363e5cc386284981cac67abc965ee7)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, Merged to branch-2.]