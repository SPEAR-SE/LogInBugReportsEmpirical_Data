[This bug exists in FSEditLog#close as well., Patch attached. Depends on HDFS-2701 and HDFS-2703. I verified the NN no longer exits after checkpointing when a single dir failed. I'm working on a unit test for this jira and 2703 but thought I'd put up a fix for review in the meantime.  , And verified the NN still exits after all storage directories have failed., Updated patch with new test class that covers:
#1 The NN doesn't exit as long as it has a valid storage dir
#2 The NN exits when it no longer has a valid storage dir
#3 Removed storage dirs is updated (fails w/o HDFS-2703), Slightly updated patch. I made FSEditLog#logEdit throw an AssertionError (rather than just assert) so we stop the NN if there's a bug where we forget to remove an edit stream after we notice a failed directory. This should never fire, but could if we introduced a bug where eg we missed a call to removeEdits. Updated the test to check that we can't log an edit if there are no streams., - in {{fatalExit}}, can you change it to:
{code}
FSNamesystem.LOG.faral(msg, new Exception(msg));
{code}
so that we get a stacktrace in the logs?

- in {{exitIfNoStreams}} use {{isEmpty}} instead of comparing {{size() == 0}}
- rather than an {{if...throw AssertionError}} maybe just use the {{Preconditions.checkState}} function from guava? Or is guava not in branch-1 yet? (can't remember)
- instead of calling {{exitIfNoStreams}} everywhere, maybe {{removeEditsForStorageDir}} can just call it whenever it removes one?

Otherwise looks good., #1-2 Good suggestions. Done.
#3 Yea, no guava in branch-1.
#4 That's what causes the bug (on log roll when we close all and add streams we'll exit the NN when we don't mean to). I considered folding the check into the removeEdits and making it conditional (so we don't trigger it in log roll) but there are a number of places where we want to trigger this check where we are not removing edits so it seemed cleaner to always call it explicitly., Oh, right. duh :) Thanks, +1., Thanks Todd. Minor update to previous patch. It's not technically part of this change but good to fix at the same time. The question in the current comment in purgeEditLog is valid, let's fix that. Note that we won't and don't want to bail out since we've just closed all the logs. 

{code}
-          // Should we also remove from edits
+          sd.unlock();
+          removeEditsForStorageDir(sd);
           fsimage.updateRemovedDirs(sd, null);
           it.remove();
{code}, I think the addendum is correct. I wish we had a fault injection point for each of these cases, but that's a larger amount of work... something like how we use ErrorSimulator for errors in checkpoints would be great., Agree, we'd need something like ErrorSimulator to cover this case, given that this is all re-written and tested well in trunk I don't I think for branch-1 it's not worth the energy., Tests and test-patch are clean. I've committed this.

Thanks for the review Todd!]