[Thank you [~daryn] for pointing out this. The javadoc in {{HdfsAdmin#getEncryptionZoneForPath}} says that if the path does not exist then throws FNF. IMHO, javadoc has to be modified to convey the message clearly so that we could avoid such situations in future. I'm interested to take the discussion ahead and work on this jira.

[Reference HdfsAdmin.java#L335|https://github.com/apache/hadoop/blob/branch-2.8/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/HdfsAdmin.java#L335]
{code}
   * Get the path of the encryption zone for a given file or directory.
   *
   * @param path The path to get the ez for.
   *
   * @return The EncryptionZone of the ez, or null if path is not in an ez.
   * @throws IOException            if there was a general IO exception
   * @throws AccessControlException if the caller does not have access to path
   * @throws FileNotFoundException  if the path does not exist
{code}

[discussion thread|https://issues.apache.org/jira/browse/HDFS-9348?focusedCommentId=14986075&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14986075], [~spena] could you help shed some light on how Hive uses this API? Wondering if this is intentional, or if it could be worked around somehow., [~andrew.wang] The following class is the one that contains the calls to {{getEncryptionZoneForPath}} (search for all method calls there):
https://github.com/apache/hive/blob/master/shims/0.23/src/main/java/org/apache/hadoop/hive/shims/Hadoop23Shims.java#L1118

The methods that call such function are:
{noformat}
public boolean isPathEncrypted(Path path) throws IOException;
public boolean arePathsOnSameEncryptionZone(Path path1, Path path2) throws IOException;
public boolean arePathsOnSameEncryptionZone(Path path1, Path path2, HadoopShims.HdfsEncryptionShim encryptionShim2) throws IOException;
public int comparePathKeyStrength(Path path1, Path path2) throws IOException;
{noformat}
, Okay, from a quick look at the Hive code, one possible issue is with {{SemanticAnalyzer#getStagingDirectoryPathname}}, since it passes in a temp path that might not exist yet. Correct comparison would be with the parent dir instead.

[~daryn] do you have a stack trace we can look at?

Also, do we have any other "query" APIs that take a path, but do *not* throw FNF? This seems semantically weird to me, which is why I'm wondering if we can fix this in Hive instead., I'll try to dig out the stacktrace, but the code in question was checking the encryption zone of both source and dest to determine if a rename is possible or must fallback to copy.  This explained why I started seeing spikes of getEZForPath calls when we don't even use encryption zones!

IMHO, rename should throw an IOE-derived IncompatibleEncryptionZonesException instead a bland IOE.  This would allow a client to blindly attempt the rename, catch the specific exception, fallback to copy if required.  In the vast majority of cases that removes 2 junk calls for non-existence EZs.

In the name of compatibility, I lean towards reverting the incompatible change.  This is one of the reasons 2.8 certification has ground to a halt.  One could argue that most calls throw FNF because they query or manipulate a specific path.  If it's not there, game over.  But in the case of encryption zones and erasure coding, these features are tree-based.  Properties are inherited by searching up the ancestor paths so it's more about asking "what _is or would_ the EC or EZ be for this path?".

In any case, it now requires 3X rpcs to do a simple rename.  I want specific exceptions to eliminate the 2 junk calls.  The trend of new "always on" features... with direct or indirect non-trivial performance costs... for common operations... when not used... is becoming rather irritating.  I'm sisyphus@hdfs.hadoop.org and I approve this -rant- message., Agree about throwing a specific rename exception.

I poked around our API to try and find precedent for this old behavior of returning null rather than throwing FNF. checkAccess was a possible candidate since we don't require existence when doing write operations (e.g. {{mkdirs}}), but it also throws FNF. Cache directives do not throw FNF, but that's not an API example I'd like to repeat. We should have attached them to the inode.

In the name of compatibility, we should revert this from the branch-2s. I'd hope by the time 3.0 rolls around, we've either fixed Hive to call this on parent dirs instead, or better, moved over to "rename falling back to copy on special IOException" as Daryn proposed.

[~spena] does this sound reasonable from the Hive side?, I'm not sure querying the EZ for the parent directory is the right fix, and we should consider that code other than hive depends on the old semantics.

Depending on which rename is called, and if the dest is a dir, it will move the src _into_ the dest dir.  So let's say I want to rename from /dir1/file to  /dir2/dir-with-EZ.  The result may be /dir2/dir-with-EZ/file.  If the parent is queried, ie. /dir2, the rename will look like it should succeed (src and dest have no EZ) but will fail.  The old debatably broken semantics cover this case.

I realized another similar use case to consider.  Let's I want to create a file only if the path is under an EZ.  Should I have to query the parent's EZ, catch FNF, repeat until I find an EZ or hit the root dir?  The no-FNF semantics require 1 RPC.

In the end we may need to consider preserving the no-FNF semantics and add specific exceptions., +1 on revert. We can then reopen HDFS-9433 and decide what to do., Okay, sounds good. Since this was released in 3.0.0-alpha1, let's use this JIRA to track the revert for changelog purposes. We can open a new JIRA for the special rename exception., Rakesh, hope you don't mind, but I spent a little time making a new patch based on the revert. Besides reverting, I also updated the javadoc for HdfsAdmin and modified the test to assert the "returns null for non-existent path" behavior., I tried reverting and compared with the patch.  It looks like the FNFE at {{HdfsAdmin#getEncryptionZoneForPath()}} came from HDFS-6546. The changes look good to me., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 17s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 10s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  6m 55s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 27s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 25s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m  9s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 17s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m  7s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 23s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  1m 23s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 29s{color} | {color:orange} hadoop-hdfs-project: The patch generated 1 new + 98 unchanged - 0 fixed = 99 total (was 98) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 21s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  0m 55s{color} | {color:green} hadoop-hdfs-client in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 59m  5s{color} | {color:green} hadoop-hdfs in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 20s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 86m 52s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Issue | HDFS-10850 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12830949/HDSF-10850.001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux e188ccd10673 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 236ac77 |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| checkstyle | https://builds.apache.org/job/PreCommit-HDFS-Build/16931/artifact/patchprocess/diff-checkstyle-hadoop-hdfs-project.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/16931/testReport/ |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-client hadoop-hdfs-project/hadoop-hdfs U: hadoop-hdfs-project |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/16931/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thank you [~andrew.wang] for your time and discussions to get the consensus. The patch looks good to me, apart from one minor checkstyle warning.
{code}Unused import - java.io.FileNotFoundException.{code}

+1 (non-binding), +1 for the patch., Thanks for investigating and fixing this, Andrew and thanks for reviewing the fix, Rakesh. I've verified {{TestEncryptionZones}} passes on branch-2 and branch-2.8 after the patch., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #10518 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/10518/])
HDFS-10850. getEZForPath should NOT throw FNF. Contributed by Andrew (kihwal: rev 0670149c88852cd7c4d6774bff06c7c588558739)
* (edit) hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java
* (edit) hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
* (edit) hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestEncryptionZones.java
* (edit) hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/HdfsAdmin.java
]