[The way the edit log is written out in binary format has changed over time.  For instance, since {{Feature.EDITS_CHECKSUM}} (version negative 28), we have checksums; prior to that, we didn't.  Similarly with {{Feature.STORED_TXIDS}}, etc.  So I don't think it makes sense to write out the edit log in the latest format, and slap the version number of an older format on it-- which is what you seem to be suggesting in your JIRA description.

I don't think there is a perfect solution for this problem.  If you want to edit log in a particular format, the easiest thing to do is probably to keep around a version of Hadoop that corresponds to that format and run oev from there.

We could try to support writing old-style edit logs in the new code, but I think that this would bitrot extremely quickly-- it's difficult enough to keep bugs out of the latest and greatest edit log format, let alone every format that's ever existed.

It might be reasonable to detect that we're writing something that is invalid in the new format, and throw an exception, as opposed to silently writing out a new-format log which has odd stuff in it.  What problem in particular did you encounter?, bq. I don't think it makes sense to write out the edit log in the latest format, and slap the version number of an older format on it-- which is what you seem to be suggesting in your JIRA description.

Apologies if I was unclear.  Converting from binary -> xml preserves the older version in the xml, but converting from xml -> binary will ignore the xml's version and always write the latest layout version in the binary.  It's inconsistent behavior that I thought should be consistent.

bq. If you want to edit log in a particular format, the easiest thing to do is probably to keep around a version of Hadoop that corresponds to that format and run oev from there [...] We could try to support writing old-style edit logs in the new code, but I think that this would bitrot extremely quickly

Agreed.  I didn't think the process looked very compatible (although {{OfflineEditsVisitor#start(version)}} implies the tools were designed to be compatible) but I was just going for consistency w/o introducing an "incompatibility".  I'm perfectly fine with the tool throwing an exception if the input log does not have the current layout version.  Are you ok with that?

bq. What problem in particular did you encounter?

I found this while tinkering with a layout change.  A test failed in {{TestOfflineEditsViewer}} that verifies a binary -> xml -> binary conversion produces an identical binary edits log.  The files were identical sans the version, but the new file was "corrupt"., bq. I'm perfectly fine with the tool throwing an exception if the input log does not have the current layout version. Are you ok with that?

No, because the edit log code should be able to read most older formats.  We even support reading branch-1 edit logs in trunk.  We have to do this in order to implement upgrade.  It's very useful to be able to read older edit logs with oev; the fact that it can't write out older edit logs hasn't ever been a problem for me in the past.

bq. I found this while tinkering with a layout change. A test failed in TestOfflineEditsViewer that verifies a binary -> xml -> binary conversion produces an identical binary edits log. The files were identical sans the version, but the new file was "corrupt".

In that {{TestOfflineEditsViewer}} test, we could perhaps skip comparing the first few bytes of the edit log (where the version is stored).]