[Jetty's chunked responses steal/reserve 12 bytes at the beginning of the buffer.  If you write the full buffer size, then 12 bytes spill over into another buffer which again has 12 reserved bytes.  The solution is to write & flush the buffer size minus 12.  The difference is dramatic: 10MB/s before vs 80MB/s after which was probably hitting the network saturation point.

No test because it's rather difficult to write a performance test for big files.  We've been internally running with this change for months., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639456/HDFS-6214.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6634//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6634//console

This message is automatically generated., Related discussion at
  http://stackoverflow.com/questions/9031311/slow-transfers-in-jetty-with-chunked-transfer-encoding-at-certain-buffer-size

So, if "io.file.buffer.size" is small enough, like 4K (the default), it may be overall slower, but there will be no difference for files > 2GB.  Do you know what the response buffer size is for this type of webhdfs responses from datanodes? 


, Is flush() necessary for the non-chunked case? Wouldn't it hurt performance in some cases?, I think the question should be: is flush() necessary for _chunked_ transfers?  It doesn't flush today so arguably it may  not be necessary.  The non-chunked use case is where the combination of buffer-12 byte writes and flushing is necessary.

Chunked performance is the baseline for performance.  I double checked with our performance people and the change did not affect chunked performance while it has significantly boosted non-chunked performance.  I chose to always flush for simplicity and reduced complexity.

For other watchers, we have been running in production with this change for almost a month., Per an earlier comment, that stackoverflow thread was the primary source of information used to fix the problem., I completely stated it backwards.... swap chunked and non-chunked., Ok, if there is no performance degradation, I am fine with calling flush() for the non-chunked case.

bq. So, if "io.file.buffer.size" is small enough, like 4K (the default), it may be overall slower, but there will be no difference for files > 2GB.
I take it back. It just means the client (block reader) will read 4K at a time from datanodes. The 24KB response buffer will be filled in and flushed, so this issue is still visible with the default buffer size.

+1 for the patch., Thanks Kihwal.  I've committed to branch-2 and trunk., SUCCESS: Integrated in Hadoop-trunk-Commit #5525 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5525/])
HDFS-6214.  Webhdfs has poor throughput for files >2GB (daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1587954)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/resources/DatanodeWebHdfsMethods.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/resources/OpenEntity.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #543 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/543/])
HDFS-6214.  Webhdfs has poor throughput for files >2GB (daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1587954)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/resources/DatanodeWebHdfsMethods.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/resources/OpenEntity.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1735 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1735/])
HDFS-6214.  Webhdfs has poor throughput for files >2GB (daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1587954)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/resources/DatanodeWebHdfsMethods.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/resources/OpenEntity.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1760 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1760/])
HDFS-6214.  Webhdfs has poor throughput for files >2GB (daryn) (daryn: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1587954)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/resources/DatanodeWebHdfsMethods.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/web/resources/OpenEntity.java
]