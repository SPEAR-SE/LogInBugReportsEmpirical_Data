[Yes, this behavior is intended. 
As mentioned its a logical URI, it will not refer to any host. HDFS client will take care of resolving to corresponding namenode configurations.

bq. But a caller may further process the URI, for example, call URI.getHost().
Whats the intention of caller calling URI.getHost(), for what purpose he may need to use this.?
All the operations related to HDFS are done through HDFS client itself. So actualy user need not worry about the namenode host in the URI., I don't think this is a bug., [~jerryjch], I don't think this is a bug, can you paste your context or just tell us what you want to do?

but I only advice discuss in the mail list, not here., [~jerryhe], it sounds like you want to discover the host behind a {{FileSystem}}.  (Again, we don't have the larger context here, but I'm going to take a guess that this is your goal.)  In a federated deployment, this is complicated by the fact that the namesystem is spread across multiple hosts, so the host "behind" the file system is going to be sensitive to a specific path.

You could potentially use {{FileSystem#resolvePath}} to get the fully-qualified {{Path}} for a specific file system path:

http://hadoop.apache.org/docs/r2.2.0/api/org/apache/hadoop/fs/FileSystem.html#resolvePath(org.apache.hadoop.fs.Path)

This method fully resolves through the client-side mount table and also symlinks.  Then, you could call {{Path#toUri}} to change the {{Path}} back into a {{URI}}:

http://hadoop.apache.org/docs/r2.2.0/api/org/apache/hadoop/fs/Path.html#toUri()

At this point, you'd have a URI containing the real host that backs that part of the namespace.

Therefore, in addition to statements from others that this is not a bug, I'd also say that there is no functionality gap that needs to be filled.

Does that answer your questions?  If so, then I'd like to resolve as won't fix later today., Thanks for all the comments. You all confirm the expected behavior.
And thanks Chris for the additional info. 
Yes, we were looking to get the host name of the namenode via the URI, 
Here is a simple use case we had:
To get the active nodes in a hdfs cluster:
1. get the name node host via the URI.
2. get the data nodes via datanodeReport, then DatanodeInfo.getHostName()

If we can get the host name via the alternative as described by Chris, it will be ok in term of  functionality gap.
Or is there any other alternative?, Thanks, Jerry.  I'm going to go ahead and close this.

I think there are 2 possibilities for getting the information: the one I already described and also getting the relevant configuration values from a {{Configuration}} object.]