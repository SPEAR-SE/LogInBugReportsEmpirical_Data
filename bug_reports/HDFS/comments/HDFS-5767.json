[[~yzhangal], thanks for bringing up this question, and sorry for the late reply.

It's possible that the name-id mappings are inconsistent in multiple database locations, local operating system files(e.g. /etc/passwd), DNS, NIS and LDAP. The Name Service Switch (NSS) is supposed to be configured to resolve most of the conflicts.  

For example, suppose we have user "hadoop" with id 123 in "/etc/passwd" but a different id 456 in LDAP. Usually the administrator configures NSS to have a searching order (e.g., search LDAP first and then local files), and let NSS return the first found match.

NFS gateway currently uses shell command (e.g., "getent passwd | cut -d: -f1,3" in IdUserGroup.java) to get the mapping. The shell command internally invokes NSS service to get the name-id mapping. 

As we noticed in the field, it's possible to see non-unique mappings as you mentioned. Therefore, we print the comments to make it easier for the users to understand the issue and remove the non-unique mapping. The non-unique mapping is usually a problem for UNIX systems and should be fixed anyway.

, Hello [~brandonli], thanks a lot for the comments and info. That's very helpful.

, No problem. I'll close the JIRA, and feel free to reopen it or create a different one if you see any related issues., Thanks again [~brandonli]!, Hi [~brandonli], 

About the example you provided (user "hadoop" with id 123...), I assume you meant when we issue command "getent passwd hadoop", it will return the first match found for user "hadoop" based on the search order configured in nsswtich.conf. 

But I would expect "getent passwd" (no user specified at command line) will still return two entries for user "hadoop" based on the spec of getent:

"
       The getent command displays entries from databases supported by the Name Service Switch libraries, which are configured
       in /etc/nsswitch.conf. If one or more key arguments are provided, then only the entries that match the supplied keys will be 
       displayed.  Otherwise, if no key is provided, all entries will be displayed (unless the database does not support enumeration).
"

May I know whether you meant

A. if nsswitch.conf is set up correctly, then "getent passwd" should return unique mapping of all users?  

or 

B. duplicate enries should be physically removed from the databases (used by nsswitch.conf), so "getent passwd" has no chance to return multiple entries for the same user?

Thanks.
, There are many ways things can go wrong. NSS configuration is correct doesn't mean the user name id mapping is correct. 

For example, in /etc/passwd, suppose we have "test1:x:502:502::/home/test1:/bin/bash". By mistake, we added "test1:x:503:503::/home/test1:/bin/bash" again to the end of the file. When we do "getent passwd test1", most likely it returns the first found entry "test1:x:502:502::/home/test1:/bin/bash". However, "getent passwd" will return both test1 entries with different ids.

That's why we added the comments in the code, to remind administrator to remove the duplicated entries as the above example., Hi [~brandonli]. 

This new example you provided seems to be a mistake that the administrator made, so I think the redundant entry in the same database definitely need to be removed. 

My last question was about the case I'm not sure, that is, when nsswitch.conf specifies 
   passwd files ldap

And there may be two entries for the same user (the user "hadoop" example in your post of 17/Jan/14 14:30), one in /etc/passwd, the other in ldap. 

In this case, are you also suggesting removing one entry from either /etc/passwd or ldap, so there are no overlap between the entries in different databases specified in nsswitch.conf need to be mutual exclusive)? or "getent passwd" should return only the first entry found?
 
Just want to clarify, thanks.
, Suppose the nss is configured to return the first found entry as in most cases, and the search order is ladap and then local database. I would expect "getent passwd hadoop" returns the entry in ladp but "getent passwd" returns both. That's the case I remember in the field but I didn't try it myself. , Thanks [~brandonli]. This case you described above is what I saw. 

What I was trying to figure out is, how to ensure that "getent passwd" return only one entry for each user, given that it's common to have duplicate entries between local database and ldap.
, Seems to me the easier way to remove the duplicated entries is to delete it from one of the mapping databases. There might be a way, but I am not sure how to set NSS to automatically ignore one repeated entry. The duplicate entries could be duplicate id or duplicate name. , Thanks [~brandonli],

My thinking is that since nsswitch.conf gives user option to have search order, that means it's expected to have duplicate entries
by design. For case that multiple databases are used (e..g, /etc/passwd, ldap), it's common to have one entry in one database
and another entry in the other, for the same user. But the search order gives priority to the first entry.

I wonder whether we can relax the assertion to warnings, and only take the first entry "getent passwd" returned for a user. I assume
the first entry is the one from the database that has higher search order. 

I'm proposing this if we can't set NSS to automatically ignore repeated entry (which I have been trying to find a solution for). It will be nice if NSS can automatically ignore repeated entry.  Some more research need to be done for this before we make the conclusion. 
, I understand your concern. We were considering adding some method to pick the unique entry for any repeated name or id. I didn't figure out a good way to solve it. 

Here is an example:  "getent passwd" returns the following:
 test1: 501
 test2: 502
 user1:501

NFS gateway has to make a decision who is really mapped to 501.

Inside NFS gateway, "picking the first one" may not be a good choice since NSS can also be configured to pick the last one.  

After putting more thoughts into this, now I am thinking maybe we can solve one of the two problems here:
1. single name mapped to multiple ids
2. multiple name mapped to single id

For case 1,  we can simply do "getent passwd <name>" to get the expected mapping configured by the administrator. 
For case 2, looks to me, in most cases it's a configuration error.   agree??

, Thanks for giving more thoughts.

Your proposed solution resolves case 1 nicely, so we could have a unique mapping.  If "getent passwd" would return the mapping from different database based on search order of different databases, then the result would be the same as "picking the first one" (true?), otherwise, your proposed solution would be better.

But I have a bit concern about case 2. Because I'm not sure whether it's a misconfiguration. I didn't find enough info, but I guess if case 1 is possible (single name mapped to multiple ids), case 2 is also possible, though I also hope it is misconfiguration. My thinking is, assuming each database has only one mapping for each user, but different mapping in different database, thus if we don't restrict search order, we will get into trouble. The search order that NSS provides relieves us from this trouble. But if you combine two databases (as "getent passwd" does), we will see both case 1 and case 2. On the other hand, if two database are totally disjoint, then we won't have this discussion at all.
I guess more study is needed to confirm whether case-2 is misconfiguration. 

I'm asking another question here, I noticed that IdUserGroup class also provides API go getUserName of given uid. I'm not sure whether this API will be called from different machine with different uid for the same user. If it does, then we might get wrong user name back from this API.  Say, userA is mapped to 1 in /etc/passwd, and 2 in ldap, we end up assign mapping <userA, 2>, is it possible some one will call this API with "1", and expect useA?

BTW, Actually when I observed this problem initially, I thought it's just that we are not taking care of duplicated but same entries (exact duplicate entries), and I had a quick solution to ignore this kind of duplicate, then I found that one user could be mapped to multiple userIds, and same userId can be mapped to multiple user names. 

Thanks.
, Hi [~brandonli],

Some info to share:

1. see man page:

"man adduser"

useradd [options] LOGIN
...
       -u, --uid UID
           The numerical value of the users ID. This value must be unique, unless the -o option is used. The value must be non-negative. The default
           is to use the smallest ID value greater than or equal to UID_MIN and greater than every other user.

           See also the -r option and the UID_MAX description.

      -o, --non-unique
           Allow the creation of a user account with a duplicate (non-unique) UID.

           This option is only valid in combination with the -o option.

(saw a bug in the man page, which says "-o" option is only valid in combination with "-o", I think it meant in combination with "-u")

So in local database (/etc/passwd), it is possible to have same username mapped to multiple uids,  we can count on the search order to get the uid. But what we do with the other uid that the same user is mapped to? We probably can assume using one uid for this user is good enough?

2. The link http://serverfault.com/questions/4916/multiple-nix-accounts-with-identical-uid is quite intereseting. It suggested that it's possible to have multiple accounts to share the same uid, and said it's designed that way.

, I did some experiment, and saw that if we configure nsswitch.conf as
  passwd files ldap

then "getent passwd <userX>" will return the entry in /etc/passwd (ldap also has an entry for the same user).

And "getent passwd" returns the combined entries from /etc/passwd and ldap, with /etc/passwd entries appear in the beginning.

So the search order is the order that the database appears in the configure (I hope this is correct).

My current thinking is, for implicity, we can assume unique mapping between userName and uid.
And we can assume
    "getent passwd <userName>"
and
   "getent passwd <userId>"
return the result we need (the first matching entry based on search order).

The mapping set up algorithm can look at:

 foreach en "getent passwd" {
     if (en.uname is already in map) {
        if (en.uid is not the same as in the map) {          
          warn and ignore
          //at this point, I expect the uid curent in the map for en.uname is the same 
          //as "getent passwd en.uname" should give, we can probably add an assertion for this.
          // 
          //and the impact of ignoring this entry is subject to our monitoring in the field, so better issue
          //a good message here for problem investigation.
        }
     } else {
       set <en.user, en.uid> mapping as a new entry
     }
 }

Do you think this makes sense?

I made quite a few comments in a row, welcome to look at my earlier ones and share your thoughts too.

Thanks.
, [~yzhangal], so sorry for the late reply. I was distracted by other things. I agree with what you said. 
At least we can provide an option to allow duplicate names or ids in the environment. If you already tested the approach in your environment, I'd be happy to review the patch., Reopened the JIRA., Hi [~brandonli],

What I suggested in my last update is a simplified solution for unique <userName, userId> mapping. I don't have solution that supports multi-mapping yet (I also put this aside a bit due to other stuff), but let me take a further look on that. 

BTW, for your info, http://linux.die.net/man/5/nsswitch.conf  defines the search order as:

"One or more service specifications e.g., "files", "db", or "nis". The order of the services on the line determines the order in which those services will be queried, in turn, until a result is found. "

Thanks.
, Thanks, [~yzhangal]. 
I think multi-mapping(e.g., test1->502, test2->502, test1->503) in most cases is an error. In that case, NFS gateway can fail to start.  

Completely duplicated mapping is not uncommon and the dup can be just ignored by NFS. One example I saw before is that, the same user account was configured with the same id twice on both LDAP and local node(/etc/passwd). Then "getent passwd" could give the same mapping twice (e.g, test1->502, test1->502)
, Thanks [~brandonli],

Duplicated entries of exactly same mapping is easy to handle (we can simply ignore, because they are the same) as we discussed earlier. See my earlier comment at - 21/Jan/14 16:07. 

If you deem that the simplified solution to assume unique <userName, userId> mapping (by ignoring duplicated same mapping) is sufficient, then we can go with the algorithm I listed at 
comment - 22/Jan/14 10:44.

I actually had a question for you in my comment at  21/Jan/14 16:07 above, and I'm putting it here again: 

"I'm asking another question here, I noticed that IdUserGroup class also provides API go getUserName of given uid. I'm not sure whether this API will be called from different machine with different uid for the same user. If it does, then we might get wrong user name back from this API. Say, userA is mapped to 1 in /etc/passwd, and 2 in ldap, we end up assign mapping <userA, 2>, is it possible some one will call this API with "1", and expect useA?"

Thanks.
, Sorry for missing that question.
NFS gateway uses only one map containing the name-id mapping. Even IdUserGroup is used on a different machine to get a different id or name, it can't pass it to NFS gateway. Actually, with AUTH_UNIX as the current authentication method, NFS client passes only the user id to NFS gateway and that is done usually by kernel not by application., Thanks Brandon. I assume you are ok with:

"If you deem that the simplified solution to assume unique <userName, userId> mapping (by ignoring duplicated same mapping) is sufficient, then we can go with the algorithm I listed at 
comment - 22/Jan/14 10:44."

I can work out the solution if so.



, Sounds good to me. I can review the patch once it's available. Thanks., Make it a blocker for 2.3 release. I just experienced a couple real life examples that complete duplicated accounts exist in local database and LDAP server, and administrators don't want to clean up the dups., Sorry Brandon, I was tied to other stuff again a bit. I'm re-assigning it to me now and will work out the solution asap.
 , This patch takes first (name, id) entry as the valid one. It silently ignores duplicate same entries, and issues warnings for multiple-names mapped to same id, or multiple ids mapped to the same name.
, Hi [~brandonli], I uploaded a patch as described above. Would you please help reviewing it and give me comments? thanks a lot.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12626345/HDFS-5767.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated -2 warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-nfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6001//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/6001//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6001//console

This message is automatically generated., My build of eclipse:eclipse was successful. I can't see the detail about why apache build failed. 
The javadoc "-2" warnings is because I removed IdUserGroup.DuplicateNameOrIdException.
The "-1 release audit" is a bit bogus because it refers to !????? hs_err_pid22678.log which is irrelevant to the patch itself.

I'm uploading a new version to address the "-2" warnings.

, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12626438/HDFS-5767.002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-nfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6007//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6007//console

This message is automatically generated., Thank you, Yongjun. The patch looks good to me.
Minor comment: the error message DUPLICATE_NAME_ID_DEBUG_INFO now can be updated from "NFS gateway can't start with..." to "NFS gateway could have problem starting with..."., Thanks a lot Brandon, that's a very good change to make.
I'm uploading a revised version with this change, and with an extra import from the test file removed.
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12626756/HDFS-5767.003.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-nfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6015//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6015//console

This message is automatically generated., +1., I've committed the patch. Thank you, Yongjun, for the contribution!
, SUCCESS: Integrated in Hadoop-trunk-Commit #5100 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5100/])
HDFS-5767. NFS implementation assumes userName userId mapping to be unique, which is not true sometimes. Contributed by Yongjun Zhang (brandonli: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1564141)
* /hadoop/common/trunk/dev-support/test-patch.sh
* /hadoop/common/trunk/hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/nfs3/IdUserGroup.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-nfs/src/test/java/org/apache/hadoop/nfs/nfs3/TestIdUserGroup.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, Many thanks Brandon!
, SUCCESS: Integrated in Hadoop-Yarn-trunk #471 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/471/])
HDFS-5767. NFS implementation assumes userName userId mapping to be unique, which is not true sometimes. Contributed by Yongjun Zhang (brandonli: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1564141)
* /hadoop/common/trunk/dev-support/test-patch.sh
* /hadoop/common/trunk/hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/nfs3/IdUserGroup.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-nfs/src/test/java/org/apache/hadoop/nfs/nfs3/TestIdUserGroup.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1688 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1688/])
HDFS-5767. NFS implementation assumes userName userId mapping to be unique, which is not true sometimes. Contributed by Yongjun Zhang (brandonli: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1564141)
* /hadoop/common/trunk/dev-support/test-patch.sh
* /hadoop/common/trunk/hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/nfs3/IdUserGroup.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-nfs/src/test/java/org/apache/hadoop/nfs/nfs3/TestIdUserGroup.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1663 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1663/])
HDFS-5767. NFS implementation assumes userName userId mapping to be unique, which is not true sometimes. Contributed by Yongjun Zhang (brandonli: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1564141)
* /hadoop/common/trunk/dev-support/test-patch.sh
* /hadoop/common/trunk/hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/nfs/nfs3/IdUserGroup.java
* /hadoop/common/trunk/hadoop-common-project/hadoop-nfs/src/test/java/org/apache/hadoop/nfs/nfs3/TestIdUserGroup.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
]