[The following appeared in the NN log:
{noformat}
2012-11-16 16:53:00,444 INFO  FSNamesystem.audit (FSNamesystem.java:logAuditEvent(274)) - allowed=true  ugi=adi (auth:SIMPLE)   ip=/172.29.122.91       cmd=fsck        src=/foo        dst=null        per
m=null
2012-11-16 16:53:00,456 WARN  namenode.NameNode (NamenodeFsck.java:fsck(235)) - Fsck on path '/foo' FAILED
org.apache.hadoop.hdfs.protocol.UnresolvedPathException: hdfs://haus01.sf.cloudera.com:21020/foo/hello.txt
        at org.apache.hadoop.hdfs.server.namenode.INodeDirectory.getExistingPathINodes(INodeDirectory.java:220)
        at org.apache.hadoop.hdfs.server.namenode.INodeDirectory.getNode(INodeDirectory.java:133)
        at org.apache.hadoop.hdfs.server.namenode.INodeDirectory.getNode(INodeDirectory.java:143)
        at org.apache.hadoop.hdfs.server.namenode.FSDirectory.getINode(FSDirectory.java:1235)
        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getBlockLocationsUpdateTimes(FSNamesystem.java:1275)
        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getBlockLocationsInt(FSNamesystem.java:1230)
        at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getBlockLocations(FSNamesystem.java:1203)
        at org.apache.hadoop.hdfs.server.namenode.NamenodeFsck.check(NamenodeFsck.java:296)
        at org.apache.hadoop.hdfs.server.namenode.NamenodeFsck.check(NamenodeFsck.java:287)
        at org.apache.hadoop.hdfs.server.namenode.NamenodeFsck.fsck(NamenodeFsck.java:204)
        at org.apache.hadoop.hdfs.server.namenode.FsckServlet$1.run(FsckServlet.java:67)
        at java.security.AccessController.doPrivileged(Native Method)
        at javax.security.auth.Subject.doAs(Subject.java:396)
        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1437)
        at org.apache.hadoop.hdfs.server.namenode.FsckServlet.doGet(FsckServlet.java:58)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1221)
        at org.apache.hadoop.http.HttpServer$QuotingInputFilter.doFilter(HttpServer.java:1071)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)
        at org.apache.hadoop.http.NoCacheFilter.doFilter(NoCacheFilter.java:45)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)
        at org.apache.hadoop.http.NoCacheFilter.doFilter(NoCacheFilter.java:45)
        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:399)
        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)
        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)
        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:450)
        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)
        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
        at org.mortbay.jetty.Server.handle(Server.java:326)
        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:928)
        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:549)
        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
        at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:410)
        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
{noformat}, Attempting to delete the symlink with {{hdfs dfs -rm /foo/too.txt}} fails, but {{hdfs dfs -rm -r /foo}} works to recover the filesystem to a {{fsck}}-able state., It seems to me that the symlink support is completely broken - at least in 2.0.0-cdh4.0.0 version I am using. I can create the symlinks using FileContext.createSymlink() but this is all. After that any attempt to access that symlink result in UnresolvedPathException for the path that is perfectly valid. Tried all forms of path, absolute, with complete URI  - nothing seems to work. And this symlink cannot be removed using the DFS tools like Andy said before.

Also the FileStatus returned for that symlink returns false when calling its isSymlink() method. This simple test does not work for me.

{code}
import java.io.IOException;
import java.util.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.hdfs.HdfsConfiguration;
import org.apache.hadoop.fs.permission.FsPermission;

public class HDFSSymlink {
  public static void main(String[] args) throws IOException {
    HdfsConfiguration dfsConfig = new HdfsConfiguration();
    
    Path dir = new Path("/nikolai");
    
    Path target = new Path(dir, "file.txt");
    System.out.println("Target: " + target.toUri());

    Path link = new Path(dir, "link_to_file.txt");
    System.out.println("Link: " + link.toUri());
    
    FileContext fc = FileContext.getFileContext(dfsConfig);

    fc.mkdir(dir, FsPermission.getDefault(), false);

    FSDataOutputStream out = fc.create(target, EnumSet.of(CreateFlag.CREATE));
    out.writeUTF("Hello there");
    out.flush();
    out.close();

    fc.createSymlink(target, link, false);
    
    FileStatus stat = fc.getFileStatus(link);
    System.out.println("Is symlink? " + stat.isSymlink());
    
    if (stat.isSymlink()) {
      Path p = fc.resolvePath(link);
      System.out.println("Pointing to: " + p);
    } 
  }
}
{code}

After running it I do see: 

{code}
$ hadoop fs -ls  /nikolai/
Found 2 items
-rw-r--r--   3 root hadoop         13 2012-12-04 17:31 /nikolai/file.txt
-rwxrwxrwx   0 root hadoop          0 2012-12-04 17:31 /nikolai/link_to_file.txt
{code}


But that "link_to_file.txt" does not really work as symlink and I cannot even remove it without removing the parent directory., bq. It seems to me that the symlink support is completely broken

Yes, symlinks do not work for code that uses FileSystem (which is basically all code currently); see the linked Jiras:
- HADOOP-7905 Port FileContext symlinks to FileSystem
- HADOOP-8040 Add symlink support to FileSystem
- HADOOP-6424 Port FsShell to FileContext, Does this include FileStatus obtained via FileContext? In my code I work only with FileContext. Also I am unable to delete that symlink I create via FileContext - even when trying to delete via FileContext too., I would expect FileStatus to work, considering that it appears to work right in TestFcHdfsSymlink.java (https://github.com/apache/hadoop-common/blob/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/fs/TestFcHdfsSymlink.java#L220 ).  If you have a case that doesn't work and seems like a bug, please create another jira and post an example., @Nikolai,

Like stat vs lstat, FileContext#getFileLinkStatus returns the FileSatus of the link, getFileStatus resolves all the symlinks in the path and returns the FileStatus of the resolved path.   , Ran into this again, seems high time to fix it.

Here's a patch that has fsck treating symlinks in a similar way to how they are presented in file listings -- as a file with zero blocks.  This seems to be the smallest change to get it working.

Another approach could be much more aware of symlinks and report them separately from files and directories in the fsck output, but I'm not sure how many users are relying on the existing output format.  My thinking is get it working first then extend the exposure of symlinks in fsck results in a later JIRA if desired., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12589083/HDFS-4205.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/4554//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/4554//console

This message is automatically generated., My suggestion would be to print symlinks as "path <symlink>".  Directories are suffixed with "<dir>" which makes it more obvious what the path truly is.  It may be a bit misleading to report symlinks as 0 length files with 0 blocks.

Now whether a symlink is considered a file for the sake of reporting the file count is a good question.  I'd lean towards no, but I truly don't care.  It's up to you., Thanks for the review, Daryn.  Here's a patch where fsck reports symlinks in the output separate from files and directories., +1 looks great!, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12589170/HDFS-4205-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/4556//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/4556//console

This message is automatically generated., Thanks again Daryn, committing this., Integrated in Hadoop-trunk-Commit #4002 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4002/])
    HDFS-4205. fsck fails with symlinks. Contributed by Jason Lowe (Revision 1495648)

     Result = SUCCESS
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1495648
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsck.java
, I committed this to trunk, branch-2, branch-2.1-beta, and branch-0.23., Integrated in Hadoop-Yarn-trunk #248 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/248/])
    HDFS-4205. fsck fails with symlinks. Contributed by Jason Lowe (Revision 1495648)

     Result = FAILURE
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1495648
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsck.java
, Integrated in Hadoop-Hdfs-0.23-Build #646 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/646/])
    HDFS-4205. fsck fails with symlinks. Contributed by Jason Lowe (Revision 1495652)

     Result = SUCCESS
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1495652
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsck.java
, Integrated in Hadoop-Hdfs-trunk #1438 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1438/])
    HDFS-4205. fsck fails with symlinks. Contributed by Jason Lowe (Revision 1495648)

     Result = FAILURE
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1495648
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsck.java
, Integrated in Hadoop-Mapreduce-trunk #1465 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1465/])
    HDFS-4205. fsck fails with symlinks. Contributed by Jason Lowe (Revision 1495648)

     Result = FAILURE
jlowe : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1495648
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NamenodeFsck.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsck.java
]