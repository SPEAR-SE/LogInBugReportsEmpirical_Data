[Here is the test failure and stack trace.  I was running with a small code change in {{Path}} to embed the offending URI in the exception message.

{code}
Running org.apache.hadoop.hdfs.server.namenode.TestCreateEditsLog
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.108 sec <<< FAILURE!
testCanLoadCreatedEditsLog(org.apache.hadoop.hdfs.server.namenode.TestCreateEditsLog)  Time elapsed: 1874 sec  <<< ERROR!
org.apache.hadoop.HadoopIllegalArgumentException: Unsupported name: has scheme but relative path-part, uri = file:/C:
        at org.apache.hadoop.fs.Path.checkNotSchemeWithRelative(Path.java:67)
        at org.apache.hadoop.fs.FileContext.getFSofPath(FileContext.java:303)
        at org.apache.hadoop.fs.FSLinkResolver.resolve(FSLinkResolver.java:85)
        at org.apache.hadoop.fs.FileContext.getFileLinkStatus(FileContext.java:1129)
        at org.apache.hadoop.fs.Globber.getFileLinkStatus(Globber.java:70)
        at org.apache.hadoop.fs.Globber.glob(Globber.java:223)
        at org.apache.hadoop.fs.FileContext$Util.globStatus(FileContext.java:1908)
        at org.apache.hadoop.hdfs.server.namenode.TestCreateEditsLog.testCanLoadCreatedEditsLog(TestCreateEditsLog.java:84)
{code}
, [~decster], would you be able to look at this since it was introduced by HADOOP-9877?  The actual logic of {{TestCreateEditsLog}} is probably less interesting than the way it's using {{globStatus}}, which may indicate that we should add a new unit test in Hadoop Common to try to catch problems with this usage earlier., Sure, thanks for finding this., Hi [~cnauroth],

{code}
  private static final Pattern hasDriveLetterSpecifier =
      Pattern.compile("^/?[a-zA-Z]:");

  private static boolean hasWindowsDrive(String path) {
    return (WINDOWS && hasDriveLetterSpecifier.matcher(path).find());
  }

  public boolean isUriPathAbsolute() {
    int start = hasWindowsDrive(uri.getPath()) ? 3 : 0;
    return uri.getPath().startsWith(SEPARATOR, start);
   }
{code}

I suspect Path.isUriPathAbsolute may be flawed:

1. "file:/C:" should be a absolute directory, right? but without ending "/", uri.getPath().startsWith(SEPARATOR, start) will yield false
2. Another issue is probably not relevant to this bug, but still a problem:
   hasDriveLetterSpecifier allow first "/" to be skiped, but the code "int start = hasWindowsDrive(uri.getPath()) ? 3 : 0;" always assume first "/" exists. 

Anyway, I can provide a patch first to try to solve this according my thoughts, but I don't have a windows environment to test this.

, Sorry, after reading more related code, it looks like the convention is: "/C:" should be relative path and "/C:/" should be absolute. 
globStatus try each component using getFileLinks status without "/" suffix, which leads to the exception thrown.

I think this behavior is really confusing in many ways:
1. if "/C:" is relative, which path is it relative to? If it is workingDir, what if working dir is at another drive? For example: "/D:/foo".
2. if "xxx/foo" is absolute, we can no longer assume "xxx" is absolute.

Is any reason or benefit of making "/X:" relative?
, Looks like the same reason caused HADOOP-9887, [~cnauroth], can you verify the patch in HADOOP-9887 can fix this test failure?
, bq. Chris Nauroth, can you verify the patch in HADOOP-9887 can fix this test failure?

Ah, you're absolutely right.  HADOOP-9887 fixes it.  I really should have thought to try that first, considering I'm the reviewer on HADOOP-9887.  :-)

Thank you for investigating, Binglin, and I hope this didn't waste too much of your time., Also, just to follow up on some questions:

bq. if "/C:" is relative, which path is it relative to? If it is workingDir, what if working dir is at another drive? For example: "/D:/foo".

"/C:" is relative, because we need to match the behavior of the local file system on Windows.  On Windows, accessing the bare drive specifier accesses the current working directory of the drive, and each drive can have a distinct current working directory.  Since the meaning of "C:" or "D:" changes as the current working directory changes, the path is considered relative.  See below for a full example of how this works in the shell.

bq. hasDriveLetterSpecifier allow first "/" to be skiped, but the code "int start = hasWindowsDrive(uri.getPath()) ? 3 : 0;" always assume first "/" exists.

What is confusing about this is that path strings can enter the {{Path}} class either with or without the leading '/' before the drive spec, so the regex needs to handle both.  Then, after the path string gets translated to a {{URI}} internally, the leading '/' is guaranteed to be in the URI.  I believe the current code in {{Path#isUriPathAbsolute}} is correct, because this code only runs after the internal translation to {{URI}}.

{code}
C:\>cd C:\foo

C:\foo>dir C:
 Volume in drive C has no label.
 Volume Serial Number is C2FC-F17C

 Directory of C:\foo

08/22/2013  06:00 PM    <DIR>          .
08/22/2013  06:00 PM    <DIR>          ..
               0 File(s)              0 bytes
               2 Dir(s)  14,801,162,240 bytes free
C:\foo>cd C:\bar

C:\bar>dir C:
 Volume in drive C has no label.
 Volume Serial Number is C2FC-F17C

 Directory of C:\bar

08/22/2013  06:00 PM    <DIR>          .
08/22/2013  06:00 PM    <DIR>          ..
               0 File(s)              0 bytes
               2 Dir(s)  14,801,162,240 bytes free
C:\bar>cd D:\baz

C:\bar>dir D:
 Volume in drive D is Temporary Storage
 Volume Serial Number is B28B-7C3C

 Directory of D:\baz

08/22/2013  06:00 PM    <DIR>          .
08/22/2013  06:00 PM    <DIR>          ..
               0 File(s)              0 bytes
               2 Dir(s)  298,357,399,552 bytes free
C:\bar>cd D:\buz

C:\bar>dir D:
 Volume in drive D is Temporary Storage
 Volume Serial Number is B28B-7C3C

 Directory of D:\buz

08/22/2013  06:00 PM    <DIR>          .
08/22/2013  06:00 PM    <DIR>          ..
               0 File(s)              0 bytes
               2 Dir(s)  298,357,399,552 bytes free
{code}
, bq. each drive can have a distinct current working directory
Does this mean we need more than one curWorkingDirectory to support the right behavior on Windows? But currently the API only support one workingDir.

bq. I believe the current code in Path#isUriPathAbsolute is correct
Thanks for the explanation, I checked the code logic, indeed it is correct, but I think it is still better to eliminate hard coded "? 3 : 0"s, right?
I refactored the code in part of HADOOP-9897.
, bq. Does this mean we need more than one curWorkingDirectory to support the right behavior on Windows?

No, there is still one and only one current working directory for the running process, so there is no ambiguity about a relative path like "dir1\dir2\file3".  The per-drive location is an additional thing that only comes up when you start using paths that contain a drive spec, like "C:" or "D:", or even "D:foo.txt" which means "foo.txt in whatever is the current folder of D".  This definitely took me some getting used to when transitioning from Linux.  :-)

bq. I refactored the code in part of HADOOP-9897.

Thanks!  That makes sense.  I'll take a look.
]