[The solution here seems to be to use the same classloader that was used to load the {{KeyProviderFactory}}.  For some reason, when libhfds uses the JNI "invocation API", the classloader default seems to be unhelpful compared with the default when using a pure java client., Well, you could still have the issue that you have multiple keyprovider impls in different JARs. You have to make sure you are using the ClassLoader that contains them all., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12669184/HDFS-7075.001.patch
  against trunk revision 8e5d671.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common:

                  org.apache.hadoop.crypto.random.TestOsSecureRandom
                  org.apache.hadoop.security.token.delegation.web.TestWebDelegationToken

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/8041//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/8041//console

This message is automatically generated., I think this should be ok since for Hadoop, the classloader we use for {{KeyProviderFactory}} is also the classloader we want to use for loading the {{KeyProvider}} objects.  If we ever decide to use multiple classloaders, we can revisit this.

By the way, I found that when using the JNI invocation API, our thread context classloader is null, and our system classloader appears to have the exploded classpaths we set in the {{CLASSPATH}} environment variable when launching the program.  I found some references indicating that the system classloader is normally used when JNI calls {{ServiceLoader}}, but for some reason, that doesn't seem to be the case here., +1., SUCCESS: Integrated in Hadoop-Yarn-trunk #684 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/684/])
HDFS-7075. hadoop-fuse-dfs fails because it cannot find JavaKeyStoreProvider$Factory. (cmccabe) (cmccabe: rev f23024852502441fc259012664e444e5e51c604a)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProviderFactory.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1900 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1900/])
HDFS-7075. hadoop-fuse-dfs fails because it cannot find JavaKeyStoreProvider$Factory. (cmccabe) (cmccabe: rev f23024852502441fc259012664e444e5e51c604a)
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProviderFactory.java
* hadoop-common-project/hadoop-common/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1875 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1875/])
HDFS-7075. hadoop-fuse-dfs fails because it cannot find JavaKeyStoreProvider$Factory. (cmccabe) (cmccabe: rev f23024852502441fc259012664e444e5e51c604a)
* hadoop-common-project/hadoop-common/CHANGES.txt
* hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProviderFactory.java
]