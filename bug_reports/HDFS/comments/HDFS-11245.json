[Could you check the {{Final CLASSPATH}} in {{--debug}} output? The conf dir should be on the path. Most Hadoop components load resource (conf file and log4j.properties) from classpath.

Trunk has HADOOP-9902 while branch-2 does not., The problem is here:

{code}
export HADOOP_CLASSPATH=$(hadoop classpath):"$HADOOP_HOME"/share/hadoop/tools/lib/*
export HADOOP_USER_CLASSPATH_FIRST=true
{code}

IIRC, branch-2 didn't actually process the classpath correctly.  HADOOP\_USER\_CLASSPATH\_FIRST was only "sorta" true and varied between the different projects.  3.x fixes that and makes it always true.  With that knowledge, we can break this down a bit.

hadoop classpath gives you all of the hadoop jars.  But what you probably don't know is that those jars also contain default versions of log4j and the xml files.  Now by forcing the user classpath first, the default ones override the HADOOP\_CONF\_DIR values.

So for 3.x, do not put hadoop classpath in the path list.  That will always be present. Additionally, there's not much reason to forcefully add all of the tools dir in the classpath.  This now configurable via the HADOOP\_OPTIONAL\_TOOLS vars in hadoop-env.sh which will only add the features you actually care about rather than adding a full kitchen sink of stuff., [~aw],
When I {{unset HADOOP_USER_CLASSPATH_FIRST}} it all appears to work. I made the rest of the changes you suggest. , HADOOP-9902 had a massive rewrite of scripts which improved the consistency and rationality of all the environment variables. These improvements have changed a few things which end up meaning users/admins need to alter their environment when switching from 2.x to 3.x.

The issue here was setting {{HADOOP_USER_CLASSPATH_FIRST}} as well as {{HADOOP_CLASSPATH}} when these are no longer needed. Also, getting the tools in the classpath is also done through {{HADOOP_OPTIONAL_TOOLS}} in {{hadoop-env.sh}} instead of {{HADOOP_CLASSPATH}} hacking.

Unsetting these variables seems to fix everything.

Possible follow on: more documentation distilling the changes required when moving from 2.x to 3.x. Especially in the context of a rolling upgrade., FWIW, 

{code}
export HADOOP_CLASSPATH=$(hadoop classpath):"$HADOOP_HOME"/share/hadoop/tools/lib/*
export HADOOP_USER_CLASSPATH_FIRST=true
{code}

doesn't really work well under branch-2 either. This construction just doubles the amount of jars that the system is going to look through to find what it needs, leading to some very negative performance impacts. In the end, it's effectively the same as

{code}
export HADOOP_CLASSPATH="$HADOOP_HOME"/share/hadoop/tools/lib/*
{code}

but without the double lookup.
]