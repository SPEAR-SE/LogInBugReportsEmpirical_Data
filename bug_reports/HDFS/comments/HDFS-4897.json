[I wouldn't expect a move to drop the quotas, but it does stand to reason that copy shouldn't transfer the quota - at least by default.  Perhaps the –p option could be extended, but one difficulty is that neither FileSystem nor AbstractFileSystem expose quota operations., bq. Perhaps the –p option could be extended,

I think that's probably the right approach.

bq. but one difficulty is that neither FileSystem nor AbstractFileSystem expose quota operations.

Perhaps we should add a "preserveAttributes(Path src, Path dst)" call to the FileSystem/AbstractFileSystem interfaces with default implementations that do nothing. That way implementing file systems with FS-specific attributes can do their own thing., Sorry, I made a mistake in the initial filing. _hdfs dfs -mv_ will retain the quotas settings, but not _-cp_. This still means that when we want to restore a subtree using snapshots, we won't be able to retain quotas settings because we can't use move., Hi Stephen, I tried "hadoop fs -mv" and in my test the same quota setting were included in the new directory:

{code}
$ hadoop dfsadmin -setQuota 100 /user/jing
$ hadoop fs -count -q /user/jing
         100              99            none             inf            1            0                  0 /user/jing
$ hadoop fs -mv /user/jing /user/jing-copy2
$ hadoop fs -count -q /user/jing-copy2
         100              99            none             inf            1            0                  0 /user/jing-copy2
{code}

So is this issue only about copying a directory? , bq. Sorry, I made a mistake in the initial filing. hdfs dfs -mv will retain the quotas settings, but not -cp. This still means that when we want to restore a subtree using snapshots, we won't be able to retain quotas settings because we can't use move.

Can you explain what you mean by "restore a subtree using snapshots"? Currently there is no restore supported. If you want to restore some data, you need to copy, which should follow the current copy semantics., bq. Sorry, I made a mistake in the initial filing. hdfs dfs -mv will retain the quotas settings, but not -cp.

Yeah, I should refresh the page before posting my last comment :)

bq. This still means that when we want to restore a subtree using snapshots, we won't be able to retain quotas settings because we can't use move.

We can either extend the existing command (as suggested by Daryn and Aaron) or we can provide a separate snapshot tool which can retain the quota setting when restoring., bq. Can you explain what you mean by "restore a subtree using snapshots"? Currently there is no restore supported. If you want to restore some data, you need to copy, which should follow the current copy semantics.

I meant using copy to restore some data. Sorry for being unclear., bq. I meant using copy to restore some data. Sorry for being unclear.
If that is the case, the suggestion of cp -p, to enable the semantics you are looking for, makes sense., In 3.0.0 implementation, cp -p command preserves only mtime, atime, owner, group, permisson of files.
I think that as well as quota, other attributes should be preserved by cp -p command. So, I think that adding preserveAttributes(Path src, Path dst) is good idea.

{code}
 protected void copyFileToTarget(PathData src, PathData target) throws IOException {
    src.fs.setVerifyChecksum(verifyChecksum);
    InputStream in = null;
    try {
      in = src.fs.open(src.path);
      copyStreamToTarget(in, target);
      if(preserve) {
        target.fs.setTimes(
          target.path,
          src.stat.getModificationTime(),
          src.stat.getAccessTime());
        target.fs.setOwner(
          target.path,
          src.stat.getOwner(),
          src.stat.getGroup());
        target.fs.setPermission(
          target.path,
          src.stat.getPermission());
      }
    } finally {
      IOUtils.closeStream(in);
    }
  }
{code}]