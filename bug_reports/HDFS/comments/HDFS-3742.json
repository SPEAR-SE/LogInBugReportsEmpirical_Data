[It's much better to use a linker script rather than attempting to get all of the visibility information correctly represented in the source code.

Here's a reasonably concise intro to the topic: http://stackoverflow.com/questions/435352/limiting-visibility-of-symbols-when-linking-shared-libraries  , The last answer on that stackoverflow question says:

bq. The code generated to call any exported functions or use any exported globals is less efficient than those that aren't exported. There is an extra level of indirection involved. This applies to any function that might be exported at compile time. gcc will still produce extra indirection for a function that is later un-exported by a linker script. So using the visibility attribute will produce better code than the linker script.

In other words, linker version scripts are less efficient than just using __attribute__((visibility))

More importantly, I don't think new contributors will understand how to add new functions to the API if we use a separate, magic script.  Whereas it's easy to copy and paste the old function definition to the new one.  It's more obvious what's going on when the information is in the code rather than a separate file., bq. exported globals is less efficient than those that aren't exported.

I'm not convinced that that effect is even real (I'd want to see a fully worked example showing improved codegen) but even if it is, we're talking about a few dozen instructions at most, some PIC reloads and maybe a PLT fixup or 10, in the context of a JNI implementation. Worrying about the PLT here is several orders of magnitude below the level of optimization that makes sense in this context.

bq. don't think new contributors will understand how to add new functions

If we use a linker script with default hidden visibility, the new function won't work until they grep the source tree for a function that does work and then do the same thing for their new function.  This is not hard.  Version scripts are not black magic anymore, it's 2012 not 2007., There is a way to make symbols default to hidden in gcc, which might alleviate some of your concerns with the attribute-based method.

Anyway, I don't have a strong feeling about this either way.  I was just bringing up some potential issues., implemented in HDFS-7879, Closing tickets that are already part of a release.]