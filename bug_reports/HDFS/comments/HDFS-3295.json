[My analysis :
In each iteration we create a new Balancer object
{code}
 b = new Balancer(nnc, p, conf);
{code}
The bytesMoved calculated from dispatchBlockMoves() in iteration n will get set to 0 again in iteration n+1 as per the above code. Hence when it reaches, 
{code}
formatter.format("%-24s %10d  %19s  %18s  %17s\n", 
          DateFormat.getDateTimeInstance().format(new Date()),
          iteration,
          StringUtils.byteDesc(bytesMoved.get()),
          StringUtils.byteDesc(bytesLeftToMove),
          StringUtils.byteDesc(bytesToMove)
          );
{code}
bytesMoved will be equal to 0.

Also I have seen some cases where there is no block move for 5 continuous iterations Balancer is not exiting. This is also due to the above reason where notChangedIterations is getting set 0 for each iteration. Hence it never reaches the value >1., Scenario 2: Balancer will not exit, even when there is no block movement for 5 continuous iterations.

Steps to reproduce it.

replication = 1.
Step 1: start NN and DN1.pump 4 GB of data
Step 2: start DN2 and stop DN2. It will take 10.5 min for NN to recongnize that the DN2 is down
Step 3: issue balancer (./hdfs balancer -threshold 1)

Balancer will keep on iterating and will never exit., Uploading a patch addressing both the scenarios.

1. Created a new class BalancerMetrics in Balancer.java , which has fieds that are common between a NamenodeConnector and Balancer for all the iterations.
2. Created a map nncVsBalancerMetricsMap which has NamenodeConnector as key and BalancerMetrics as value. So that now for each nnc we will get the fields from this map that are common for the all the iterations and hence this will solve the issue.

Please review and provide your comments., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12528075/HDFS-3295.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 javadoc.  The javadoc tool appears to have generated 2 warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.balancer.TestBalancerWithDNDown

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2475//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2475//console

This message is automatically generated., Updated the test case in the patch. This time before starting the balancer waiting for the replication set for the file to complete., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12528380/HDFS-3295.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.balancer.TestBalancerWithDNDown

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2493//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2493//console

This message is automatically generated., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12528554/HDFS-3295.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.balancer.TestBalancerWithDNDown

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2502//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2502//console

This message is automatically generated., In test case the shutdownDatanode thread before shutting down the datanode balancer completed all the iterations. Thus using CountDownLatch to make sure that first datanode gets shutdown in the second iteration and then balancer resumes with its iterations., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12529857/HDFS-3295.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2522//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2522//console

This message is automatically generated., +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12529861/HDFS-3295.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2524//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2524//console

This message is automatically generated., +1 on the nice finding on the bug. However, shall we think some cleaner way to fix it? Rather than keeping local variable for each nnc, I think we can keep a map from nnc to balancer object. Then each time, we just call get(nnc) to return (or new if not initiated before) a balancer. That make change on Balancer more concisely. Good work on new unit test., Thanks a lot, Junping, for taking a look and Also thanks to Meng for reporting the issue in other JIRA.

I think currently Balancer will shutdown its executor pools in run method itself once it balanced. So, when we reuse the same balancer, it will fail to use the executor pools as they got shutdown as part of previous run. 

May be the other option is to add the shutdown method in balancer and lets iterate for all the nnConnectors and shutdown the corresponding Balancer? So, the executors can be used when we reuse the balancer object with the nnConnectors.
Ashish, what do you think about this?, This issue has been fixed in HDFS-4261, let's resolve it as "Cannot Reproduce".]