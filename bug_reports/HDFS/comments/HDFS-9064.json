[Thanks for reporting the issue Rushabh! Is this related to HDFS-7588 ?  i.e. was there a web page exposing this? Or are you interested only in the REST call?, only in the REST call., block_info_xml.jsp which was producing XML output was removed as all JSPs are faded out in new web UI framework.

I think get block info feature can be provided back through webhdfs GET request.

*URL syntax:*
{code:xml}
http://<nnAddress>:<port#>//webhdfs/v1/?OP=GETBLOCKINFO&blockId=xxx
{code}

*Sample Output:*

{code:xml}
{
  "BlockInfo":
  {
    "block_id"      : 8888705098093096373,
    "block_name"       : blk_8888705098093096373,
    "file":
    
      {
        "local_name"      : "some_file_name",
        "local_directory"       : "/input/",
       ...
      },
	"Replicas":
     [
      {
        "host_name"      : hostname1,
        "is_corrupt"       : false,
	   },
	   {
        "host_name"      : hostname2,
        "is_corrupt"       : false,
	   },...
	 ]
  }
}
{code}

[~shahrs87], as the changes are incompatible to old API, clients have to update the code to use webhdfs and parse the JSON content inplace of earlier XML parsing. I think it should be fine. Please give your view.

If fine, I will go a head to implement the same., [~kanaka]: Thanks for taking up the jira.
bq. I think get block info feature can be provided back through webhdfs GET request.
For querying via webhdfs, this requires the browser to be authenticated via SPNEGO.
This was not the case with block_info_xml.jsp utility in 2.6.

If webhdfs (which requires SPNEGO authentication) is the only way to implement this feature, then we already have an alternative to use fsck command 
{noformat}
hdfs fsck  -blockId blk_xxx
{noformat}

bq. If fine, I will go a head to implement the same.
 If other people in the community are interested in this feature, then you can go ahead and implement., Thanks for comments [~shahrs87]. I am trying to understand the problem.

{quote}This was not the case with block_info_xml.jsp utility in 2.6{quote}

IMO accessing webhdfs URLs is same as accessing "block_info_xml.jsp" with respective to credentials. In fact most of the  cluster details in new NN UI accessed through webhdfs. 
Can you provide details how you were using "block_info_xml.jsp" earlier. Through any link from NN UI or java http client program?

{quote}then we already have an alternative to use fsck command{quote}
fsck requires hadoop libs and script in the cluster environment but REST APIs are independent of hadoop libraries/script which can be used from external clients., I would like to correct my previous analysis with following observations.

1) I have observed {{block_info_xml.jsp}} is accessible with out SPNEGO authentication in 2.6.0 even in Secure mode ON. 

2) Alternatively URL like {{nnip:port/fsck?blockId=blk_xxxx}} (SPNEGO authentication is required) also available inplace of {{block_info_xml.jsp}} from remote clients though some  information like owner & permission details are not available in the response (alternatively one can use webhdfs REST API for such details).

I think it is security breach proving {{block_info_xml}} and so it was removed. Let's get confirmation from implementors of HDFS-6252 here.

[~wheat9], Can you give your opinion on this JIRA and also shall we add GETBLOCKINFO in webhdfs for all the details provided by {{block_info_xml.jsp}} ?, There are two reasons that the jsp is removed:

(1) Yes, there's security issues in block_info_xml.jsp.
(2) The output itself is problematic. The information, particularly, the filename of the block, is inaccurate due to snapshots and truncate., Whenever we do this, should we extend https://issues.apache.org/jira/browse/HDFS-8678 ?, [~wheat9], 
Thanks for info.

So what should be the conclusion ? 
Should we need provide this despite of security issue and inaccuracy?

This jira is marked critical for 2.7.2. So we should do some progress on this., HDFS-8246 has discussions on the same topic. My understanding is that the conclusion is that the information is not fully accurate and fsck is able to solve the use case. Thus IMO we should leave it out., Thanks for inputs [~wheat9], I agree with you. Hence closing the JIRA as won't fix.  [~shahrs87], please feel free to open again if still you feel the alternatives like fsck is not sufficient in your use case.]