[Hi [~guadilla]

It is not clear what was the problem. Webhdfs was designed not to automatically follow redirects, you don't want to send too many data to NN server directly, instead you want NN tells you which DN you want to write, then use another request to DN to transfer data. Would you provide more info about how webhdfs was crashed? At this point, can't tell this is a webhdfs problem or not., Hi Weiwei Yang,

     I will try to explain it better. Let's focus on a GET operation:
     - step 1 --> http request to the namenode from the client to get a concrete file
     - step 2 --> the namenode looks up where is the file and sends to the client a 307 (forward) response with the datanode uri in the location
     - step 3 --> the client reads the response (307) and makes a second http client to the suggested datanode
     - step 4 --> the datanode reads the requested file and gives it back the content to the client

     It works fine if the httpconnection has the default value (true) in the getFollowRedirects atributte; otherwise if fails because it stops in the step3. I know that this atributte followRedirects should be by default true but we detected that certain libraries modify that behaviour and webhdfs worked poorly.  

     To solve this problem what we did was change the FileSystem class to instead of supposing that FollowRedirects is true always set the value to true. Of course we used the instance scope using setInstanceFollowRedirects instead of using the global parameter.

     PS: It was a nighmare of two weeks for us and we wanted to contribute with the solution we found. We are just users of hadoop and we wanted to give back something from us to the project.

Regards,
Oscar, Hello [~guadilla]

Are you talking about client side follow redirects on http connection? If you already have a patch, you are welcome to attach the patch on this ticket. Use More - Attach Files.
, Hi Weiwei,

     I am talking about client side. I attached the impl of the 1.0.3 client. Anyway the key is in the two lines added with the code "conn.setInstanceFollowRedirects(true);". In the end we used the 1.0.3 release because it was needed less dependencies.

Regards,
Oscar, with the setInstanceFollowRedirect, Hello [~guadilla]

{{HttpURLConnection}} class has a static method [setFollowRedirects|https://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html#setFollowRedirects(boolean)] sets a global flag, and [setInstanceFollowRedirects |https://docs.oracle.com/javase/7/docs/api/java/net/HttpURLConnection.html#setInstanceFollowRedirects(boolean)] is using that as a default value. So it could be possible other libraries calls {{setFollowRedirects}} that changes the behaviour. 

However I just tried to set this value to false and tested open() *2-step-opt* and getFileBlockLocations() *1-step-opt*, 
{code}
HttpURLConnection.setFollowRedirects(false);
WebHdfsFileSystem sw = (WebHdfsFileSystem) FileSystem.get(new URI(uri), conf);
FSDataInputStream in = sw.open(new Path(path));
...
{code} 
they both worked fine. What was the error you saw? Can you get this issue reproduced?, Hi Weiwei,

     The problem was that HttpURLConnection in some cases had the global FollowRedirects atribute as false and in this cases the get operation didn't work fine because the WebHdfs call to the namenode returned 307 and it wasn't made a second request to the datanode because http was said not to follow. A bit tricky but understable.

     From a standalone it works fine. It fails only from a web environment. In our case we are using it from weblogic 10.3.6.  I can't reproduce the problem without using a third party application.... 

Regards,
Oscar, Hi [~guadilla]

If you have an error stack trace, that will help to explain the problem.
At mean time I am running out of idea about what would be the root cause of this issue, I cannot make any fix if the issue can not be reproduced. I'll let others see if they have any more ideas. , Hi Weiwei,

     I understand your position of no fixing nothing not being able to reproduce because I work mainly the same. In this case I am sorry for not being able to give more information. I put the stacktrace of the error we had before modifying the FollowRedirect behaviour. Anyway the change I did is nothing apart from not supposing the flag state and set it directly. But as you want, if you include in the following release fine and otherwise fine also. I can't do more.

 java.io.IOException: Unexpected HTTP response: code=307 != 200, op=OPEN, message=TEMPORARY_REDIRECT
       at org.apache.hadoop.hdfs.web.WebHdfsFileSystem.validateResponse(WebHdfsFileSystem.java:250)
       at org.apache.hadoop.hdfs.web.WebHdfsFileSystem.access$000(WebHdfsFileSystem.java:103)
       at org.apache.hadoop.hdfs.web.WebHdfsFileSystem$OffsetUrlInputStream.checkResponseCode(WebHdfsFileSystem.java:641)
       at org.apache.hadoop.hdfs.ByteRangeInputStream.getInputStream(ByteRangeInputStream.java:106)
       at org.apache.hadoop.hdfs.ByteRangeInputStream.read(ByteRangeInputStream.java:130)
       at java.io.FilterInputStream.read(FilterInputStream.java:66)

Regards,
Oscar
]