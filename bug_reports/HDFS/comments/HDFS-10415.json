[happens on Jenkins too, Thanks for reporting this [~sjlee0] and [~stevel@apache.org].

I think the problem was that, we added a new {{StorageStatistics}} object in [HADOOP-13065] to {{DistributedFileSystem}} and it needs initialized in the {{initialize()}} method. In the test, we simply create a new instance by calling constructor, in which way the {{initialize()}} method is not called,  instead of using the factory methods like {{FileSystem#get()}}.

As a fix, I see two possibilities:
# Call the {{initialize()}} method explicitly before mocking the {{dfs}} field. This way, the newly added {{StorageStatistics}} object will be initialized before using it.
# For the {{InOrder}} unit test, actually we can use the spied objects other than mocked objects. This way, we don't need to create our test file system {{MyDistributedFileSystem}}.

I prefer the 2nd option as v0 patch does., If the patch looks good, I think we can apply it to {{trunk}} branch as well. Thanks., we could also consider having dfs.close() being resilient to invocation prior to initialize() being called. Clearly, it used to be. Given that delete() is being called in teardown, why not have that skip the counting.

of course, there's the situation that normally, you wouldn't have any files to delete in an FS that was never inited —in which case this problem never arises in the real system.

What happens if {{initialize()}} is called in the test?, # If we call the {{initialize()}} method in the test, it will pass. Of course we have to do this before mocking the {{dfsclient}} object.
{code:java|title=Solution 2 - calling initialize() explicitly}
   private static class MyDistributedFileSystem extends DistributedFileSystem {
     MyDistributedFileSystem() {
-      statistics = new FileSystem.Statistics("myhdfs"); // can't mock finals
+      initialize(new URI("hdfs://localhost"), new HdfsConfiguration()); // exception may be thrown
       dfs = mock(DFSClient.class);
     }
{code}
# {{DistributedFileSystem#close()}} per se is not resilient to invocation prior to {{initialize()}} being called. Meanwhile, the {{MyDistributedFileSystem}} also has to create a {{Statistics}} object explicitly which is partial of what the {{initialize()}} method does. To me, this is not ideal. It also has to trick out the {{deleteOnExit()}} by returning true for any path. I'm more comfortable by simply using a real DFS object, and validating the order of implicit operations when closing.
# Anyway, we can avoid calling {{initialize()}} method by constructing the {{storageStatistics}} object in the {{MyDistributedFileSystem}} as following:
{code:title=Solution 3 - constructing the storageStatistics}
     MyDistributedFileSystem() {
       statistics = new FileSystem.Statistics("myhdfs"); // can't mock finals
+      storageStatistics = new DFSOpsCountStatistics(); // field needs to be protected
       dfs = mock(DFSClient.class);
     }
{code}
, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 13m 0s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 9m 10s {color} | {color:green} branch-2 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 38s {color} | {color:green} branch-2 passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 42s {color} | {color:green} branch-2 passed with JDK v1.7.0_101 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 32s {color} | {color:green} branch-2 passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 54s {color} | {color:green} branch-2 passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 22s {color} | {color:green} branch-2 passed {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 2m 8s {color} | {color:red} hadoop-hdfs-project/hadoop-hdfs in branch-2 has 1 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 6s {color} | {color:green} branch-2 passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 46s {color} | {color:green} branch-2 passed with JDK v1.7.0_101 {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 37s {color} | {color:green} the patch passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 37s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 40s {color} | {color:green} the patch passed with JDK v1.7.0_101 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} checkstyle {color} | {color:red} 0m 25s {color} | {color:red} hadoop-hdfs-project/hadoop-hdfs: patch generated 1 new + 63 unchanged - 0 fixed = 64 total (was 63) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 47s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 11s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 8s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 5s {color} | {color:green} the patch passed with JDK v1.8.0_91 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 49s {color} | {color:green} the patch passed with JDK v1.7.0_101 {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 50m 8s {color} | {color:red} hadoop-hdfs in the patch failed with JDK v1.8.0_91. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 47m 50s {color} | {color:red} hadoop-hdfs in the patch failed with JDK v1.7.0_101. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 21s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 139m 8s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| JDK v1.8.0_91 Failed junit tests | hadoop.metrics2.sink.TestRollingFileSystemSinkWithHdfs |
| JDK v1.7.0_101 Failed junit tests | hadoop.metrics2.sink.TestRollingFileSystemSinkWithHdfs |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:babe025 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12804489/HDFS-10415-branch-2.000.patch |
| JIRA Issue | HDFS-10415 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 893b6904bbf8 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | branch-2 / 6ebb92c |
| Default Java | 1.7.0_101 |
| Multi-JDK versions |  /usr/lib/jvm/java-8-oracle:1.8.0_91 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_101 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HDFS-Build/15465/artifact/patchprocess/branch-findbugs-hadoop-hdfs-project_hadoop-hdfs-warnings.html |
| checkstyle | https://builds.apache.org/job/PreCommit-HDFS-Build/15465/artifact/patchprocess/diff-checkstyle-hadoop-hdfs-project_hadoop-hdfs.txt |
| unit | https://builds.apache.org/job/PreCommit-HDFS-Build/15465/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs-jdk1.8.0_91.txt |
| unit | https://builds.apache.org/job/PreCommit-HDFS-Build/15465/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs-jdk1.7.0_101.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HDFS-Build/15465/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs-jdk1.8.0_91.txt https://builds.apache.org/job/PreCommit-HDFS-Build/15465/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs-jdk1.7.0_101.txt |
| JDK v1.7.0_101  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/15465/testReport/ |
| modules | C: hadoop-hdfs-project/hadoop-hdfs U: hadoop-hdfs-project/hadoop-hdfs |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/15465/console |
| Powered by | Apache Yetus 0.2.0   http://yetus.apache.org |


This message was automatically generated.

, Thanks for the analysis [~liuml07]. Do you know why the trunk version of the test does not fail?, [~sjlee0], interesting question. I see code difference in {{MyDistributedFileSystem}} between {{trunk}} and {{branch-2}}:
{code}
+    // Symlink resolution doesn't work with a mock, since it doesn't
+    // have a valid Configuration to resolve paths to the right FileSystem.
+    // Just call the DFSClient directly to register the delete
+    @Override
+    public boolean delete(Path f, final boolean recursive) throws IOException {
+      return dfs.delete(f.toUri().getPath(), recursive);
+    }
{code}
Please note that the {{dfs}} actually is a {{DFSClient}} object. In the overridden {{delete()}} method, it calls the {{DFSClient#delete()}} directly, bypassing all the stats related operations. That's said, we can even remove the statement that creating {{statistics}} object in the {{MyDistributedFileSystem}}.

I think we can follow the {{trunk}} code in test, in which way {{initialize()}} and stats will be avoided elegantly as it's unrelated to the test. This will address [~stevel@apache.org]'s concern., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 24s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 8m 27s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 56s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 26s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 51s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 12s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 42s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 10s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 25s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 52s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 10s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 1s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 47s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 8s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 72m 48s {color} | {color:green} hadoop-hdfs in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 21s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 94m 37s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:2c91fd8 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12804557/HDFS-10415.000.patch |
| JIRA Issue | HDFS-10415 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux be1621e007c2 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 8a9ecb7 |
| Default Java | 1.8.0_91 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/15468/testReport/ |
| modules | C: hadoop-hdfs-project/hadoop-hdfs U: hadoop-hdfs-project/hadoop-hdfs |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/15468/console |
| Powered by | Apache Yetus 0.2.0   http://yetus.apache.org |


This message was automatically generated.

, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 15s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 7m 22s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 43s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 26s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 55s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 43s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 8s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 48s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 25s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 10s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 56s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 2s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 72m 34s {color} | {color:red} hadoop-hdfs in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 19s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 92m 51s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hdfs.shortcircuit.TestShortCircuitCache |
|   | hadoop.hdfs.web.TestWebHDFS |
|   | hadoop.hdfs.TestAsyncDFSRename |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:2c91fd8 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12804557/HDFS-10415.000.patch |
| JIRA Issue | HDFS-10415 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux b81258dbd051 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 8a9ecb7 |
| Default Java | 1.8.0_91 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HDFS-Build/15474/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HDFS-Build/15474/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/15474/testReport/ |
| modules | C: hadoop-hdfs-project/hadoop-hdfs U: hadoop-hdfs-project/hadoop-hdfs |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/15474/console |
| Powered by | Apache Yetus 0.2.0   http://yetus.apache.org |


This message was automatically generated.

, Thanks for looking at this.

So basically the problem is that we're attempting to do something in the constructor of our {{DistributedFileSystem}} subclass that requires that the FS already be initialized.  Why not just override the {{initialize}} method with something like:

{code}
public void initialize() {
  super.initialize();
  statistics = new FileSystem.Statistics("myhdfs"); // can't mock finals
}
{code}

That seems like the most natural fix since it's not doing "weird stuff" that we don't do outside unit tests.

I don't feel strongly about this, though, any of the solutions proposed here seems like it would work., Hi [~cmccabe],

Thanks for the comment. Your proposal is a bit similar to my solution 2 (see the comment above).

The problem is that, though it's indeed more nature fix, the {{initialize()}} method is never called after {{MyDistributedFileSystem}} is constructed. This is because, the object is not created by the static factory method {{FileSystem#get()}}. As a result, justing implementing the {{initialize()}} is not able to work. We have to call it.
As to implementation,
# the {{dfs}} object is mocked in the {{MyDistributedFileSystem}} constructor. The {{DistributedFileSystem#initialize()}} method will reset this value, which is expected generally. We need to mock the {{dfs}} in the {{initialize()}} after calling {{super.initialize()}}
# {{super.initialize()}} will take care of the {{statistics}} and {{storageStatistics}} so we don't need to create it explicitly after that I believe?

As [~stevel@apache.org]'s concern, if the stats has nothing to do with this unit test, we can consider avoiding it. I'm more favor of this approach.

My concern is that, why the {{trunk}} and {{branch-2}} have the code difference as following? If the javadoc is true, it should stand for both of the branches. I must have missed something?
{code}
+    // Symlink resolution doesn't work with a mock, since it doesn't
+    // have a valid Configuration to resolve paths to the right FileSystem.
+    // Just call the DFSClient directly to register the delete
+    @Override
+    public boolean delete(Path f, final boolean recursive) throws IOException {
+      return dfs.delete(f.toUri().getPath(), recursive);
+    }
{code}, there's another option, you know. Do the stats init in the constructor rather than initialize. There is no information used in setting up {{DFSClient.storageStatistics}}, its only ever written to once. Move it to the constructor and make final and maybe this problem will go away (maybe, mocks are a PITA), bq. As Steve Loughran's concern, if the stats has nothing to do with this unit test, we can consider avoiding it. I'm more favor of this approach.

Sure.  Thanks for the explanation.

bq. there's another option, you know. Do the stats init in the constructor rather than initialize. There is no information used in setting up DFSClient.storageStatistics, its only ever written to once. Move it to the constructor and make final and maybe this problem will go away (maybe, mocks are a PITA)

It seems like this would prevent us from using the Configuration object in the future when creating stats, right?  I think we should keep this flexibility.

This whole problem arises because the FileSystem constructor doesn't require a Configuration and it should, which leads to the "construct then initialize" idiom.  If it just took a Configuration in the first place we could initialize everything in the constructor.  grumble grumble, When [HADOOP-9418] was committed to {{trunk}} and {{branch-2}} the overridden {{MyDistributedFileSystem#delete()}} was not in {{branch-2}}, which is the only difference between the two commits. I don't have too much context about this, and boldly assume this as an omission.

As this case is for test only and hardly shows up in real systems, I don't have strong preference (which is listed though) regarding the possible fixes we discussed here.

# Make {{MyDistributedFileSystem}} override {{delete()}} in {{branch-2}} as in {{trunk}} (see patch v1)
# Spy instead of mocking (see patch v0) for both {{trunk}} and {{branch-2}}
# Construct {{storageStatistics}} as we construct {{statistics}}, #1 sounds like the right thing to do. [~andrew.wang], was there a reason that {{MyDistributedFileSystem#delete()}} was left out in branch-2?, actually, there's a good argument for having the configuration binding being done in an init() method; the Yarn Service model does the same thing: *it lets you subclass properly*. 

Any FS can subclass initialize(), patch up the config before calling the superclass, do something more after, all knowing that the rest of the overridden methods will get called. You cannot do things like that in constructors, If no objections about the 1st approach, does the v1 patch look good? Thanks!, I think that's just an omission, though it's been 3 years. I'm okay with reconciling with trunk if it fixes the problem., {quote}
I'm okay with reconciling with trunk if it fixes the problem.
{quote}

It does.

Can anyone commit this patch to {{trunk}} and {{branch-2}} if looks good? Thanks., It sounds like there are no strong objections to HDFS-10415.000.patch and HDFS-10415-branch-2.001.patch  Let's fix this unit test!

We can improve this in a follow-on JIRA (personally, I like the idea of adding the initialization to the {{init}} method).  But it's not worth blocking the unit test fix.

+1.

, The subclass can change the configuration that gets passed to the superclass.

{code}
class SuperClass {
  SuperClass(Configuration conf) {
    ... initialize superclass part of the object ...
  }
}

class SubClass extends SuperClass {
  SubClass(Configuration conf) {
    super(changeConf(conf));
    ... initialize my part of the object ...
  }

  private static Configuration changeConf(Configuration conf) {
    Configuration nconf = new Configuration(conf);
    nconf.set("foo", "bar");
    return nconf;
  }
}
{code}

Having a separate init() method is a well-known antipattern.  Initialization belongs in the constructor.  The only time a separate init method is really necessary is if you're using a dialect of C++ that doesn't support exceptions., Committed to 2.8., SUCCESS: Integrated in Hadoop-trunk-Commit #9890 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/9890/])
HDFS-10415. TestDistributedFileSystem#MyDistributedFileSystem attempts (cmccabe: rev 29d6cadc52e411990c8237fd2fa71257cea60d9a)
* hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
, Thank you [~cmccabe] for your review and commit!]