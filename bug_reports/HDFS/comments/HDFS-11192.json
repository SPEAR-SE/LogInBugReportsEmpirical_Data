[[~kihwal]/[~xyao]/[~daryn] any thoughts on this,as you worked on HDFS-8865?, Was it hitting its ulimit on # of threads/processes?  If that is the case, other bad things can happen even if this stage doesn't cause any trouble. E.g. replication queue init will be done by starting up a separate thread. If that doesn't happen, the user will be in a bigger trouble. A potential improvement will be to terminate NN if this happens., bq.Was it hitting its ulimit on # of threads/processes? 
Yes, Some other process creating lot of threads which leads to cross user limit.
bq.A potential improvement will be to terminate NN if this happens.

To call terminate from code, there was no exception handling done for this part of the code.

To terminate NN on OOM, java VM option {{-XX:OnOutOfMemoryError="kill -9 %p"}} was passed, even that didnt take effect.
, [~kihwal] am I miss anything here..? any thoughts on this..?, Ping. Any progress? , we might need to revert HDFS-8865,as we can't handle this?, Reverting is extreme and imho unwarranted for a very unlikely scenario.  The benefit of the parallel init is huge, while exhausting threads is symptomatic of a system management issue.

If another process by the same user as the nn exhausted the per-user thread limit, strongly consider running the nn as a distinct user.  If processes by different users managed to exhaust the os thread limit, then you should consider a dedicated nn host since that many other things running on the nn will surely degrade performance - horribly.

I agree in principal the NN should be able to detect + retry or abort but I suspect the issue is a bug in the jdk which is where it may need to be fixed.  Or maybe a default exception handler might work., We can create the quota init ForkJoinPool with a UncaughtExceptionHandler. Need to check whether it will work in this case., Looking at the java source, {{Thread.start0()}} is mapped to a JVM native method, {{JVM_StartThread()}}. Thread's uncaught exception handling is wired at the Thread class so that it is called on exit. So setting the handler for worker threads won't do any good.

But the exception does bubble up and is handled by the ThredGroup's hander. In this case, it's the namenode's main thread. So we could set the UncaughtExceptionHandler in caller thread so that it terminates on OOM.  It might be better to set it before a quota init and set it back to the default after to avoid other subsystems (e.g. jetty) causing exit. 

{{ForkJoinPool}} is also used by jdk itself in jdk8 (e.g. {{ConcurrentHashMap}}), so even with this fix, you can run into strange problems if the process cannot create more threads., Hi all:

Is there any update on this issue ? 

I have also run into the same condition HDFS-8865 resolved. And wanna know if i can merge HDFS-8865 to my repo ?]