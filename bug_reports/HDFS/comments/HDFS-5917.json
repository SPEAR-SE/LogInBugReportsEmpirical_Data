[A minor patch without any new test case, this one is very straight-forward, so it should be ok, right? :), [~saint.ack@gmail.com], could you or let other guys have a look at it? thanks!, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12627914/HDFS-5917.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6091//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6091//console

This message is automatically generated., Hi Liang Xie, have you watch HDFS-4273?  I used a similar method, the only difference is I only expire local node, because when retry connecting to local node, it is very fast to dectect failure(no connection timeout), but when you expire remote node and try reconnect, if the node is still down, you may wait a long time before we can try another live node, when happens, this increases io latency a lot.
Another minor comments:  deadNodesRefreshIntervalMs is not necessary and to hold a config key, we can always check expiry state in the loop of choosing datanode. , [~decster], thanks for your comments! yeh, i got your concern absolutely, my understanding is:
1) we need the  deadNodesRefreshIntervalMs, since we don't know the deadNodes size, we could not always assume it's only have one or two entries, right?  because probably end user is able to specify the repl factor to a bigger value than the default 3.  anyway the deadNodesRefreshIntervalMs parameter just a shortcut optimization tip.
2) "if the node is still down, you may wait a long time before we can try another live node, when happens, this increases io latency a lot",  in current trunk code, we have some configurable parameter to control the retry caused latency, right ? :) ]