[I think the current behavior is the right one. Overwrite flag indicates that if a file already exists, it needs to be overwritten, irrespective of if a file is in complete state or being written state.

My vote would be to close this as "Not a problem"., I fully agree with Suresh.  An overwrite is semantically a delete & create.  Since delete isn't influenced by a lease, neither should an overwrite.  Having a lease prevent overwrite/delete implies the lease somewhat extends to the directory contents (delete is a directory level operation) which doesn't make since a file lease is a file level lock., If you don't mind, Daryn, I'll reopen it while we are still discussing., Just throwing in my 2c, I've seen some some client applications that do creates with overwrite and expect this behavior. So, I side with Suresh and Daryn on this one., This sounds like an acceptable behaviour. Is it the same in other versions?, Also I have seen on 2.0 that the other client (the one who was overwritten) was failing with "Cannot allocate block ... passed 'previous' block " instead of a lease exception. Which would mean either that the lease is not removed by OVERWRITE or not checked somewhere in addBlock(). Anybody seen this? Couldn't reproduce it in lab environment., Yes, it's a known problem.  I've argued (polite sense) in other jiras that renamed files should remove the lease on the file.  Although I was not aware the same problem occurred with deleted files. , As Daryn said, this has been discussed before in other JIRAs (HDFS-4437 is a good one).

I think it's simpler to make leases act on inode IDs, not on paths.  Then all these problems go away without hacks (again, as noted in HDFS-4437)., What will happen in case, 2 clients trying to create file on the same path?]