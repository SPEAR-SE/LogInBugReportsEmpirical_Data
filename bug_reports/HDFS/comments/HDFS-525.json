[Additionally the following code masks any exceptions issues in {{ListPathsServlet.doGet()}} try block if in finally block {{doc.endDocument()}} encounters exception., We found this when our hftp access to the namenode started consistently failing.

dfsclient kept on showing
{noformat}
Server returned HTTP response code: 500 for URL:http://...
{noformat}

Namenode log showing 
{noformat}
2009-08-03 22:20:54,411 WARN /: /listPaths/user?ugi=knoguchi,users:
java.lang.IllegalStateException: getState() == BEFORE_XML_DECLARATION
        at org.znerd.xmlenc.XMLOutputter.endDocument(Unknown Source)
        at org.apache.hadoop.dfs.ListPathsServlet.doGet(ListPathsServlet.java:163)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:427)
        at org.mortbay.jetty.servlet.WebApplicationHandler.dispatch(WebApplicationHandler.java:475)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:567)
        at org.mortbay.http.HttpContext.handle(HttpContext.java:1565)
        at org.mortbay.jetty.servlet.WebApplicationContext.handle(WebApplicationContext.java:635)
        at org.mortbay.http.HttpContext.handle(HttpContext.java:1517)
        at org.mortbay.http.HttpServer.service(HttpServer.java:954)
        at org.mortbay.http.HttpConnection.service(HttpConnection.java:814)
        at org.mortbay.http.HttpConnection.handleNext(HttpConnection.java:981)
        at org.mortbay.http.HttpConnection.handle(HttpConnection.java:831)
        at org.mortbay.http.SocketListener.handleConnection(SocketListener.java:244)
        at org.mortbay.util.ThreadedServer.handle(ThreadedServer.java:357)
        at org.mortbay.util.ThreadPool$PoolThread.run(ThreadPool.java:534)
{noformat}

The very first error message on the log was different which led to this Jira.
{noformat}
2009-07-30 03:04:41,582 WARN /:
/listPaths/____?ugi=____,users: 
java.lang.ArrayIndexOutOfBoundsException: 15
        at sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate(BaseCalendar.java:436)
        at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:2081)
        at java.util.GregorianCalendar.computeFields(GregorianCalendar.java:1996)
        at java.util.Calendar.setTimeInMillis(Calendar.java:1109)
        at java.util.Calendar.setTime(Calendar.java:1075)
        at java.text.SimpleDateFormat.format(SimpleDateFormat.java:876)
        at java.text.SimpleDateFormat.format(SimpleDateFormat.java:869)
        at java.text.DateFormat.format(DateFormat.java:316)
        at org.apache.hadoop.dfs.ListPathsServlet.writeInfo(ListPathsServlet.java:59)
        at org.apache.hadoop.dfs.ListPathsServlet.doGet(ListPathsServlet.java:154)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:689)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
        at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:427)
        at org.mortbay.jetty.servlet.WebApplicationHandler.dispatch(WebApplicationHandler.java:475)
        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:567)
        at org.mortbay.http.HttpContext.handle(HttpContext.java:1565)
        at org.mortbay.jetty.servlet.WebApplicationContext.handle(WebApplicationContext.java:635)
        at org.mortbay.http.HttpContext.handle(HttpContext.java:1517)
        at org.mortbay.http.HttpServer.service(HttpServer.java:954)
        at org.mortbay.http.HttpConnection.service(HttpConnection.java:814)
        at org.mortbay.http.HttpConnection.handleNext(HttpConnection.java:981)
        at org.mortbay.http.HttpConnection.handle(HttpConnection.java:831)
        at org.mortbay.http.SocketListener.handleConnection(SocketListener.java:244)
        at org.mortbay.util.ThreadedServer.handle(ThreadedServer.java:357)
        at org.mortbay.util.ThreadPool$PoolThread.run(ThreadPool.java:534)
{noformat}, Some bugs talking about the issues related to calling unsynchronized SimpleDateFormat heavily: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6295722

We did see this exception after which the ListPathServlet stopped working.
, Patch uploaded to address the following multi threading issues:
# {{SimpleDateFormat.format()}} throws an exception ArrayIndexOfBounds on multiple threaded access.
# {{SimpleDateFormat.parse()}} throws parse exception or returns invalid parsed date

Both these issues are addressed by using a ThreadLocal variable. The attached unit tests first duplicate this issue for the SimpleDateFormat. It then ensures that the ThreadLocal implemenation does not have this issue.

Additionally, an exception in any of the followings lines in {{ListPathsServlet.doGet()}} is masked.
{noformat}
      final Map<String, String> root = buildRoot(request, doc);
      final String path = root.get("path");
      final boolean recur = "yes".equals(root.get("recursive"));
      final Pattern filter = Pattern.compile(root.get("filter"));
      final Pattern exclude = Pattern.compile(root.get("exclude"));
      ClientProtocol nnproxy = createNameNodeProxy(ugi);
{noformat}

The doc.endDocument in finally block encounters an exception and masks previous exception. This patch catches and prints the exception before proceeding to finally block.
, I will open another jira to move the the thread safe implementation of SimpleDateFormat to util package. This jira will also review the non thread safe static SimpleDateFormat usage in HDFS and map/reduce code., Suresh, should we re-throw the exception after catching the exception and logging it?, Koji, thanks for the comments. I have modified the code to throw the exceptions caught (there is not need to catch it). Also {{doc.endDocument()}} call is moved to try block. This prevents it masking an earlier exception., > I will open another jira to move the the thread safe implementation of SimpleDateFormat to util package.
Why not put the new class in org.apache.hadoop.hdfs.server.common.Util in this issue?

Public API need javadoc, otherwise, QA probably will -1., New patch that incorporates comments from Nicholas. I have moved the ThreadLocalDateFormat class to oah.server.common package., +1 patch looks good.

Some thoughts:
I appreciate the effort of adding a nice test, which is something we have to do in order to pass the QA requirement.  But (1) concurrent accessing a non-thread-safe class is an obvious bug, (2) using a ThreadLocal variable is a standard solution and (3) a unit test may take seconds (up to 30 seconds in the test provided by the patch).  I am not sure whether it is worthwhile to have a new unit test in this case., I think it is good to have the unit test.  It does not have to be included in the 10 minutes test if we are concerned about the time.  

I do agree that we do not need the negative test case. , It is important to have unit test to ensure correct functionality. The only reason why I left the negative test case is to justify 30 seconds wait time for which we run multi threaded access. The first negative test that proves there is a threading issue fails in under a second. This should not add to the time of the test.

BTW as Gary indicated, my intention was not to include this in under 10 minute tests., After discussing with Gary, got rid of negative test for SimpleDateFormat and only retaining the test for ThreadLocalDateFormat., +1 QA, New patch passed all the unit tests with an additional patch from HDFS-534, except the test {{TestHDFSTrash}}. Here is the test-patch result:

     [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings., I have committed this.  Thanks, Suresh!, Attaching equivalent patch for release 20. The new patch has changed tests from Junit 4 compliance to Junit 3 (for older release)., Reopen for committing this to 0.20., I have also committed this to 0.20.1., Integrated in Hadoop-Hdfs-trunk #47 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk/47/])
    , Sorry to be late to this issue, but a wrapper class for a ThreadLocal wrapping the format is a really odd pattern. What is the virtue of this approach? Why wouldn't one simply create ThreadLocal protecting the format in contexts where multiple threads may access it?, I am not sure what you mean by odd pattern. The advantage clearly is to be able to replace the existing SimpleDateFormat with ThreadLocalDateFormat, without having to add all the code related to making a thread local SimpleDateFormat in every place., ThreadLocalDateFormat and SimpleDateFormat are not related types. It's an odd pattern because the ThreadLocalDateFormat serves no purpose; it's a wrapper for a wrapper. As in the attached patch, there aren't many places where changes are required., If we feel this wrapper class is not generic enough, we could go with the new patch. +1., > If we feel this wrapper class is not generic enough, we could go with the new patch. +1. 
How about we do it in a new issue?, On a second thought, it is better to revert the patch since it was committed to both 0.20 and trunk., I reverted the current, checked-in version, (same patch w/ \-\-no-prefix)
{noformat}
     [exec] -1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     -1 tests included.  The patch doesn't appear to include any new or modified tests.
     [exec]                         Please justify why no new tests are needed for this patch.
     [exec]                         Also please list what manual steps were performed to verify this patch.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{noformat}
TestDistributedFileSystem (uses HftpFileSystem) passed, Patch for 0.20.1, I committed this, One of the other thing previous patch fixed was to move {{doc.endDocument()}} to the end of try block. This is to ensure we do not override the exception previously caused by an exception in {{doc.endDocument()}}, if {{doc.startTag()}} has not been called. That change needs to be added back to help debug the problem where servlet returns 500 response code., Integrated in Hadoop-Hdfs-trunk-Commit #5 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk-Commit/5/])
    , Integrated the change; sorry I missed it., Integrated in Hadoop-Hdfs-trunk-Commit #7 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk-Commit/7/])
    . Missed a change to the exception handling
, Integrated in Hadoop-Hdfs-trunk #65 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk/65/])
    . Missed a change to the exception handling
, Editorial pass over all release notes prior to publication of 0.21.]