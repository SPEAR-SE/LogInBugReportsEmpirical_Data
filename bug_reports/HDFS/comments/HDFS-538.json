[+1 to making the interfaces consistent. This difference is a good start; see other differences in HDFS-303.

FileSystemContractBaseTest is a set of tests for testing the general contract of FileSystem for different filesystem implementations. Currently only HDFS and S3 filsystems are being tested with it - it would be good to test all filesystems with it., Tom-
   I've actually run into an issue with this.  Patch is done, but when running it through unit tests, it fails {{TestHDFSFileSystemContract}}, which includes a test called {{testListStatusReturnsNullForNonExistentFile()}}, which was added back in HADOOP-930.  This test is evaluating an element of the contract that seems incorrect, particularly given the FileSystem API documention: "{{@return the statuses of the files/directories in the given patch}}," which does not mention returning null.  It would be much better in this situation to just return a zero-length array.  Otherwise, every call to listStatus has to include an extra null check, rather than just iterating over the array (which still succeeds with a zero-length array) or actually checking for zero files via the length of the array equaling zero.

   This is borne out by listStatus' use in HDFS codebase, where there is only one check for null; the others assume an array will be returned and could potentially NPE at some point.

   The rub is that the S3 FileSystem implementations do return nulls in this situation, so if we fix the contract, these will have an incompatible change introduced.  I'm not sure how wide-felt that would be, but it seems to me to be important to fix the semantics sooner than later.  The other option would be to change the API specification and continue with non-intuitive behavior, as well as changing HDFS to support it.  Thoughts?, How do we distinguish between an empty directory and a non-existent file (or directory)? In the current implementation, an empty directory returns an empty array, and a non-existent file returns null. I think we should keep this distinction and change the documentation of FileSystem, and the implementation of LocalFileSystem to conform.

bq. it seems to me to be important to fix the semantics sooner than later.

I agree. This should be made clear in the release notes., > How do we distinguish between an empty directory and a non-existent file (or directory)?

Good point. Shouldn't we be throwing FileNotFoundException as other methods? We do not throw right now, but it would makes listStatus consistent with other methods, imo., bq. How do we distinguish between an empty directory and a non-existent file (or directory)?
The similar method {{getFileStatus()}} returns a FileNotFoundException, which seems the most reasonable and expected behavior.

The API documentation is exceedingly poor for this method: what happens if the passed-in path is not a directory?, Whoops.  Looks like Konstantin and I were responding at the same time.  As a more general point, it seems quite preferable for methods not to return null, but either return the object they promised to or throw an exception., Kons says:
>Good point. Shouldn't we be throwing FileNotFoundException as other methods?
Agreed. it should throw the exception if file is not found, instead of returning a null.
, Since I've not heard any counter-lobbying about throwing FileNotFound, I've opened an issue to do this and am blocking this issue until it's resolved., Attaching patch, but can't make it patch available because it depends on a new Common jar from HADOOP-6201.  Check the notes there., (after applying HADOOP-6201 )
{noformat}
     [exec] +1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 3 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     +1 findbugs.  The patch does not introduce any new Findbugs warnings.
     [exec] 
     [exec]     +1 release audit.  The applied patch does not increase the total number of release audit warnings.
{noformat}, Also, unit tests were run locally and all pass, once an updated MapReduce jar is provided for run-hdfs-tests-with-mapreduce., +1

I committed this. Thanks, Jakob!, Adding correct release note., The jar dependence is hard to deal with after the project split.  This issue has updated all the jars except for hadoop-mapred-examples-0.21.0-dev.jar, which was changed by MAPREDUCE-874.  TestServiceLevelAuthorization is failing now.  I will update hadoop-mapred-examples-0.21.0-dev.jar in HDFS-568., Integrated in Hadoop-Hdfs-trunk #65 (See [http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk/65/])
    , Editorial pass over all release notes prior to publication of 0.21., @Todd - why the change in release note? The previous version better covered the change and provided a clue to clients at the change they need to make., Ah, I didn't know there was a prior release note - looking at the history, Rob seems to have deleted the old one on 10/09 without putting in a new one. The old release note also did not explain that listStatus now returns empty arrays for empty directories instead of null.]