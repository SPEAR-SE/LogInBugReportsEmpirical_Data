[Attaching a patch to escape paths in the audit log, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 17s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 14s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  7m 22s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  7m 13s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m 38s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 58s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 27s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 24s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 27s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 17s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 24s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  6m 55s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  6m 55s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  1m 39s{color} | {color:orange} root: The patch generated 2 new + 317 unchanged - 0 fixed = 319 total (was 317) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 59s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 27s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 26s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  7m 40s{color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 62m 49s{color} | {color:red} hadoop-hdfs in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 23s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}113m 28s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hdfs.server.blockmanagement.TestPendingInvalidateBlock |
|   | hadoop.hdfs.server.namenode.TestCacheDirectives |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Issue | HDFS-11048 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12835002/HDFS-11048.001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux ef4353183e2e 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / a1a0281 |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| checkstyle | https://builds.apache.org/job/PreCommit-HDFS-Build/17264/artifact/patchprocess/diff-checkstyle-root.txt |
| unit | https://builds.apache.org/job/PreCommit-HDFS-Build/17264/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/17264/testReport/ |
| modules | C: hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs U: . |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/17264/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, The 2 test failures are unrelated to this patch and do not fail locally for me. , Marking this as an incompatible change, as users who do comparisons of audit logs looking for entries pre- and post- will have mismatched data., +1 for the proposal.

{code}
1141	  public static boolean containsNonPrintableChar(String s1) {
1142	    Pattern regex = Pattern.compile("\\p{C}");
1143	    return regex.matcher(s1).find();
1144	  }
{code}
do we better pre-compile this?, bq. do we better pre-compile this?
Good catch, [~liuml07]. After talking offline with [~daryn], we figured it would be better to go ahead and do the full string replacement each time logging, since we're paying basically the same (if not more) penalty by doing the regex pattern matching. The initial patch was an attempt to avoid having to copy the entire string ever time we log. Attaching a new patch that does the string replacement upfront instead of doing the check first. If you have suggestions on a more efficient way of handling this, I welcome your feedback., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 14s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  8m  6s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 46s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 29s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 54s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 44s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 39s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 45s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 41s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 41s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 26s{color} | {color:orange} hadoop-hdfs-project/hadoop-hdfs: The patch generated 1 new + 232 unchanged - 0 fixed = 233 total (was 232) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 49s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m  9s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 47s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 36s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 68m 58s{color} | {color:red} hadoop-hdfs in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 19s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 88m 46s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hdfs.server.datanode.TestDataNodeUUID |
|   | hadoop.hdfs.server.datanode.TestDataNodeMultipleRegistrations |
|   | hadoop.hdfs.TestDecommission |
|   | hadoop.hdfs.server.namenode.ha.TestDFSUpgradeWithHA |
|   | hadoop.hdfs.server.datanode.TestDataNodeVolumeFailure |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Issue | HDFS-11048 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12835598/HDFS-11048.002.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 253568a45f68 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 0c837db |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| checkstyle | https://builds.apache.org/job/PreCommit-HDFS-Build/17325/artifact/patchprocess/diff-checkstyle-hadoop-hdfs-project_hadoop-hdfs.txt |
| unit | https://builds.apache.org/job/PreCommit-HDFS-Build/17325/artifact/patchprocess/patch-unit-hadoop-hdfs-project_hadoop-hdfs.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/17325/testReport/ |
| modules | C: hadoop-hdfs-project/hadoop-hdfs U: hadoop-hdfs-project/hadoop-hdfs |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/17325/console |
| Powered by | Apache Yetus 0.4.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, +1 Will commit this in 24 hours if no more comments. I'll take care of the trivial checkstyle warning when committing.

I think this will not get into {{branch-2}} (which is fine to me) as its incompatible change might break existing tools?, From a purist perspective, it's "incompatible".  The question IMHO for branch-2 is whether the scope and impact of the incompatibility is small enough and the whether the benefit outweighs the cost.  I think the answer to both is yes.  The reason for this patch is a user started creating files with newlines that broke/confused an internal log ingestion tool.  So some tools will "unbreak" while others that couldn't possibly have handled it right "might break".  If you think about, it might be hard to do, but w/o this patch you can forge audit entries., This makes sense to me. Just want to open the discussion sooner than later. Will commit to {{branch-2}} as well if no objections., IMHO, even though it's incompatible, it probably should go into a branch-2 minor (so 2.8.0, not 2.7.x) with the caveat that the release note needs to be _very explicit_ about what happens pre- and post- patch so that teams have an idea of what to expect.  e.g., "real world" examples, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #10723 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/10723/])
HDFS-11048. Audit Log should escape control characters. Contributed by (liuml07: rev 8a9388e5f6d622152798aaaa256064919e4fec37)
* (edit) hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
* (edit) hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestAuditLogs.java
, Committed to {{trunk}} through {{branch-2.8}} branches. Thanks for the contribution [~ebadger]. Thanks for the discussion [~aw] and [~daryn]., Thanks [~liuml07], [~aw], [~daryn]!, What happens if the filename has a backslash in it? , bq. What happens if the filename has a backslash in it?
The backslash will be escaped and printed as a single backslash. , So in the log it will be "\\" or "\"?, All backslashes in the input will be printed in the audit log as actual backslashes, because they will be escaped by StringEscapeUtils and replaced with double backslashes. So when they are actually printed, the double backslash will be escaped and you will see a single backslash. All control characters such as "\r" and "\n" will also be escaped and printed in their escaped form.

You can walk through the {{TestAuditLogs#testAuditCharacterEscape}} test in a debugger to see how the backslashes are escaped using {{StringEscapeUtils.escapeJavaStyleString()}}
, Oops, never actually answered your question. An input of "\" would be printed as "\" in the audit log., OK, that's what I thought.  We probably need to print that as a double backslash to avoid the ambiguity.  e.g., does '\thisfile' begin with a tab or does it begin with a backlash?, bq. e.g., does '\thisfile' begin with a tab or does it begin with a backlash?
'\thisfile' would begin with a backslash. 

I'm not sure I understand what you mean about the ambiguity. I can think of one pretty contrived case where I think this might cause less than ideal behavior. If you had a file that started with a tab followed by "hisfile", it would be printed as "\thisfile" in the audit log. However, if you had a file called "\thisfile" (where the \t are 2 separate ascii chars), it would also be printed in the audit log as "\thisfile". , bq.  I can think of one pretty contrived case where I think this might cause less than ideal behavior.

That's my point.  I'm looking at this from the point of view of what is in the log.   "\thisfile" is ambiguous.  That's super bad., What do you propose to fix that? Changing the single backslash to a double backslash just moves the problem instead of fixing it. Instead of 'tab + "hisfile"' being the same as '\thisfile', 'tab + "hisfile"' would be the same as '\\thisfile'., It's a pretty standard practice to escape the escape character.  But I can't help but think that instead of using backslash to escape if this patch wouldn't have been better off using URI escaping to match what happens elsewhere in Apache Hadoop., Using URI escaping wouldn't be great because it would make more paths look weird, while only giving benefit to this small use-case. I think the best solution would be to replace control characters with their escaped equivalents (e.g. tab becomes '\t', newline becomes '\n', etc.) and escape backslashes with a double backslash (e.g. '\' becomes '\\'). However, this would require creating a new library to do the escaping since we can't touch StringEscapeUtils. ]