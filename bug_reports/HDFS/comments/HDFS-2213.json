[Jetty is spinning waiting for its threads to exit; you can specify a timeout there (which I never knew before), and which it is probably worth doing. But it doesn't address the issue that some jetty thread isn't responding to interrupts -either its blocked or its swallowing interrupt exceptions, I'll add that this problem may well exist in production DataNodes too, as it is its shutdown code that is blocking. It's just surfacing in the minicluster as this terminates more datanodes in a test run, my question is what changed in trunk in the last couple of weeks that made this start happening with high frequency. I had never seen it before about a month ago, and now I see it most days., you changed your hardware?, nope., Looking at this a bit more, there are two threads in the jetty pool still live

One is waiting for input, most interestingly at AbstractConnector.java:707 the loop discards all interrupted exceptions, just repeats the loop checking to see if its been told to stop. the state variable it checks is volatile, but you'd have to see where the connector is actually stopped -as the thread pool doesn't do it. 

"728981380@qtp4-1 - Acceptor0 SelectChannelConnector@localhost.localdomain:45424" prio=10 tid=0x00007f18e8996000 nid=0x6b65 runnable [0x00007f18ecc92000]
   java.lang.Thread.State: RUNNABLE
	at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)
	at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:210)
	at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:65)
	at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:69)
	- locked <0x00000000f27d7908> (a sun.nio.ch.Util$2)
	- locked <0x00000000f27d78f8> (a java.util.Collections$UnmodifiableSet)
	- locked <0x00000000f27d7460> (a sun.nio.ch.EPollSelectorImpl)
	at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:80)
	at org.mortbay.io.nio.SelectorManager$SelectSet.doSelect(SelectorManager.java:429)
	at org.mortbay.io.nio.SelectorManager.doSelect(SelectorManager.java:185)
	at org.mortbay.jetty.nio.SelectChannelConnector.accept(SelectChannelConnector.java:124)
	at org.mortbay.jetty.AbstractConnector$Acceptor.run(AbstractConnector.java:707)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:522)


The other one is the pool manager itself; a thread that decides whether or not to add and remove threads. 

"115556431@qtp4-0" prio=10 tid=0x00007f18e8542000 nid=0x6b64 in Object.wait() [0x00007f18ece94000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	- waiting on <0x00000000f27d69d8> (a org.mortbay.thread.QueuedThreadPool$PoolThread)
	at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:565)
	- locked <0x00000000f27d69d8> (a org.mortbay.thread.QueuedThreadPool$PoolThread)

Again, interrupts cause it to check its running state, but don't stop the thread itself.

At a guess then, I'd say that jetty isn't being shut down properly, with all its lifecycle bits not being stopped first. I've not seen this before in my own code, yea, I dug around in the Jetty source and came much to the same conclusion. I'll see if I can track down Greg, closing as stale]