[The attached patch checks max path component length and max children during renames.  I reworked {{TestFsLimits}} quite a bit to do real file system operations instead of directly accessing private {{FSDirectory}} methods.  That helped me write the new rename tests, and it also ends up covering more of the real {{FSDirectory}} code., Sorry, accidentally resolved this., I'm attaching patch v2 with one more small change.  I added {{PathComponentTooLongException}} and {{MaxDirectoryItemsExceededException}} to the terse exceptions list.  These are ultimately caused by bad client requests, so there isn't any value in writing the full stack trace to the NameNode logs., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12634573/HDFS-6099.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.balancer.TestBalancer

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6400//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6400//console

This message is automatically generated., The failure in {{TestBalancer}} is unrelated., - For rename in the same dir, is it possible to get over limit?  It particular, I think the following is never true.  Otherwise, it already exceeds the limit before rename.
{code}
//FSDirectory.verifyMaxDirItems
(isRenameInSameDir && count > maxDirItems)) 
{code}
- It is better to verifyFsLimitsForRename before verifyQuotaForRename since it is cheaper.
- The patch actually does not apply anymore.  Need to update it., Thanks, [~szetszwo].  I'm attaching patch v3, which rebases to current trunk and moves the limit check ahead of the quota check.

bq. For rename in the same dir, is it possible to get over limit?

This comes into play when there is an existing directory in fsimage or edits that is already in violation of the new setting for {{dfs.namenode.fs-limits.max-directory-items}}.  For example, run NN for a while with a limit of 20, create a directory containing 20 children, and then change the limit to 10 and restart.  The {{isRenameInSameDir}} logic is required to catch this case.

Otherwise, you're correct.  Under normal operation, this can never happen, because it would have been caught at file creation time in {{FSDirectory#addChild}}.

I added a comment to clarify this., I still think that rename in the same dir should not throw exception since the rename does not increase the usage.  Just like that we should allow setPermission if there is already some violation in the fs limits.

For quota, I believe it allows rename under the same directory even if the quota is already violated., Nicholas, please disregard my prior explanation of {{isRenameInSameDir}}.  I confused myself.  :-)

The real reason for {{isRenameInSameDir}} was that the current count determined by calling {{INodeDirectory#getChildrenList}} still includes the rename source at this point in the code.  For example, considering a directory with 10 children, and the limit is 10, all renames within that same directory would fail, because {{INodeDirectory#getChildrenList}} would return 10.  This was exposed by one of the new tests: {{TestFsLimits#testMaxDirItemsRename}}.

I added {{isRenameInSameDir}} to catch this case and relax the conditional to allow renames in the same directory.

bq. For quota, I believe it allows rename under the same directory even if the quota is already violated.

In that case, let's be consistent with the quota check.  Here is patch v4.  This now checks {{isRenameInSameDir}} to always allow the rename., One minor comment:
- if isRenameInSameDir, let's don't call verifyMaxDirItems in verifyFsLimitsForRename.  Then, we don't need to add the parameter isRenameInSameDir to verifyMaxDirItems.

+1 other than that., Here is patch v5 to incorporate the last suggestion.  Thank you for the review, Nicholas.  I'll wait for a Jenkins run on this version and then commit it., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12635396/HDFS-6099.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6427//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6427//console

This message is automatically generated., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12635410/HDFS-6099.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6430//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6430//console

This message is automatically generated., +1 HDFS-6099.5.patch looks good., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12635429/HDFS-6099.5.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6431//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6431//console

This message is automatically generated., SUCCESS: Integrated in Hadoop-trunk-Commit #5357 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5357/])
HDFS-6099. HDFS file system limits not enforced on renames. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1579122)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsLimits.java
, I committed this to trunk, branch-2 and branch-2.4., FAILURE: Integrated in Hadoop-Yarn-trunk #514 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/514/])
HDFS-6099. HDFS file system limits not enforced on renames. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1579122)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsLimits.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1706 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1706/])
HDFS-6099. HDFS file system limits not enforced on renames. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1579122)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsLimits.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1731 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1731/])
HDFS-6099. HDFS file system limits not enforced on renames. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1579122)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFsLimits.java
]