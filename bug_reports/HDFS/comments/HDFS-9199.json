[Thanks for reporting this. I agree that we need to make the replication config keys' name consistent.

I see
{code}
  public static final String  DFS_REPLICATION_MAX_KEY = "dfs.replication.max";
  public static final int     DFS_REPLICATION_MAX_DEFAULT = 512;
{code}

and
{code}
  public static final String  DFS_NAMENODE_REPLICATION_CONSIDERLOAD_KEY = "dfs.namenode.replication.considerLoad";
  public static final boolean DFS_NAMENODE_REPLICATION_CONSIDERLOAD_DEFAULT = true;
  public static final String  DFS_NAMENODE_REPLICATION_INTERVAL_KEY = "dfs.namenode.replication.interval";
  public static final int     DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT = 3;
  public static final String  DFS_NAMENODE_REPLICATION_MIN_KEY = "dfs.namenode.replication.min";
  public static final int     DFS_NAMENODE_REPLICATION_MIN_DEFAULT = 1;
{code}

Do we need to consider all of them as well? Which clause of renaming is preferred?

I think these keys are all used in namenode., # The name {{dfs.namenode.replication.min}} was chosen deliberately. {{dfs.namenode.replication.min}} was designed to replace the {{dfs.replication.min}} config key in {{HdfsConfiguration.java}}
{code}
118      new DeprecationDelta("dfs.replication.min",
119        DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY),
{code}
For this reason, the {{dfs.namenode.replication.min}} is preferred to {{dfs.replication.min}}.
# Though both of the {{dfs.namenode.replication.min}} and {{dfs.replication.max}} are for replication numbers threshold, they are used in different scenarios. {{dfs.replication.max}} is like a general purpose whole-system maximum replication hard limit, while the {{dfs.namenode.replication.min}} is to check how many minimum copies are needed, or else write is disallowed. The latter is valid only in namenode scope so the _namenode_ prefix is just fine.

For those two reasons, I think we don't need to rename {{dfs.namenode.replication.min}} to {{dfs.replication.min}}., I'll close this if no more input in 3 days.Thanks.]