[This may be unrelated.

# Can try the configuration with 1 oe 2 and does the SNN startup?
# If it does startup and fails only with 6 dirs, can you post the relevant config to the jira?, Configured "dfs.namenode.checkpoint.dir" and "dfs.namenode.checkpoint.edits.dir" to more than 6 comma seperated directories with 5-6 levels in each directory SNN gets shutdown without throwing any exception.

 dfs.namenode.checkpoint.dir=  
 "/home/hadoop/hadoop-root/check/dfs/dir1,/home/hadoop/hadooproot/check/dfs/dir2,/home/hadoop/hadoop-root/check/dfs/dir3,/home/hadoop/hadoop-root/check/dfs/dir4,/home/hadoop/hadoop-root/check/dfs/dir5,/home/hadoop/hadoop-root/check/dfs/dir6,/home/hadoop/hadoop-root/check/dfs/dir7"

SNN gets shutdown without throwing any exception.But when configured to less than or equal to 6 comma seperated values with 5-6 levels in each directory SNN start up is fine .

The same behavior is observed with dfs.name.dir.But it throws the following exceptions and NN start up fails.
NN logs
=======
{noformat}
java.lang.IllegalStateException: Variable substitution depth too large: 20 ${hadoop.tmp.dir}/dfs/name1,${hadoop.tmp.dir}/dfs/name2,${hadoop.tmp.dir}/dfs/name3,${hadoop.tmp.dir}/dfs/name4,${hadoop.tmp.dir}/dfs/name5,${hadoop.tmp.dir}/dfs/name6,${hadoop.tmp.dir}/dfs/name7 {noformat}, @Andreina, for SNN you did not refer ${hadoop.tmp.dir}, so variable substitution is not required.
Did you configure without this variable substitution like in SNN and try? same behaviour in NN?

@Suresh, Let me check the env....I will take a look at this., @Uma, for the configurations "dfs.name.dir","dfs.namenode.checkpoint.dir" and "dfs.namenode.checkpoint.edits.dir"
Without variable substitution when i configure values with 5-6 levels for each directories Namenode and secondary Namenode is started successfully.

But when i give a variable substitutions for the values configured,  Namenode gets shutdown by throwing the IllegalStateException : "Variable substitution depth too large"  and Secondary Namenode does not throw any exception but gets shutdown, Hi Andreina, Thanks for the verification.

By seeing at your configurations you have two more level of variable substitutions.

============================================================
<name>hadoop.tmp.dir</name>
<value>${hadoop.home.dir}/hadoop-${user.name}</value>

============================================================

java.lang.IllegalStateException: Variable substitution depth too large: 20 ${hadoop.tmp.dir}/dfs/name1,${hadoop.tmp.dir}/dfs/name2,${hadoop.tmp.dir}/dfs/name3,${hadoop.tmp.dir}/dfs/name4,${hadoop.tmp.dir}/dfs/name5,${hadoop.tmp.dir}/dfs/name6,${hadoop.tmp.dir}/dfs/name7 

When Configuration is trying to replace the variable substitutions, It need to take total 21 (7 * 3) from your configurations.

We will support only upto 20 veriable substitutions. 

Ok, Let's wee why SNN did not gave any information while shuttingdown.


, typo: Let's wee why SNN did not gave any information while shuttingdown ->Let's see why SNN did not gave any information while shuttingdown, The reson why SecondaryNN did not log is, it is just handling IOException and logging the trace.
Here in this case, it will throw IllegalStateException, it will just comeout from main immediately. You might have seen that in colsole logs.

I think simple change is for getting log would be that, handle Throwable instead of IOE., Making the 2NN log this correctly would be a good fix.

I think another good fix to make here would be to fix the variable substitution code to actually count _depth_ of variable substitutions instead of just the _count_ of variable substitutions. I'm under the impression that the MAX_SUBST is intended to prevent 20 recursive substitutions of a single config variable, and didn't consider the case when multiple replacements might all happen in a single value of a config var., {code}
I think another good fix to make here would be to fix the variable substitution code to actually count depth of variable substitutions instead of just the count of variable substitutions. I'm under the impression that the MAX_SUBST is intended to prevent 20 recursive substitutions of a single config variable, and didn't consider the case when multiple replacements might all happen in a single value of a config var.
{code}
I too agree with you. The current code checks only total variable replacements it performed. Instead of that, each variable replacement itself should check recursively up to MAX_SUBST I feel. ]