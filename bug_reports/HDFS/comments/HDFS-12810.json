[As part of HDFS-12775, we have been trying to extend the Namenode's Web UI to display capacity information for the {{PROVIDED}} storage type. When the {{capacityRemaining}} for {{PROVIDED}} StorageType is 0, the Namenode's Web UI displays an empty string ("()") instead of "0 (0%)" ([screenshot|https://issues.apache.org/jira/secure/attachment/12897372/provided_storagetype_capacity.png]). The JMX does return the correct value i.e., 0 ([screenshot|https://issues.apache.org/jira/secure/attachment/12897399/provided_storagetype_capacity_jmx.png]). This should be displayed "0 (0%)" and not as an empty string. This isn't related to the {{PROVIDED}} storage type but is an issue with the Web UI (happens for the DISK StorageType as well when {{capacityRemaining}} is set to 0 in {{dfshealth.js}}). , Thanks for reporting the issue, [~virajith].

When {{capacityRemaining}} (or {{capacityUsed}}) is 0, it is not being passed to the helper functions {{fmt_byte}} and {{fmt_percentage}} (in _dfs-dust.js_). I'm not sure why this is happening. 

As a workaround, if capacityRemaining (or capacityUsed) is 0, we assign it a negative value -1. This will be converted back to 0 by the helper functions _fmt_byte_ and _fmt_percentage_., Thanks [~hanishakoneru], it must be some issue with dust.js then.
It's not the cleanest solution but I don't see a better way.

Not sure about the negative cases though.
Internally, we allow negative capacities (we have data evacuation, etc).
Could we make this just for the 0 value case?
In addition, could we try to wrap this check into a function and add a comment on what the issue is?, Thanks for posting a fix [~hanishakoneru]. While this fix solves this particular case, is there a reason why the value of 0 "gets lost" from {{dfshealth.js}} to {{dfshealth.html}} ({{b.capacityRemaining}} has a value of 0 in {{dfshealth.js}} but {{value.capacityRemaining}} doesn't retain this value in {{dfshealth.html}}) ? I suspect this might be something to do with the call to {{render()}} in {{dfshealth.js}}.]