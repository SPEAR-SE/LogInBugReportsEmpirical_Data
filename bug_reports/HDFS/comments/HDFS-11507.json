[I noticed the comments below in the NetworkTopology#chooseRandom method.
{code}
// We've counted numOfAvailableNodes inside the lock, so there must be
// at least 1 satisfying node. Keep trying until we found it.
{code}
But I'm inclined to believe that the locking in {{countNumOfAvailableNodes(scope, excludedNodes);}} is not going to do the work for the issue in this JIRA, because it appears to me that that lock is to guarantee that there is no node add/removal when doing the counting, but since there is no global locking in {{chooseRandom}} function itself, nodes can still added/removed during {{chooseRandom}}, after {{countNumOfAvailableNodes}} has returned.

Since these comments were added in HDFS-10320, [~mingma] do you have comments?, I found that there is global locking *before and after entering* {{chooseRandom}} call. In which case {{chooseRandom}} is already synchronized with node add/remove. I was confused by acquiring the lock again in {{countNumOfAvailableNodes}} and thought this is the first time the lock is acquired. Now this race condition does not exist. Close this JIRA as not a problem.]