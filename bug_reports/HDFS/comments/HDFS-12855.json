[The latest trunk code is also similar to 2.7.x line. {{NamenodeFsck.blockIdCK()}} works on BlockManager and FSNameSystem layer directly without holding NameSystem locks. One race I can think of is fsck with block id option running in parallel with a file deletion which contains the same block. Since the BlockInfo is obtained without holding a lock, the file could get deleted and later the INode retrieval could return null and could face NPE when accessing INode members. Haven't proved this with a test yet though.  

{noformat}
  public void blockIdCK(String blockId) {
    ...
    try {
      //get blockInfo
      Block block = new Block(Block.getBlockId(blockId));
      //find which file this block belongs to
      BlockInfo blockInfo = blockManager.getStoredBlock(block);
      if(blockInfo == null) {
        out.println("Block "+ blockId +" " + NONEXISTENT_STATUS);
        LOG.warn("Block "+ blockId + " " + NONEXISTENT_STATUS);
        return;
      }
      final INodeFile iNode = namenode.getNamesystem().getBlockCollection(blockInfo);
      NumberReplicas numberReplicas= blockManager.countNodes(blockInfo);
      out.println("Block Id: " + blockId);
      out.println("Block belongs to: "+iNode.getFullPathName());
      out.println("No. of Expected Replica: " +
          blockManager.getExpectedRedundancyNum(blockInfo));
{noformat}, Yes I believe it affects all versions. Delete is clearly one case. But any change in file path (move or rename) will cause problems as well. See HDFS-12832 as an example., Thanks for creating the jira and discussions folks. Makes sense to me.

I recall [~daryn] mentioned Yahoo runs fsck on / daily on their clusters - impressive but surprising if this has never been ran into... Daryn, is there an existing patch to take care of this? Could you please share to benefit us all if so :), That's completely broken.  This code path isn't for a full fsck, it's for a specific block which isn't a common operation unless debugging.  We haven't hit it, no patch, sorry.]