[GitHub user gzsombor opened a pull request:

    https://github.com/apache/hadoop/pull/225

    HDFS-11924 : Pass FsAction to the external AccessControlEnforcer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzsombor/hadoop branch-2.8

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/hadoop/pull/225.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #225
    
----
commit 35569bf7f5458302e72ea4981bfaadf5bd8e5ab3
Author: Zsombor Gegesy <gzsombor@gmail.com>
Date:   2017-06-04T11:26:12Z

    HDFS-11924 : Pass FsAction to the external AccessControlEnforcer
    
    Change-Id: Ie31a4f20c2807557b9d05d8e2cd4523395144c9d

----
, GitHub user gzsombor opened a pull request:

    https://github.com/apache/hadoop/pull/226

    HDFS-11924 : Pass FsAction to the external AccessControlEnforcer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzsombor/hadoop trunk

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/hadoop/pull/226.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #226
    
----
commit 5c15ca3a4695cfad2514e7fee5c058340cfcab18
Author: Zsombor Gegesy <gzsombor@gmail.com>
Date:   2017-06-04T11:26:12Z

    HDFS-11924 : Pass FsAction to the external AccessControlEnforcer
    
    Change-Id: Ie31a4f20c2807557b9d05d8e2cd4523395144c9d

----
, On cursory review this does not appear correct.  Traversal is supposed to verify execute perms on the ancestor directories, except recursive creation ops should check the last ancestor as a parent.  Adding read/write to the traversal based on the overall action violates those semantics.  I'll look into the regression but it likely affects only the recursive ops., I see, but unfortunately the call stack ends up with the following calls:
{code}
	FSPermissionChecker.checkPermission(INodesInPath, boolean, FsAction, FsAction, FsAction, FsAction, boolean) line: 188	
	FSPermissionChecker.checkTraverse(FSPermissionChecker, INodesInPath, boolean) line: 499	
	FSDirectory.checkTraverse(FSPermissionChecker, INodesInPath, boolean) line: 1603	
	FSDirectory.checkTraverse(FSPermissionChecker, INodesInPath, FSDirectory$DirOp) line: 1621	
	FSDirectory.resolvePath(FSPermissionChecker, String, FSDirectory$DirOp) line: 542	
	FSDirAppendOp.appendFile(FSNamesystem, String, FSPermissionChecker, String, String, boolean, boolean) line: 91	
	FSNamesystem.appendFile(String, String, String, EnumSet<CreateFlag>, boolean) line: 2427	
	NameNodeRpcServer.append(String, String, EnumSetWritable<CreateFlag>) line: 758	
{code}

So you suggesting, that FSDirAppendOp.appendFile should call a different method to determine, if that file can be written, or not?

, I checked pre-2.8 and traversal also only checked for exec perms.  Maybe the confusion in part stems from {{FSDirectory#resolvePath}} now performs the mandatory traversal check to ensure the path is accessible to the user.  The operation may perform additional permission checks after resolution.  Append does a {{fsd.checkPathAccess(pc, iip, FsAction.WRITE)}}.

The semantics seem correct, so what exactly is the issue?  Are you you sure this isn't a bug with the impl of an external access controller?
, Please leave the fix-version field alone for a committer to set it at commit time. Updating it myself for now., You are right, the problem is that Ranger doesn't implement properly the traversal checks, which is enough to work with hadoop 2.7.3. Hopefully, after [RANGER-1707|https://issues.apache.org/jira/browse/RANGER-1707] is merged, it will become a compliant service]