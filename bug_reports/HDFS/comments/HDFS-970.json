[Relevant LKML thread:
http://lkml.indiana.edu/hypermail/linux/kernel/0903.3/01327.html
{quote}
Note that the rename for atomic commits trick originated in mail severs
which always did the proper fsync. When the word spread into the
desktop world it looks like this wisdom got lost.
{quote}, This is a good thing to do. This could increase the namenode restart times, but would prevent corruption of fsimage. Ya!, Trivial patch to add fsyncs to the image saving, fstime writing, and TransferFsImage code. There are no tests included, since the only way to test this is to pull a power plug :)

There is probably some negative performance impact, depending on size of files, dirty page limits, available RAM, etc, but I think the safety factor is well worth it!, +1 code looks good. we should get this into 0.21 as well., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12444191/hdfs-970.txt
  against trunk revision 942863.

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hdfs-Patch-h5.grid.sp2.yahoo.net/353/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hdfs-Patch-h5.grid.sp2.yahoo.net/353/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hdfs-Patch-h5.grid.sp2.yahoo.net/353/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hdfs-Patch-h5.grid.sp2.yahoo.net/353/console

This message is automatically generated., To prove that this is indeed absolutely necessary, I performed the following test on my desktop (2.6.31):

1) Create a loop device with 1G storage
{code}# dd if=/dev/zero of=myloop bs=1M count=1000
# losetup -f myloop{code}
2) Make a "faulty" type md array:
{code}# mdadm --create /dev/md0 --level=faulty --raid-devices=1  /dev/loop1{code}
3) format it as ext4
{code}# mkfs.ext4 /dev/md0{code}
4) mount it in /mnt
{code}# mount -t ext4 /dev/md0 /mnt{code}
5) run the following python script:
{code}
#!/usr/bin/env python
import os

for idx in xrange(1, 100000):
  f = file("file_%d_ckpt" % idx, "w")
  for line in xrange(0, 1000000):
    print >>f, "hello world! this is line %d " % line
  f.close()
  os.rename("file_%d_ckpt" % idx, "file_%d" % idx)
  print "Saved file %d" % idx
{code}

6) While running, block all writes to the disk (this essentially freezes the disk as if a power outage occurred):
{code}# mdadm --grow /dev/md0 -l faulty -p write-all{code}
Script output:
{code}
Saved file 1
Saved file 2
Saved file 3
Saved file 4
Saved file 5
Traceback (most recent call last):
  File "/home/todd/disk-fault/test.py", line 7, in <module>
    print >>f, "hello world! this is line %d " % line
IOError: [Errno 30] Read-only file system
{code}
[ext4 automatically remounts itself readonly]
7) umount /mnt, clear the fault with -p clear, remount /mnt
8) results of ls -l:
{code}
root@todd-desktop:/mnt# ls -l
total 16
-rw-r--r-- 1 root root     0 2010-05-13 23:11 file_1
-rw-r--r-- 1 root root     0 2010-05-13 23:11 file_2
-rw-r--r-- 1 root root     0 2010-05-13 23:11 file_3_ckpt
drwx------ 2 root root 16384 2010-05-13 22:45 lost+found
{code}

I then modified the test script to add f.flush() and os.fsync(f.fileno()) right before the close(), and ran the exact same test. Results:
{code}
root@todd-desktop:/mnt# ~/disk-fault/test.py 
Saved file 1
Saved file 2
Traceback (most recent call last):
  File "/home/todd/disk-fault/test.py", line 9, in <module>
    os.fsync(f.fileno())

[umount, clear fault, remount]

root@todd-desktop:/mnt# ls -l
total 66208
-rw-r--r-- 1 root root 33888890 2010-05-13 23:20 file_1
-rw-r--r-- 1 root root 33888890 2010-05-13 23:20 file_2_ckpt
drwx------ 2 root root    16384 2010-05-13 22:45 lost+found
{code}

I tried the same test on ext3, and without the fsync the files entirely disappeared. The same was true of xfs. Adding the fsync before close fixed the issue in all cases.
, I just committed this, thanks Todd.]