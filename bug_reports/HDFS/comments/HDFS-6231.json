[I found this problem from observing runs of {{TestPread}} that were hanging.  It turns out that on most fast machines, {{TestPread}} doesn't actually end up triggering a hedged read.  The initial read completes before the hedged read threshold, so we don't bother.  On one of my slower VMs, I was seeing the test hang.  I was then able to repro even on my fast machines by aggressively down-tuning the hedged read threshold.

Here is a patch to fix the bug.
# {{DFSInputStream#getFromOneDataNode}}: This was the main problem.  The returned {{Callable}} needs to release a {{CountDownLatch}}, but it wasn't doing it in the failure case.  It was only doing it in the success case.  I changed it to release the latch inside a finally clause.
# {{DFSInputStream#hedgedFetchBlockByteRange}}: After I applied the first change, it exposed another problem here.  If all datanodes die, then we need to refetch block locations from the datanode.  That wasn't happening, because this code used the condition {{futures == null}} to decide whether or not to refetch block locations via a call to {{chooseDataNode}}.  After a hedged read has been issued, {{futures}} is always non-null, so this wasn't sufficient.  I changed the code to check for empty {{futures}}.  The reason this works is that {{getFirstToComplete}} removes failed futures from the list.  This means that if all datanodes die, then {{futures}} drops back to an empty list, and then we go into {{chooseDataNode}} to refetch block locations.
# In {{TestPread}}, I downtuned the hedged read threshold a lot so that this test really does issue hedged reads even on fast machines.  That ought to help us catch regressions in the future.  Now that hedged reads are really happening during the test runs, I found that I needed to reset the metrics counts in order to satisfy some assertions.  This is required because the metrics instance is static/global.

I've had multiple successful test runs of {{TestPread}} with this patch on both my fast Mac and my slow Windows VM., +1 on the patch.  Good catch! , {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639652/HDFS-6231.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/6648//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/6648//console

This message is automatically generated., SUCCESS: Integrated in Hadoop-trunk-Commit #5496 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5496/])
HDFS-6231. DFSClient hangs infinitely if using hedged reads and all eligible datanodes die. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1586551)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestPread.java
, Nicholas, thank you for the code review.  I have committed this to trunk, branch-2 and branch-2.4., +1

[~cnauroth] Thanks for the fix-up., SUCCESS: Integrated in Hadoop-Yarn-trunk #537 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/537/])
HDFS-6231. DFSClient hangs infinitely if using hedged reads and all eligible datanodes die. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1586551)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestPread.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1729 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1729/])
HDFS-6231. DFSClient hangs infinitely if using hedged reads and all eligible datanodes die. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1586551)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestPread.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1754 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1754/])
HDFS-6231. DFSClient hangs infinitely if using hedged reads and all eligible datanodes die. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1586551)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSInputStream.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestPread.java
]