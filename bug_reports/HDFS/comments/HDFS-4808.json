[I don't necessarily think these should be exposed to users via DistributedFileSystem (which is not indended as a public interface) but I do think they shouldn't be included in the intended-to-be-very-general FileSystem class. My preference would be to move them into a public, HDFS-specific interface like HdfsAdmin., bq. but I do think they shouldn't be included in the intended-to-be-very-general FileSystem class

Why cannot this be a general FileSystem functionality? I think this is general enough. Currently looking at the snapshot related methods added, I do not see any HDFS specific semantics.

FileSystem currently is both the user API and file system implementors API. I think file systems that can support snapshots can implement this feature and file systems that do not can throw unsupported exception., bq. Why cannot this be a general FileSystem functionality? I think this is general enough. Currently looking at the snapshot related methods added, I do not see any HDFS specific semantics.

Do you know of any existing or future FileSystem implementations (LocalFileSystem, S3FileSystem, etc.) which will support snapshots? If they do ever support snapshots, will they support sub-tree snapshots? (Sub-tree snapshots is not something I'm aware of any other file system supporting.)

From what I know of other file systems which support some form of snapshots (WAFL, ZFS, etc.), their semantics, conceptual nouns, etc. all differ so substantially from one another that I don't think it would be easy (possible?) to come up with a single general-purpose snapshot API to cover all of them. All other file systems I'm aware of which support snapshots provide their own file system-specific APIs for creating, deleting, managing their snapshots. This suggests to me that HDFS should expose a file system-specific API as well.

bq. FileSystem currently is both the user API and file system implementors API. I think file systems that can support snapshots can implement this feature and file systems that do not can throw unsupported exception.

If literally all other implementers of FileSystem will throw UnsupportedOperationException, what's the point of putting it in FileSystem at all?

How about this for a way forward: For now we move the snapshot create/delete APIs to an HDFS-specific class. If/when another FileSystem implementation shows up which supports a similar API to the HDFS snapshots API, we can move it to FileSystem at that point., bq. Do you know of any existing or future FileSystem implementations (LocalFileSystem, S3FileSystem, etc.) which will support snapshots? If they do ever support snapshots, will they support sub-tree snapshots? (Sub-tree snapshots is not something I'm aware of any other file system supporting.)

FileSystem as I said earlier is a both User API and file system implementors API. Owing it to being user API, a lot of methods that it currently has will run into the same argument. Are methods such as getDelegationToken, addDelegationToken, getFileBlockLocation, getBlockSize, getFileChecksum, checksum verification related methods, getServerDefaults, concat etc. generic?

Perhaps most file systems do snapshots differently. Some do it with a strong notion of volume level snapshots. They could chose to accordingly implement/tailor the methods in FileSystem.

bq. If literally all other implementers of FileSystem will throw UnsupportedOperationException, what's the point of putting it in FileSystem at all?
The reason is exactly why the other such methods exist. FileSystem is a user API using which applications access the file system. I intend to write enhancements (for example another version of distcp) using snapshot capabilities, especially around snapshot diffs. For this exposing it using FileSystem APIs is useful.

bq. How about this for a way forward: For now we move the snapshot create/delete APIs to an HDFS-specific class. If/when another FileSystem implementation shows up which supports a similar API to the HDFS snapshots API, we can move it to FileSystem at that point.
I am not sure I agree with this. See my arguments above. Our FileSystem interface, how much ever we pretend it to be generic is heavily influenced by HDFS. One thing that could help here is, some of the specification work and ideas [~stevel@apache.org] has about ability to query capabilities etc.]