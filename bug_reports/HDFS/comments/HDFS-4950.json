[here are two traces that demonstrate the problem.  The issue seems to be that after the fuse RELEASE operation, we never call GETATTR again when attribute caching is enabled.

One easy fix for this would be to disable attribute caching entirely.  This would certainly fix the bug, but it might result in lower performance.  As you can see from the "correct noattr" trace, many more GETATTR operations are done in this, all of which will hit the NameNode.

Can we live with the fuse attribute cache?  This raises the question of how we're "supposed" to invalidate the fuse_dfs attribute cache.  I wasn't able to find any documentation about this.  I can see that fuse is checking the attributes of the root directory after the release.

{code}
   unique: 18, success, outsize: 16
unique: 19, opcode: RELEASE (18), nodeid: 2, insize: 64, pid: 0
release[140595351837776] flags: 0x8001
   unique: 19, success, outsize: 16
unique: 20, opcode: GETATTR (3), nodeid: 1, insize: 56, pid: 6597
getattr /
   unique: 20, success, outsize: 120
{code}

Is it possible that FUSE expects something to change there if a new file has been added?, From the FUSE mailing list, it appears that you can invalidate the attribute cache using inode notify (but it may or may not be available from the high level API)]