[implements lazy fetch and thread, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12504914/HDFS-2589.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/1607//console

This message is automatically generated., I am not too sure about remoteIsInsecure check, because it will be set to true for any kind of exception.
The patch looks ok to me, otherwise., I 100% agree the error handling is less than ideal, but I don't believe I fundamentally changed the behavior.  The pre-existing code already assumed that any exception means the other side is insecure.  I only made it defer the fetching of the token., +1., Hi Daryn, 

It seems that it is better to change HftpFileSystem but not DelegationTokenRenewer.

In WebHdfsFileSystem, the lazy initialization is implemented in addRenewAction(..), which is the only method using DT_RENEWER.  It is more lazy -- we even don't have to create a DelegationTokenRenewer object if addRenewAction(..) is not invoked.
{code}
//WebHdfsFileSystem
  private static DelegationTokenRenewer<WebHdfsFileSystem> DT_RENEWER = null;

  private static synchronized void addRenewAction(final WebHdfsFileSystem webhdfs) {
    if (DT_RENEWER == null) {
      DT_RENEWER = new DelegationTokenRenewer<WebHdfsFileSystem>(WebHdfsFileSystem.class);
      DT_RENEWER.start();
    }

    DT_RENEWER.addRenewAction(webhdfs);
  }
{code}, Committed to 1.0.0 and branch-1 on the strength of Jitendra's +1.  Feel free to improve in 1.1.0., Closed upon release of version 1.0.0.]