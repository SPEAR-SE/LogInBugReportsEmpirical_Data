[Thanks [~arpitagarwal] for reporting this., The test was waiting for the same amount of time as the DiskCheckTimeout value before checking for callback. This created a possibility that the callback actually happens after the check. 
To avoid this,  we need to wait longer than the timeout before checking for callback.
Ran hundreds of iterations locally and they passed., Thanks for fixing this [~hanishakoneru].

Should we also update line 164 in {{testDiskCheckTimeoutInvokesOneCallbackOnly}}?, Also instead of a single call, you can probably use a loop like you have in the other two test cases.

Another suggestion is to make the timeouts less aggressive. We can set it them to e.g. 120 seconds instead of 1 or 2 seconds to reduce spurious timeouts when testing on overloaded VMs., [~arpitagarwal], thanks for the review.

bq. Also instead of a single call, you can probably use a loop like you have in the other two test cases.

The FutureCallBack used in this test is mock FutureCallBack object. So, we would not have the exit condition for loop. The other option is to not use a mock FutureCallBack. 

bq. Another suggestion is to make the timeouts less aggressive. We can set it them to e.g. 120 seconds instead of 1 or 2 seconds to reduce spurious timeouts when testing on overloaded VMs.
Would 120 seconds not be too long to test for timeouts. Since we make the dummy checkable wait for the timeout, could we not have shorter timeouts (like 2 seconds) and spurious timeouts would not have negative impact on the tests. 

What do you think?, [~arpitagarwal], thank you for the suggestions.
- Used mockito timeout feature to address the no loop exit condition for mock FuruteCallBack object.
- Set test timeouts to 300 seconds., +1 for the v2 patch, thanks [~hanishakoneru]. I have committed it to trunk.

We've seen tests with shorter timeouts (10-20 seconds) often fail on under-powered VMs, so it's okay to set the test case timeout a little conservatively even if we never expect the test to take that long in practice., Sorry I just realized after committing it that we didn't get a Jenkins run.

Since it's a unit-test only change, I am not reverting it to get a Jenkins run. I verified that the changed unit tests pass locally. , SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11573 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11573/])
HDFS-11630. TestThrottledAsyncCheckerTimeout fails intermittently in (arp: rev 62e4573efbef8c14757223a43bebaf360f029ada)
* (edit) hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/checker/TestDatasetVolumeCheckerTimeout.java
* (edit) hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/checker/TestThrottledAsyncCheckerTimeout.java
, Thank you [~arpitagarwal] for committing the patch., Thanks [~hanishakoneru]. I've committed the branch-2 patch., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11591 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11591/])
HDFS-11630. TestThrottledAsyncCheckerTimeout fails intermittently in (arp: rev 62e4573efbef8c14757223a43bebaf360f029ada)
* (edit) hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/checker/TestDatasetVolumeCheckerTimeout.java
* (edit) hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/checker/TestThrottledAsyncCheckerTimeout.java
]