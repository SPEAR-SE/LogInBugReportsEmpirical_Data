[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12563872/HDFS-4367.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3805//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3805//console

This message is automatically generated., +1, the patch looks good to me.

I don't think this should be considered an incompatible change since old clients will in fact never request a DataEncryptionKey when data encryption isn't enabled. i.e. a client will never request an encryption key from the NN in a scenario where it's possible for the NN to return a null response., bq. I don't think this should be considered an incompatible change since old clients will in fact never request a DataEncryptionKey when data encryption isn't enabled. i.e. a client will never request an encryption key from the NN in a scenario where it's possible for the NN to return a null response.

Aaron, sorry I may not have understood the comment or this feature well. I still think this is incompatible. Let me know if I understand this correctly.

This feature was introduced by HDFS-3637 in 2.0.2-alpha and works as follows:
# Server returns null if dfs.block.access.token.enable is false or dfs.encrypt.data.transfer is false
# Client methods that use DFSClient#getDataEncryptionKey() check server defaults and calls ClientProtocol#getDataEncryptionKey if dfs.encrypt.data.transfer is set true
#* These calls hit null pointer exception, if on the server, dfs.block.access.token.enable is false and dfs.encrypt.data.transfer is true. When we fix server, this hits protobuf exception on the client side.
, Hey Suresh, if I understand you correctly, you're saying that, assuming dfs.block.access.token.enable is set to false and dfs.encrypt.data.transfer is set to true:

# Before this change we'd end up with a null pointer exception on the server, since you can't set a "required" field to null.
# After this change we'd end up with a null pointer exception on the client, since null would now be returned but this isn't handled correctly by 2.0.2 client code.

If my understanding of your point is correct, then I would counter that having "dfs.block.access.token.enable" set to false and "dfs.encrypt.data.transfer" set to true is not a legitimate configuration. Clearly no existing (2.0.2) deployment could be running with such a configuration since HDFS reads/writes would not work. Given that, all existing deployments which are using this feature must have dfs.block.access.token.enable set to true if they have dfs.encrypt.data.transfer set to true. This would mean that, even after this change, all 2.0.2 clients could still communicate with 2.0.3 servers, and vice versa. Hence, this change should not be considered incompatible., Aaron, in the wire protocol response a field is becoming from required to optional. That is an incompatible change. It probably does not affect the correctly configured DFSClient users. However for folks who are directly planning to use protobuf or using protobuf, this is a change. I will add to the release note, this will not affect the DFSClient users., I committed the patch to trunk and branch-2. Thank you Aaron for the review., Aaron, can you please review HDFS-4364 as well., Also please, if you have time review HDFS-4369 as well., Integrated in Hadoop-trunk-Commit #3213 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3213/])
    HDFS-4367. GetDataEncryptionKeyResponseProto does not handle null response. Contributed by Suresh Srinivas. (Revision 1431459)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1431459
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/ClientNamenodeProtocol.proto
, Integrated in Hadoop-Yarn-trunk #93 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/93/])
    HDFS-4367. GetDataEncryptionKeyResponseProto does not handle null response. Contributed by Suresh Srinivas. (Revision 1431459)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1431459
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/ClientNamenodeProtocol.proto
, Integrated in Hadoop-Hdfs-trunk #1282 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1282/])
    HDFS-4367. GetDataEncryptionKeyResponseProto does not handle null response. Contributed by Suresh Srinivas. (Revision 1431459)

     Result = FAILURE
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1431459
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/ClientNamenodeProtocol.proto
, Integrated in Hadoop-Mapreduce-trunk #1310 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1310/])
    HDFS-4367. GetDataEncryptionKeyResponseProto does not handle null response. Contributed by Suresh Srinivas. (Revision 1431459)

     Result = FAILURE
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1431459
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/ClientNamenodeProtocol.proto
]