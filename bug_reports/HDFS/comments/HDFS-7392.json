[[~vacekf], I can't get exact issue from your description, do you get issue in real environment?  If so, you can write the repro steps in comments. , All you need to reproduce this bug is FQDN which can be resolved to two IP addresses, like share.meck.com for me. I'm attaching nslookup output to show that share.merck.com is resolved to 54.40.29.65 and 59.40.29.223 

Name node service must not be installed on this machine.

Then try to open any HDFS file on such a node like hdfs.open("hdfs://share.merck.com/some-dir/some-file.txt")

{quote}
[~/proj/quickbox]$ nslookup share.merck.com                                                       
Server:         127.0.1.1
Address:        127.0.1.1#53

share.merck.com canonical name = internal-gicprg-share-merck-com-1538706884.us-east-1.elb.amazonaws.com.
Name:   internal-gicprg-share-merck-com-1538706884.us-east-1.elb.amazonaws.com
Address: 54.40.29.223
Name:   internal-gicprg-share-merck-com-1538706884.us-east-1.elb.amazonaws.com
Address: 54.40.29.65
{quote}, Yi: Do you still need more clarification? Contact me, please., [~vacekf], I get the issue from your description now. I think it is an issue from the code logic, and now I try to reproduce it in my local env and go to confirm it.

I repeat the issue here: the issue (client open the URI in dead loop) occurs when you use client to access HDFS, but you fill a wrong filesystem URI and there is no namenode in the host corresponding to that URI, and the FQDN of that host can be resolved to two IP addresses. Is that right?, BTW, I see you leave the JIRA unassigned, not sure you just report the issue, or you want to fix but don't have right to assign to yourself?
If I confirm it's indeed an issue, please let me know if you want to fix yourself, or I could help., Confirm that It's indeed an issue., I guess, that I can fix the issue myself, but I have not hatoop development toolchain installed to run all the integration tasks like testing and so. So if it can help you, I can send you proposed java patch. We need to have it fixed ASAP, so please make decision yourself, what will be the best to fix it in shortest term. I'll simply do my best to help you., I'm too bussy to implement promissed patch so I'm adding part of log to show what is wrong with connection timeout. Please let me know if it helped.

Fanda

Everlasting attempt to open nonexisting hdfs uri hdfs://share.merck.com/OneLevelHeader.xlsx

opening path: /OneLevelHeader.xlsx ...
DEBUG [main] (Client.java:426) - The ping interval is 60000 ms.
DEBUG [main] (Client.java:695) - Connecting to share.merck.com/54.40.29.223:8020
 INFO [main] (Client.java:814) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 0 time(s); maxRetries=45
 WARN [main] (Client.java:568) - Address change detected. Old: share.merck.com/54.40.29.223:8020 New: share.merck.com/54.40.29.65:8020
 INFO [main] (Client.java:814) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 0 time(s); maxRetries=45
 INFO [main] (Client.java:814) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 1 time(s); maxRetries=45
 WARN [main] (Client.java:568) - Address change detected. Old: share.merck.com/54.40.29.65:8020 New: share.merck.com/54.40.29.223:8020
 INFO [main] (Client.java:814) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 0 time(s); maxRetries=45
 INFO [main] (Client.java:814) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 1 time(s); maxRetries=45, Problem can be solved by different implementation of SecurityUtils.StandardHostResolver.getByName(String host)

Current implementation
{code}
  interface HostResolver {
    InetAddress getByName(String host) throws UnknownHostException;    
  }
  
/**
   * Uses standard java host resolution
   */
  static class StandardHostResolver implements HostResolver {
    @Override
    public InetAddress getByName(String host) throws UnknownHostException {
      return InetAddress.getByName(host);
    }
  }
{code}

Proper implementation should be like
{code}
  interface HostResolver {
    InetAddress[] getByName(String host) throws UnknownHostException;    
  }
  
  /**
   * Uses standard java host resolution
   */
  static class StandardHostResolver implements HostResolver {
    @Override
    public InetAddress[] getByName(String host) throws UnknownHostException {
      return InetAddress.getAllByName(host);
    }
  }
{code}, Please ignore my previous proposal, it will not work., Finaly, I've created promissed patch. It is attached as HDFS-7392.diff . It is not a final solution of course, but it is working and I hope that it brings a light to the problem we are facing on. Yi, please contact me if you need more info or explanation.

regards

Fanda, I'm also attaching a log whent the patch is applied.

{code}
DEBUG [main] (Client.java:697) - Connecting to share.merck.com/54.40.29.65:8020
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 1 time(s); maxRetries=45
 WARN [main] (Client.java:564) - Address change detected. Old: share.merck.com/54.40.29.65:8020 New: share.merck.com/54.40.29.223:8020
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 2 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 1 time(s); maxRetries=45
 WARN [main] (Client.java:564) - Address change detected. Old: share.merck.com/54.40.29.223:8020 New: share.merck.com/54.40.29.65:8020
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 2 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 3 time(s); maxRetries=45
 WARN [main] (Client.java:564) - Address change detected. Old: share.merck.com/54.40.29.65:8020 New: share.merck.com/54.40.29.223:8020
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 4 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 3 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 4 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 5 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 6 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 7 time(s); maxRetries=45
 WARN [main] (Client.java:564) - Address change detected. Old: share.merck.com/54.40.29.223:8020 New: share.merck.com/54.40.29.65:8020
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 8 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 5 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 6 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.65:8020. Already tried 7 time(s); maxRetries=45
 WARN [main] (Client.java:564) - Address change detected. Old: share.merck.com/54.40.29.65:8020 New: share.merck.com/54.40.29.223:8020
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 8 time(s); maxRetries=45
 INFO [main] (Client.java:816) - Retrying connect to server: share.merck.com/54.40.29.223:8020. Already tried 9 time(s); maxRetries=45
{code} , Hi Yi
Yes we are getting it in real environment. Otherwise we would not bother to create a major issue. We had a process blocked on this for several days. Frantisek already suggested a viable solution for this problem. Unfortunately Frantisek has left our company. How we could help you to make a progress in fixing this issue?
Best Regards
Daniel , Hi Yi
Yes we are getting it in real environment. Otherwise we would not bother to create a major issue. We had a process blocked on this for several days. Frantisek already suggested a viable solution for this problem. Unfortunately Frantisek has left our company. How we could help you to make a progress in fixing this issue?
Best Regards
Daniel , [~peschd], I think this issue is not important, the reasons are:
*1.* You connect to an incorrect fs uri, if you connect to a correct one, then there is no issue.
*2.* Even for an incorrect fs uri, indeed it will retry again and again in the specific environment you described, but you can see the failure from log.

Could you tell me whether this blocks your usage and you are not able to use an correct fs uri? I think this issue is mostly caused by you use an incorrect fs uri., We are not blocked by his bug and we are able to connect correct URIs.

In my honest opinion this issue is still important and could be easily fixed because:
1. The code is simply wrong. If you connect to wrong URI it should fail and not get into infinite loop. 
2. You will not find anything useful in the logs. You need to debug it to find the root cause by yourself.
3. We already spend the effort to found the root cause and provided the fix.  







 
, I think we should fix this bug since the failure count does not work when a host name is resolved to more than one address.

Will review the patch., Thanks Daniel. Agree with [~szetszwo]'s suggestion that we need to fix.
I assign the JIRA to you, since you guys take time investigating the cause and provider a fix., {code}
+          if(server != null) {
+            Short s = timeoutFailuresByAddress.get(server);
+            if(s != null)
+              timeoutFailures = s.shortValue();
+            timeoutFailures++;
+            timeoutFailuresByAddress.put(server, timeoutFailures);
           }
-          handleConnectionTimeout(timeoutFailures++,
+          updateAddress();
+          handleConnectionTimeout(timeoutFailures,
{code}
- Could server be null?  It seems impossible so that we should omit the null check.
- Before the patch, timeoutFailures is incremented after handleConnectionTimeout(..).  We need to keep the order.]