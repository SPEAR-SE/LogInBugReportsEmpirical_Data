[Also, interrupting the thread didn't help. {{epoll_wait()}} returns but the thread calls {{epoll_wait()}} again.

Datanode stacktrace :

{noformat}
"DataNode:[]" daemon prio=10 tid=0x083b1800 nid=0x5a67 runnable [0xb110b000..0xb110c120]
   java.lang.Thread.State: RUNNABLE
  at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)
  at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:215)
  at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:65)
  at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:69)
  - locked <0xf3944168> (a sun.nio.ch.Util$1)
  - locked <0xf3944158> (a java.util.Collections$UnmodifiableSet)
  - locked <0xf3944178> (a sun.nio.ch.EPollSelectorImpl)
  at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:80)
  at org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool.select(SocketIOWithTimeout.java:237)
  at org.apache.hadoop.net.SocketIOWithTimeout.doIO(SocketIOWithTimeout.java:155)
  at org.apache.hadoop.net.SocketOutputStream.write(SocketOutputStream.java:144)
  at org.apache.hadoop.net.SocketOutputStream.write(SocketOutputStream.java:105)
  at org.apache.hadoop.ipc.Client$Connection$2.write(Client.java:214)
  at java.io.BufferedOutputStream.write(BufferedOutputStream.java:105)
  - locked <0xb6dc7d50> (a java.io.BufferedOutputStream)
  at java.io.DataOutputStream.write(DataOutputStream.java:90)
  - locked <0xb6dc7d38> (a java.io.DataOutputStream)
  at org.apache.hadoop.ipc.Client$Connection.sendParam(Client.java:357)
  - locked <0xb6dc7d38> (a java.io.DataOutputStream)
  at org.apache.hadoop.ipc.Client.call(Client.java:549)
  - locked <0xf3944228> (a org.apache.hadoop.ipc.Client$Call)
  at org.apache.hadoop.ipc.RPC$Invoker.invoke(RPC.java:212)
  at org.apache.hadoop.dfs.$Proxy4.blockReport(Unknown Source)
  at org.apache.hadoop.dfs.DataNode.offerService(DataNode.java:670)
  at org.apache.hadoop.dfs.DataNode.run(DataNode.java:2696)
  at java.lang.Thread.run(Thread.java:619)
{noformat}, The above trace is for hadoop 0.17.
, I suspect it is going to be very hard to reproduce this problem. Even after finding the problem, mostly, we won't be able to do much about it. It is likely going to be some bad interaction between epoll/kernel/jdk.

Fortunately, all the stuck threads are reading or writing from sockets that don't have a timeout. So one work around is to have a timeout (something like 10 minutes). 

Currently following need timeout :
    - upstream socket in datanode write pipeline
    - IPC client writes to the server (reads already have a timeout and controlled by pings)
, jstack of a stuck datanode. Every socket that is stuck has a timeout of 0., The above jstack is from Koji., We are using hadoop 0.20.1 version.Whether this issue will be applicable to that version also?
can you give more deatils on thjis 2 points., I think this is not a problem anymore.  Please feel free to reopen if I was wrong.]