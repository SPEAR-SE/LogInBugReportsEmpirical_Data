[To fix the issue, I created a queue for each actor thread which will enqueue the two synchronous method call and will process them at the end., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695290/HDFS-7704.patch
  against trunk revision 03a5e04.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.namenode.ha.TestRetryCacheWithHA

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9371//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9371//console

This message is automatically generated., This test pass on my local setup., The high-level approach seems fine, but use of {{DatanodeCommand}} for something internal to datanode is a bit strange.  {{DatanodeCommand}} is for namenode to instruct datanode to do certain tasks. Also, it will be nice if the bad block reporting portion of the change can aggregate multiple such reports and make a single namenode rpc call, if multiple bad block reports are present in the queue.  The queue, {{bpThreadQueue}}, also needs a proper synchronization. , Hi [~shahrs87],

A couple of quick comments:

{code}
  public void bpThreadEnqueue(DatanodeCommand datanodeCommand) {
    if (bpThreadQueue != null) {
      bpThreadQueue.add(datanodeCommand);
    }
  }
{code}

When would bpThreadQueue be null? Don't you want to use Preconditions here?

Several lines exceed the 80 char limit.

s/if(/if (/

I'll wait for your second version with [~kihwal]'s comments addressed.
, Thanks [~kihwal] and [~clamb] for your comments.
Attaching a new patch addressing your comments.
Please review., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695935/HDFS-7704-v2.patch
  against trunk revision ffc75d6.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9393//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/9393//artifact/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/9393//artifact/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9393//console

This message is automatically generated., Hi [~shahrs87],

I don't understand why you create the BPServiceActorAction class with subtypes (ErrorReportAction and ReportBadBlockAction) and then not do a method dispatch on the class. Instead you're using an enum and case to do the dispatch. This seems rather un-OO-like, no?

Other nits:

BPOfferService.java:

{code}
      ErrorReportAction errorReportAction = new ErrorReportAction
        (BPServiceActorAction.ActionEnum.TRYSENDERRORREPORT,errCode, errMsg);
{code}

Needs a space before "errCode".

BPServiceActor.java:

s/synchronized(/synchronized (/
s/switch(/switch (/

ErrorReportAction.java:

s/BPServiceActorAction{/BPServiceActorAction {/

ReportBadBlockAction.java:

s/BPServiceActorAction{/BPServiceActorAction {/

Charles
, Adding to what Charles said: If {{BPServiceActorAction}} is specifically for reporting to namenode, you could add something like {{reportTo(DatanodeProtocolClientSideTranslatorPB bpNamenode)}} method and have the implementation in each subclass do its own thing. Except when one is created, the rest of the code won't have to know the specific type of the instance.  It will make batching bad block reporting difficult.

In the current patch, the way {{bpThreadQueue}} is synchronized will block {{bpThreadEnqueue()}}, if RPC call blocks.  Instead, you could create a new collection containing the content of the queue in a synchronized block, and then call the report() method of each one outside the synchronized block.

If you want to make batching of bad block reporting work, it may not be worth trying to introduce the unified {{BPServiceActorAction}} concept.  For bad blocks, "{{enqueue()}}" or "{{add()}}" can put thing directly to an ArrayList, which simplifies the aggregation on reporting time.  If you believe  {{BPServiceActorAction}}-based abstraction will provide more value in the future, giving up on batched bad block reporting is okay. After all, datanode is not doing it today., Thanks [~kihwal] and [~clamb] for your valuable comments.
Attaching a new patch.
In this patch, I have not accumulated all the bad blocks in one ReportBadBlock rpc call since it is not doing in current implementation.
Please review and comment., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696273/HDFS-7704-v3.patch
  against trunk revision 21d80b3.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9419//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/9419//artifact/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9419//console

This message is automatically generated., Cancelling the patch to address Findbugs warning., Attached a new patch with findbugs warninfg addressed., Instead of logging ExtendedBlock.toString() method, the previous patch logged LocatedBlock array., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696325/HDFS-7704-v4.patch
  against trunk revision b73e776.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9423//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9423//console

This message is automatically generated., Hi [~shahrs87],

I only have a few nits on the latest rev:

BPServiceActor.java:

Line continuations are 4 spaces.

At line 257 you've introduced a line containing spaces. Also, you've removed the last newline of the file.

BPServiceActorAction.java:

Line continuations are 4 spaces (statements in a new block are indented 2 spaces).

ErrorReportAction.java:

s/A ErrorReportAction/An ErrorReportAction/
Can LOG be private?

ReportBadBlockAction.java

Can LOG be private?

s/to namenode :/to namenode: /
The block comment in that catch should be:

/*
 * One common reason ...
 */
, Oh, sorry, one more comment. In the test, to be consistent with the code that is already there, you can add an import static for Assert.assertTrue rather than importing (non-static) Assert. Or, the opposite (eliminate the import statics).
, {{processQueueMessages()}} is called outside of the try-catch block of {{offerService()}}. It will be better to move it inside, at the end of the try block and let the existing exception handling take care of the rest.  Then we can get rid of {{nnAddress]} that are passed only for logging. Make {{reportTo()}} throw and {{offerService()}} always log exceptions with {{nnAddress}}.

When a reporting fails, is it okay to simply drop it? Probably not. Take a look at {{reportReceivedDeletedBlocks()}}. We should add a similar logic of putting failed reports back to the queue to {{processQueueMessages()}}., Thanks [~kihwal] for reviewing the patch and catching the , Sorry..ignore the previous comment.
Thanks for catching the missing exception handling case., Attaching a new patch to address all the comments, Manually kicked the precommit., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12697515/HDFS-7704-v5.patch
  against trunk revision c541a37.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9536//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9536//console

This message is automatically generated., The precommit was killed by another job (#9537) and ran only for 18 minutes. Kicking it again to get unit tests to run., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12697515/HDFS-7704-v5.patch
  against trunk revision c3da2db.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9538//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9538//console

This message is automatically generated., +1 The patch looks good., I've committed this to trunk and branch-2. Thanks for working on this, Rushabh and thanks for the reviews, Charles., FAILURE: Integrated in Hadoop-trunk-Commit #7088 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7088/])
HDFS-7704. DN heartbeat to Active NN may be blocked and expire if connection to Standby NN continues to time out. Contributed by Rushabh Shah. (kihwal: rev 38262779bbf38a427bad6d044e91165567f1d206)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestBPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java
, Thanks [~kihwal] for committing this patch.
Thanks kihwal and [~clamb] for reviews., [~kihwal] Trunk doesn't compile now. I quickly checked the commit log, it seems {{BPServiceActorAction.java}} is missing? It's in the patch though., As a temporal solution, I'll revert this commit shortly., [~kihwal] fixed this problem. Thank you for dealing with the problem!, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #103 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/103/])
HDFS-7704. DN heartbeat to Active NN may be blocked and expire if connection to Standby NN continues to time out. Contributed by Rushabh Shah. (kihwal: rev 38262779bbf38a427bad6d044e91165567f1d206)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestBPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #837 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/837/])
HDFS-7704. DN heartbeat to Active NN may be blocked and expire if connection to Standby NN continues to time out. Contributed by Rushabh Shah. (kihwal: rev 38262779bbf38a427bad6d044e91165567f1d206)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestBPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #2035 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2035/])
HDFS-7704. DN heartbeat to Active NN may be blocked and expire if connection to Standby NN continues to time out. Contributed by Rushabh Shah. (kihwal: rev 38262779bbf38a427bad6d044e91165567f1d206)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestBPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #104 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/104/])
HDFS-7704. DN heartbeat to Active NN may be blocked and expire if connection to Standby NN continues to time out. Contributed by Rushabh Shah. (kihwal: rev 38262779bbf38a427bad6d044e91165567f1d206)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestBPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2054 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2054/])
HDFS-7704. DN heartbeat to Active NN may be blocked and expire if connection to Standby NN continues to time out. Contributed by Rushabh Shah. (kihwal: rev 38262779bbf38a427bad6d044e91165567f1d206)
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestBPOfferService.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk-Java8 #97 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/97/])
HDFS-7704. DN heartbeat to Active NN may be blocked and expire if connection to Standby NN continues to time out. Contributed by Rushabh Shah. (kihwal: rev 38262779bbf38a427bad6d044e91165567f1d206)
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java
* hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestBPOfferService.java
* hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
]