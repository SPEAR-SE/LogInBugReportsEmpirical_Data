[Attaching a patch., Hi [~ajisakaa], HDFS-7753 is there to handle this. Please see it. Thanks!, Thanks [~ajisakaa] and [~rakeshr] for working on this findbugs issue. 

Based on the description of IS2_INCONSISTENT_SYNC detector: "For example, the detector cannot statically detect all situations in which a lock is held.  Also, even when the detector is accurate in distinguishing locked vs. unlocked accesses, the code in question may still be correct."
I agree with [~ajisakaa]'s fix to exclude IS2_INCONSISTENT_SYNC check for BackupImage.java because it has carefully unsynchronized design. This will also avoid fixing the same problem again in the future if we need to add more synchronized methods or remove some unsynchronized methods for this class.

+1 (non-binding) for the fix. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12697371/HDFS-7710-001.patch
  against trunk revision 1382ae5.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/9498//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/9498//console

This message is automatically generated., Sorry, I missed this jira. I'll see it., I don't think that there is a significant performance impact to get rid of the synchronization and to try to outsmart findbugs.

I think it is better to just fix it instead of excluding it., Thanks [~wheat9] for the review comment.
bq. I don't think that there is a significant performance impact to get rid of the synchronization and to try to outsmart findbugs.
Is it really? Would you tell me why there is no significant performance impact to adding synchronization., bq. Is it really? Would you tell me why there is no significant performance impact to adding synchronization.

This is not a feature in the critical path., bq. This is not a feature in the critical path.
Make sense to me. [~xyao], what do you think?, IS2_INCONSISTENT_SYNC detector is strictly based on the ratio of locked vs unlocked access of the class. HDFS-7710 removed one unused unlocked method, which changes the ratio (happen to be the same as the count) of locked vs unlocked from 3: 3 to 3: 2.  

I agree with [~wheat9] on the importance of tracking additional synchronization to avoid unexpected performance hit in future changes. However, this can be done with better tools for class like BackupImage. IS2_INCONSISTENT_SYNC's has false alarm issue as described in its doc. It has a limited support of exclusion rule, which only allows to ignore checking lock for a member variable rather than whitelist/blacklist of locked/unlocked methods. Unfortunately, that is what is supported findbugs 3.0. Based on that, I think [~ajisakaa]'s proposed fix is reasonable. Please feel free to share your thoughts on a better fix. , bq. IS2_INCONSISTENT_SYNC's has false alarm issue as described in its doc. 

I'm unsure the value of introducing a (possible benign) race either. Does the race improve the performance significantly? Does it sit on the critical path?

I think that the values of the time of developer / maintainers are under-appreciated. Note that it takes the time of developers / maintainers to reason about it even if it's a false alarm -- unfortunately it is error-prone and ineffective [1]. Arguably putting the related code in a critical section is not the greatest fix, but given that fact that it is not in a performance-critical path I think it is okay to fix the race and to save the time of every developers and maintainers. If it is indeed a performance issue we can revisit it.

Reference:

1. S. Savage et al.. Eraser: A Dynamic Data Race Detector for Multithreaded Programs. In SOSP'97. , According to HDFS-4114, I guess the BackupNode related code has not been actively maintained for a long time?, I proposed a patch in HDFS-7753. Please take a look., Thanks [~shv]. I'll close this issue and review the patch.]