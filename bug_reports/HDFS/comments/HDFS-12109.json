[The HADOOP_CONF_DIR environment variable is how the shell scripts find where hadoop-env.sh is located. Defining it inside hadoop-env.sh won't work. Given what I can imply from your description, hadoop 3.x would work fine because it can autodetermine where stuff is located based upon the executable location.  But hadoop 2.x has a lot of bugs, so it needs to have (minimally) HADOOP_PREFIX defined outside of the shell script code.  If that is defined, it should know where everything is located, including auto-defining HADOOP_CONF_DIR to be HADOOP_PREFIX/etc/hadoop., Thanks for your reply [~aw]. I exported the variables as per below for testing purposes:

[hadoop@namenode01 ~]$ export HADOOP_PREFIX=/usr/local/hadoop
[hadoop@namenode01 ~]$ export HADOOP_CONF_DIR=$HADOOP_PREFIX/etc/hadoop

However the issue persists. What I'd like to underline is that part of the configuration seems to be visible to file-system tools, based on the exception I get:

[hadoop@namenode01 ~]$ /usr/local/hadoop/bin/hdfs dfs -ls /
-ls: java.net.UnknownHostException: saccluster

Indeed "saccluster" is the nameservice I had configured and the default FS., It's also probably worth mentioning that I am trying to use the HA NameNode setup with Accumulo 1.8.1 and I am having the same problem there (namenode service being used as if it were a hostname in a non-HA NameNode setup) when I try to init Accumulo or show volumes, as per below:

accumulo@namenode01 ~]$ /usr/local/accumulo/bin/accumulo admin volumes --list
2017-07-11 09:24:52,380 [start.Main] ERROR: Problem initializing the class loader
java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.apache.accumulo.start.Main.getClassLoader(Main.java:94)
        at org.apache.accumulo.start.Main.main(Main.java:47)
Caused by: java.lang.IllegalArgumentException: java.net.UnknownHostException: saccluster
        at org.apache.hadoop.security.SecurityUtil.buildTokenService(SecurityUtil.java:417)
        at org.apache.hadoop.hdfs.NameNodeProxiesClient.createProxyWithClientProtocol(NameNodeProxiesClient.java:130)
        at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:343)
        at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:287)
        at org.apache.hadoop.hdfs.DistributedFileSystem.initialize(DistributedFileSystem.java:156)
        at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2811)
        at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:100)
        at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2848)
        at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2830)
        at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:389)
        at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:181)
        at org.apache.commons.vfs2.provider.hdfs.HdfsFileSystem.resolveFile(HdfsFileSystem.java:164)
        at org.apache.commons.vfs2.provider.AbstractOriginatingFileProvider.findFile(AbstractOriginatingFileProvider.java:84)
        at org.apache.commons.vfs2.provider.AbstractOriginatingFileProvider.findFile(AbstractOriginatingFileProvider.java:64)
        at org.apache.commons.vfs2.impl.DefaultFileSystemManager.resolveFile(DefaultFileSystemManager.java:804)
        at org.apache.commons.vfs2.impl.DefaultFileSystemManager.resolveFile(DefaultFileSystemManager.java:760)
        at org.apache.commons.vfs2.impl.DefaultFileSystemManager.resolveFile(DefaultFileSystemManager.java:709)
        at org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader.resolve(AccumuloVFSClassLoader.java:141)
        at org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader.resolve(AccumuloVFSClassLoader.java:121)
        at org.apache.accumulo.start.classloader.vfs.AccumuloVFSClassLoader.getClassLoader(AccumuloVFSClassLoader.java:211)

It was due to the above exception that I then went back one step and tried file-system commands for HDFS directly.

The Web UI for NameNodes on the active NameNode (http://namenode01:50070/dfshealth.html#tab-overview) is picking up the HA NameNode configuration just fine and showing the Namespace as expected, saccluster,

As a side note, without HA NameNode the setup has been working just fine for me for quite some time, including using Accumulo with HDFS. It seems like there's something missing in the way HA NameNode properties are exposed., [~luigidifraia] based on description, I think you configured one property wrongly.   

{code}
<property>
<name>dfs.client.failover.proxy.provider.mycluster</name>
<value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
</property>
{code}

In this property, you given wrong namespace name(*mycluster*). It should be *saccluster*.
So your configuration should be like this..
{code}
<property>
<name>dfs.client.failover.proxy.provider.saccluster</name>
<value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>
</property>
{code}
, Thanks [~surendrasingh]. Appreciate your help with this. Indeed it was the property name that was using the wrong namespace. Oddly enough, the property I was passing on the commandline was correctly defined, which somehow masked out the hdfs-site.xml configuration issue.
I am resolving the issue as "Not a bug".
Thanks again.]