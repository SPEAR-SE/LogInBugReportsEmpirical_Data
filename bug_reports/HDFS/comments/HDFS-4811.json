[[~andrew.wang] - would your fix you were working on to use timestamped tmp files for checkpoints also fix this?, Our story comes to a tragic conclusion in {{FSImage#renameCheckpointInDir}}:

{code}
  private void renameCheckpointInDir(StorageDirectory sd, long txid)
      throws IOException {
    File ckpt = NNStorage.getStorageFile(sd, NameNodeFile.IMAGE_NEW, txid);
    File curFile = NNStorage.getStorageFile(sd, NameNodeFile.IMAGE, txid);
    // renameTo fails on Windows if the destination file 
    // already exists.
    if(LOG.isDebugEnabled()) {
      LOG.debug("renaming  " + ckpt.getAbsolutePath() 
                + " to " + curFile.getAbsolutePath());
    }
    if (!ckpt.renameTo(curFile)) {
      if (!curFile.delete() || !ckpt.renameTo(curFile)) {
        throw new IOException("renaming  " + ckpt.getAbsolutePath() + " to "  + 
            curFile.getAbsolutePath() + " FAILED");
      }
    }    
  }
{code}

Expanding on my example in the description, thread 1 holds ckpt open for write.  Thread 2 attempts to rename ckpt to curFile.  On Linux and OS X, the rename succeeds, but now the fsimage file has incomplete content, because thread 1 hasn't finished writing into it.  On Windows, the rename fails, so we delete the existing fsimage.  However, the second attempt at renaming also fails because thread 1 holds a lock on the file.

The problem is more visible on Windows.  We see an intermittent failure in {{TestStandbyCheckpoints#testBothNodesInStandbyState}}.

One potential solution would be for {{GetImageServlet}} to take the namesystem lock while downloading the image from the other namenode and renaming.  {{StandbyCheckpointer#doCheckpoint}} already acquires the namesystem lock, so doing the same in {{GetImageServlet}} would enforce mutual exclusion.

Note that we are already protected against multiple put image calls by {{GetImageServlet}} tracking currently downloading checkpoints and rejecting duplicated requests.  This is just a race condition with the namenode running its own checkpoint.
, [~tlipcon] and [~andrew.wang], yes, it sounds like it would.  Then, we wouldn't need the namesystem lock.  Is there an existing jira to track that change?

I'd also suggest embedding the namenode ID in the temp file name to differentiate between "this" NN's checkpoint and "peer" NN's checkpoint in the rare case of a timestamp collision.

On Windows, we may also want to consider a JNI hook for a native rename-replace-existing call, using {{MoveFileEx}} with flag {{MOVEFILE_REPLACE_EXISTING}}.

http://msdn.microsoft.com/en-us/library/aa365240(v=vs.85).aspx
, I believe Todd is referencing HDFS-4300, which downloads edits files to a temporary timestamped filename. Seems reasonable to do the same thing for the image file., I just realized that this bug sounded familiar. Apparently I found it a while back: see HDFS-3519. Feel free to steal that JIRA from me. HDFS-4300 is the one that Andrew is working on., I've reassigned HDFS-3519 to myself, and I'm resolving HDFS-4811 as duplicate.  Thanks, Todd and Andrew.]