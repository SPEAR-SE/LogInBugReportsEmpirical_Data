[By Looking at source code of method : FSNamesystem.listCorruptFileBlocks(String path, String[] cookieTab) , it do not seems that this method try to check checksum of each block.
Please correct me if my understanding is wrong., Hello [~pradeep_bhadani].  It sounds like this is working as designed.

The fsck command does not directly verify the checksum of each block.  This would be an extremely costly operation in a large cluster with many blocks.  Instead, checksum verification occurs asynchronous of the fsck command.  This can happen either when a client attempts to read the block (as you observed in your test case) or the background block scanner thread running on each DataNode detects an invalid checksum.  The corrupt status is then recorded in the NameNode.  When the fsck command runs, it's just reporting on the state of known corrupt blocks from the NameNode.

Under default configuration, the background block scanner thread does its own checksum verification on a block every 3 weeks, so in the test case you described, the block scanner would not have had an opportunity to detect this.  However, when you attempted to read the file, this triggered an immediate checksum verification during the read, which then reported the checksum failure to the NameNode.

If this explanation makes sense, would you please close the issue?  If you still think you're seeing a bug in fsck, can you provide more details?  Thanks!, It make sense to run block scanner every 3weeks as it is costly operation.

FSCK takes 3week old block scanner report to say about Healthiness of current state of cluster  which might not be correct (as in my test case).

So  when we prepare for cluster upgrade,  FSCK command is not enough to say that current state of system is healthy.

We can close this ticket as this was the expected behavior of FSCK..
]