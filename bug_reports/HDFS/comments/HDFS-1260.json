[To confirm the suspicion above, I had the operator rename the meta block back to _7094, and the next recovery attempt succeeded., err.,.. sorry... rename the meta block back to *_7093*, Simple patch which reorders tryUpdateBlock's verification vs rename., about the testing, any reason not to use one of the adapters instead of making this public?

{code}
public long nextGenerationStampForBlock(Block block) throws IOException  {
{code}

sorry, i'm a stickler for visibility/encapsulation bits when i can be, +1 on the fix.  good catch, oh, other than that, lgtm
, Here's a patch that moves the call over to the adapter. Also added a bit of javadoc to DelayAnswer, yea, looks good.  at some point, does it make sense to move the DelayAnswer class out?  it seems generally useful (not this patch, but just thinking)
, Yea, we could move it to a MockitoUtil class or something. Let's tackle that when we move all these tests forward to trunk (I plan to do that in July hopefully), This patch looks perfect to me. +1, After months of running this test I ran into this failure attached above. One of the DNs somehow ends up with multiple meta files for the same block, but at different generation stamps.

I think the issue is in the implementation of DataNode.updateBlock(). The block passed in doesn't have a wildcard generation stamp, but we don't care - we go and find the block on disk without matching generation stamps. I think this is OK based on the validation logic - we still only move blocks forward in GS-time, and don't revert length. However, when we then call updateBlockMap() it doesn't use a wildcard generation stamp, so the block can get left in the block map with the old generation stamp. This inconsistency I think cascades into the sort of failure seen in the attached log.

I *think* the solution is:
  - Change updateBlock to call updateBlockMap with a wildcard generation stamp key
  - Change the interruption code to use a wildcard GS block when interrupting concurrent writers

I will make these changes and see if the rest of the unit tests still pass, then see if I can come up with a regression test., > However, when we then call updateBlockMap() it doesn't use a wildcard generation stamp, 

yes, that seems to be a bug to me. Great catch!, Patch ported to 20-security., +1 for the patch., This was committed to 0.20.205, resolving JIRA, Todd, do we need this in trunk also?, I don't believe so - I think the new append design in trunk prevents this issue. There is an existing open JIRA against trunk about forward-porting all append-related test cases to the new trunk implementation to be sure the new design doesn't suffer from the same issues., Closed upon release of 0.20.205.0]