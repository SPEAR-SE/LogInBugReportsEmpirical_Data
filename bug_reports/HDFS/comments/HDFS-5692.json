[[~kturner],

This sounds useful. Apps invoking vfs.listStatus() will get to see the VFS paths in the exception and not the internal paths. It is also very important to throw FileNotFoundException() whenever paths being accessed are not found. 

But, FileNotFoundException unfortunately doesn't accept a throwable. So, throwing a nested FileNotFoundException as you suggested is not possible. If you a way of throwing this nested FileNotFoundException, please let me know.

We can throw an IOException carrying VFS path details and nested with FileNotFoundException carrying internal path details. But that will violate the contract of listStatus() API.  Unlike APIs, shell commands throw errors with VFS paths and not internal paths. 

{noformat}
java.io.IOException: File /nn1/a/b does not exist.
        at org.apache.hadoop.fs.viewfs.ViewFileSystem.listStatus(ViewFileSystem.java:366)
Caused by: java.io.FileNotFoundException: File /a/b does not exist.
        at org.apache.hadoop.hdfs.DistributedFileSystem.listStatusInternal(DistributedFileSystem.java:644)
        at org.apache.hadoop.hdfs.DistributedFileSystem.access$600(DistributedFileSystem.java:92)
        at org.apache.hadoop.hdfs.DistributedFileSystem$14.doCall(DistributedFileSystem.java:702)
{noformat}

In order to retain the right contract of throwing FileNotFoundException for listStatus() API, I am inclined to close this bug as wont fix. Please let me know if you think otherwise. Would love to hear if there are ways to nest FileNotFoundException. , Make a subclass of FileNotFoundException that calls initCause with the wrapped FileNotFoundException?  Seems like that would work and still satisfy the contract.
, Thanks for the comment. Yes, it is possible to create a new exception by extending FileNotFoundException and later doing initCause(). The only problem here is the top level exception will again be the custom one and not the FileNotFoundException. try/catch would still work though. The reluctance to go this route is that the new custom exception is not a well known one and would end up more specific to {{listStatus}} API. Would be preferable to throw either the well known Exceptions or the other FileSystem/ViewFileSystem publicly exposed ones. There is {{NotInMointPointException}} which is already available under {{ViewFileSystem}} and closest match for the errors relating to {{Path}}. The current definition of {{NotInMountPointException}} doesn't accept a throwable, but it should be doable. The real question here is would any other Exception match the correctness as in FileNotFoundException. Any further thoughts on this please ?, As you say, try/catch (and {{instanceOf}}) would work as expected if the implementation threw a subclass of {{FileNotFoundException}}.  Unless someone was calling {{getClass()}} on a caught exception to check for the actual implementation class, it seems the only visible effect would be the name that appears in log messages.  I personally wouldn't hesitate to use this approach in my own code, but that's just my view.

I may be biased, but I think {{NotInMountPointException}} would be a misleading choice in this case, since its description says "used in cases where the given path is not mounted through viewfs".  That doesn't seem to be the case in the example, but I don't feel strongly about it.  (As a side note, it seems odd that {{NotInMountPointException}} extends {{UnsupportedOperationException}}; the reason for that is not discussed in HADOOP-8014.)
, Thanks for the views. Yes, {{NotInMountPointException}} will be misleading as you explained.  On peer discussions I heard views against option 1. So, shall we wait a bit more to hear other alternatives before moving with Option 1 ?

Another option is, we can make {{ViewFileSystem#listStatus}} catch the FileNotFoundException and throw the same with a its version of Path which is not fully resolved. 
]