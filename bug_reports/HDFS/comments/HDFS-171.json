[The new log message is *not redundant*.  There could be two different exceptions thrown, one from the try{...} and the other one from finally{...}.  We would miss the second exception if we don't log inside finally{...}., I agree when initialize() fails and then consequently close() throws a runtime exception we will get 2 dfiferent messages.
This is the case when the system cannot neither start nor exit.
But if close succeeds doubling the message is confusing.
I am looking at the close code in general and it looks like we will need to clean up handling of exceptions in general.
So this is not a one line fix, I am reassigning it to 0.19., I was in fact talking about the following new line in the code:
{code}
FSNamesystem(NameNode nn, Configuration conf) throws IOException {
  try {
    initialize(nn, conf);
  } catch(IOException e) {
    LOG.error(getClass().getSimpleName() + " initialization failed.", e);
    close();
    throw e;
  }
}
{code}
There is no finally there., > I was in fact talking about the following new line in the code ...

The situation here is similar: initialize(nn, conf) may throw an exception and then close() may throw a second exception.  If we get ride of LOG.error(...), the first exception (usually, the most important exception) won't be logged., Yes, but if we leave it there then in case of successful close() we will have the same exception logged twice.
I think we need a general idea on how to handle exceptions on closing. Not only in this particular case but in many other cases too., Patch for review. The patch's policy is to log the IOException and throw the RTE. It's not pretty, but does deal with the case where an IOException is followed by a Runtime exception. The question to ask is, is it worth it?, Patch for review (The last version of this patch called close whether or not an IOE was thrown).

The patch's policy is to log the IOException and throw the RTE when there's an RTE. It's not pretty, but does deal with the case where an IOException is followed by a Runtime exception. 
, Bill, thanks for working on this.  Assigning it to you., Closing this as stale.]