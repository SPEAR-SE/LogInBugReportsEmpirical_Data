[Attaching logs from the test run., The sequence in this test was:
- Client opens existing block for append
- Client appends 16KB, closes pipeline
- Client calls completeFile() which finalizes the inode
- DN blockReceived calls arrive

I don't think we properly handle the case in checkFileProgress to see if we actually seen finalized replicas of the newest generation stamp.

I'll work on a test case that delays the blockReceived calls, I think this was introduced by the following part of the HDFS-200 patch:
{code}
-        }
-      }
-      if (closeFile) {
-        // the file is getting closed. Insert block locations into blocksMap.
-        // Otherwise fsck will report these blocks as MISSING, especially if the
-        // blocksReceived from Datanodes take a long time to arrive.
-        for (int i = 0; i < descriptors.length; i++) {
           descriptors[i].addBlock(newblockinfo);
         }
-        pendingFile.setLastBlock(newblockinfo, null);
-      } else {
-        // add locations into the INodeUnderConstruction
-        pendingFile.setLastBlock(newblockinfo, descriptors);
       }
+      // add locations into the INodeUnderConstruction
+      pendingFile.setLastBlock(newblockinfo, descriptors);
     }
{code}

I have some unit tests to show the issue, and working on a fix. I think this should be considered a blocker for 0.20-append, Here are some changes which cause this problem to show up very reliably in various tests. This patch adds an undocumented conf that causes the DN to delay for some millis before sending blockReceived calls, and exposes bugs where completeFile() gets called before the DNs report the new blocks.

I have a patch that improves the situation, but still failing occasionally it seems... will run it through a couple hundred Hudson builds and see how it goes., Updating JIRA name to match the bug. There are several issues at hand:
1) commitBlockSynchronization was adding the nodes to the blocks map, even if the block is the last block in an in-progress file. This happens if there is a pipeline failure, for example.
2) addStoredBlock was adding the node to the blocks map even if the block is an earlier-GS replica of the last block in an in-progress file. This happens if one of the DNs restarts and sends its earlier-GS RWR block to the NN while the writer is still writing to the same block.

Both of these cases cause "completeFile" to be able to finalize the INodeFileUnderConstruction before the correct length of the last block has been reported, which results in temporarily visible truncation of the appended data., I am marking this for the append-branch to ensure that we investigate and follow through on this one., Here's a patch, applies on top of HDFS-1186 and HDFS-1218, HDFS-1057.

Been in heavy testing for a week or so, should be stable., Does HDFS-1779 partly fix this one? As per HDFS-1779, since bbw blocks are only added to targets, the problem of premature completeFile should not happen due to non-finalized blocks being added in addStoredBlock. That will leave only the case of commitBlockSynchronization in HDFS-1197 which is a simpler fix. Is this assessment correct?, That seems to make sense. But given this patch has been in production for a year so in lots of clusters, I'm more comfortable committing the full fix. Otherwise, would have to take a lot of hours to think through the possibilities and edge cases again :), That's a valid point. 

I am attaching a patch without the addStoredBlock change, just for the sake of comparision. The added tests pass with this patch also., The original patch dealt with ignoring the blockReceived  for a BBW block sent by a DN rebooting. However it, as a side effect, also ignores the blockReceived sent for a block that is finalized that races ahead of the call from the client to NN to close the block/file. Hence I think the original patch fixes a bug and introduces another. 

Jitendra observed that HDFS-1779 no longer sends the blockReceived but instead sends a bbw-report.
Hence I think that his patch is correct. However how do you explain todd's statement that the original patch has been in production for over a year. I thought it would be quite common for a blockReceived for a finalized block to race ahead of the client's call to the NN. In this case the file would not close till the next BReport., Hi Sanjay. I'm not sure I follow your reasoning here. This patch doesn't ignore blockReceived when it beats the completeFile call in the usual case. If the blockReceived call is for the correct generation stamp, it is added to the DN usual. It only changes behavior when an old generation stamp is reported., Todd, you are right., Todd's original patch rebased against 20-security., Incorrect patch uploaded previously., +1 for the patch., Committed to branch-0.20-security. Thanks to Todd., This was committed to branch-20 a long while back]