[A unit test log file and jstack dump of the VM, running the tests, 
BlockReceiver.receiveBlock() does not clean up properly in case of runtime exception. It should interrupt the responder inside finally clause rather than just when IOException is caught. DN functions normally for other IO requests., I also suggest to change line 555 to
} catch (Exception ioe) {

to make sure that an affected block is properly cleaned.

, M.b. something along these lines (see attachment)? Moving responder.interrupt() invocation to the finally {...} doesn't make us much good, because responder thread has to be stopped only in case of error.

Catching Throwable and wrapping it into IOException (as Raghu suggestion) seems to do the trick. I can confirm that I don't see any more of the 'hanging' behavior in the tests with this patch applied., This version of the patch seems to be less mystique and won't rise the question why we need to catch Throwable in this try-catch block (thanks for the suggestion, Raghu!)

I can confirm that with the patch in place the original problem is gone and tests are failing gracefully in case of RuntimeException being thrown inside of the BlockReceiver class.
 
All tests have passed with FI stuff turned off.
, The results of test-patch run. The mentioned JavaDoc warning belongs to DFSClient class which isn't a consideration of this patch. 

There appear to be 283 release audit warnings before the patch and 283 release audit warnings after applying the patch.


-1 overall.  

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    -1 javadoc.  The javadoc tool appears to have generated 1 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

, +1 for the patch., The above mentioned java warnings are unrelated and seems to belong to a totally different class. Thus, the Hudson's comment could be disregarded.

, I just committed this. Thanks Konstantin., Late comment:
  - this patch doesn't have new unit tests for its correctness is verifiable by the existing test TestDirectoryScanner when BlockReceiver's fault throws RuntimeException.

Test should fail in this case rather than merely hang forever. This method has been used to verify the correctness of the patch.]