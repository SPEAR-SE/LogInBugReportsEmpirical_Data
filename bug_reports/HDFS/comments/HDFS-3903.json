[This seems like a bug in {{DFSClient}} which applies the default umask to the given permission.

{code}
  public boolean mkdirs(String src, FsPermission permission,
      boolean createParent) throws IOException {
    if (permission == null) {
      permission = FsPermission.getDefault();
    }
    FsPermission masked = permission.applyUMask(dfsClientConf.uMask);
    return primitiveMkdir(src, masked, createParent);
  }
{code}
, The default umask is supposed to be applied to the given permission.

This corresponds to how {{mkdir(2)}} and {{creat(2)}} work in UNIX.

{code}
$ man 2 mkdir

NAME
       mkdir - create a directory

SYNOPSIS
       #include <sys/stat.h>
       #include <sys/types.h>

       int mkdir(const char *pathname, mode_t mode);

...
The  argument mode specifies the permissions to use.  It is modified by the process's umask in
the usual way: the permissions of the created directory are (mode &  ~umask  &  0777).   Other
mode bits of the created directory depend on the operating system.  For Linux, see below.
...
{code}

Similarly, HDFS has modified the given permission by the umask, all the way back to HADOOP-1298, which introduced permissions.  We should make sure we're doing this in WebHDFS as well..., Thanks Colin, now I remember I've been bitten by this before., Tucu, you mentioned WebHDFS does not apply the umask to all given permissions? If so we should fix that., yep, that seems to be the case.]