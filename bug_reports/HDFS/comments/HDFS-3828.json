[Radim,

We don't set the Fix Version field on Hadoop jiras until the fix is actually committed.  Instead please set the Affects or Target versions appropriately.

I've removed the 0.23.0 tag from Fix Version and added it to Affects Version since I suspect that's what you intended.  Please update the Target Version if you plan to backport to 0.23; I am not planning to backport unless requested., Attaching patch which addresses this issue.
# export totalScans from BlockScanner, for testing
# in scanBlockPoolSlice, add an early exit if we are already done scanning for the current period.
# update DataBlockScanner to use @VisibleForTesting
# add test in TestMultipleNNDataBlockScanner verifying that a block does not get repeatedly scanned.

This patch is significantly inspired by amith's work in HDFS-3194 but very little code remains., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12541854/hdfs3828.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    -1 findbugs.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3064//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/3064//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3064//console

This message is automatically generated., Thanks for filing/fixing Andy and Amith/Uma for identifying this!
 
It looks like the following code in BlockPoolSliceScanner#scan was intended to regular the interval, but per HDFS-3194 doesn't work because the call to cleanUp() rolls the log.  What's the advantage of this fix vs just making cleanUp (which should be renamed) only roll the log at the appropriate interval?  If we go with the approch in your patch then we should make this code a precondition and always start a new period as there's no way we should be in scan w/o a new period given you're new check.

{code}
if ( now >= (currentPeriodStart + scanPeriod)) {
  startNewPeriod();
}
{code}

- Please update the jira description with a description of the bug
- Let's rename "cleanUp" to something like "rollVerificationLog"
- If the scanner scans exactly once shouldn't scansLastRun be 0 after this first run? Ie getBlocksScannedInLastRun shouldn't always return 1 right?
- How about defining a constant (with package protection) to use in DataBlockScanner's sleep call and your test.
- waitAndScanBlocks should catch InterruptedException right after the sleep (and fail()) rather than propogate it outside the test.
- Not your change but mind fixing the spelling mistake / gross "//Sleep everytime except in the first interation." comment
, bq. It looks like the following code in BlockPoolSliceScanner#scan was intended to regular the interval, but per HDFS-3194 doesn't work because the call to cleanUp() rolls the log

Hmmm, interesting.  As things currently stand, when we're erroneously re-scanning, the while loop in {{scan()}} ends up calling {{verifyFirstBlock()}} because {{getEarliestScanTime()}} depends on the dncp log.

So I like your idea to move the test into cleanUp and rename cleanUp.  It seems to have the right behavior too.  New patch coming up., New patch, handle logroll exception in a renamed cleanUp function instead of in scanBlockPoolSlice.  Also add tests, with one BP and with two BP., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12542033/hdfs-3828-1.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.TestFileConcurrentReader
                  org.apache.hadoop.hdfs.server.blockmanagement.TestOverReplicatedBlocks

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3071//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/3071//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3071//console

This message is automatically generated., Like the new approach better. Checkout all my earlier bullets, eg wrt the 5 sec interval and scansLastRun. 
, bq. If the scanner scans exactly once shouldn't scansLastRun be 0 after this first run? Ie getBlocksScannedInLastRun shouldn't always return 1 right?

Empirically it is always 1 after a block has been scanned.  This is because when we call scanBlockPoolSlice but there is nothing to scan we're doing a bunch of useless work:
# creating a new HashMap {{processedBlocks}}
# parsing the verificationLogs and putting the results in the new {{processedBlocks}}
# calling scan() which returns immediately
# setting totalBlocksScannedInLastRun to the resulting size of {{processedBlocks}}

bq. Like the new approach better.

I also like the new code better, but the fact that we can't shortcircuit all the nonsense enumerated above in {{scanBlockPoolSlice}} is a bummer.  The previous approach avoided doing all of this extra work.

As an alternative, we could propagate a "please wake me up at time T" up from BlockPoolSliceScanner to DataBlockScanner#run and adjust the sleep time there, accordingly.  If all threadpools continue to have work to do, then preserve the existing 5-second sleep; if all threadpools are done working then DataBlockScanner could go to sleep for much longer., bq. Let's rename "cleanUp" to something like "rollVerificationLog"
Renamed.
bq. How about defining a constant (with package protection) to use in DataBlockScanner's sleep call and your test.
Excellent suggestion, done.
bq. interation
fixed.
bq. It looks like the following code in BlockPoolSliceScanner#scan was intended to regular the interval
The logic is quite tricky, and in the interest of stability I decided not to wholly refactor this code.  We cannot unconditionally call {{startNewPeriod}} at the beginning of {{scan}} because we may be entering partway through a period.  We have to conditionally call startNewPeriod inside the while loop in {{scan}} because it's possible we will be looping when a period expires.
So I went back to my previous approach, of testing {{now < currentPeriodStart+scanPeriod}} in scanBlockPoolSlice.  But with the renaming of {{cleanUp}} to {{rollVerificationLogs}} it's much more obvious what is going on.

New patch hdfs-3828-2.txt attached., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12542359/hdfs-3828-2.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    -1 findbugs.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.TestPersistBlocks

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3094//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/3094//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3094//console

This message is automatically generated., Agree this approach is best for now. Please file a jira for the proposed refactoring outlining the issues it addresses with the current approach (eg that we do unnecessary work if we finish the scan w/in the period).

- Per the findbugs warnning I'd pull your new check in scanBlockPoolSlice out to a synchronized method (eg workRemainingInCurrentPeriod)
- DataBlockScanner#run should use SLEEP_PERIOD_MS (could use in getNextBPScanner as well, though it and waitForInit aren't part of the "period")
- In getTotalScans rather than throw IOE if given a bpid w/o a scanner I believe this should be an assert (we should always have a scanner for a block pool if we've enbabled scanning, which we have if we're in DataBlockScanner)
, bq. Per the findbugs warnning I'd pull your new check in scanBlockPoolSlice out to a synchronized method (eg workRemainingInCurrentPeriod)
Done.
bq. DataBlockScanner#run should use SLEEP_PERIOD_MS
done.
bq. In getTotalScans rather than throw IOE if given a bpid w/o a scanner I believe this should be an assert (we should always have a scanner for a block pool if we've enbabled scanning, which we have if we're in DataBlockScanner)
There are at least 6 similar tests, and one of them is:
{code}
 88       BlockPoolSliceScanner bpScanner = getNextBPScanner(currentBpId);
 89       if (bpScanner == null) {
 90         // Possible if thread is interrupted
{code}
so I'm inclined to keep it as is; making one of these tests into an assert seems jarring to me., -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12543965/hdfs-3828-3.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.server.blockmanagement.TestBlocksWithNotEnoughRacks

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3153//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3153//console

This message is automatically generated., +1 latest patch is good to go.  test failure is unrelated.

bq. so I'm inclined to keep it as is; making one of these tests into an assert seems jarring to me.

assertions aren't jarring if you expect the assertion to hold. Do you agree that the invariant (that we should never get a scanner for a block pool with no scanner) should hold? If yes please file a follow on jira to address this case and the other uses (where the invariant might hold as well). If not, then note that printBlockReport and getNextBPScanner do *not* check for null so they will NPE and we should fix them. Also, looks like the test checks the return value to see if the scanners are initialized yet. Either way we can handle it in a separate jira.

Also per my previous comment please file the jira for the proposed refactoring., Integrated in Hadoop-Hdfs-trunk-Commit #2754 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Commit/2754/])
    HDFS-3828. Block Scanner rescans blocks too frequently. Contributed by Andy Isaacson (Revision 1381472)

     Result = SUCCESS
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1381472
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataBlockScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestMultipleNNDataBlockScanner.java
, Integrated in Hadoop-Common-trunk-Commit #2691 (See [https://builds.apache.org/job/Hadoop-Common-trunk-Commit/2691/])
    HDFS-3828. Block Scanner rescans blocks too frequently. Contributed by Andy Isaacson (Revision 1381472)

     Result = SUCCESS
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1381472
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataBlockScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestMultipleNNDataBlockScanner.java
, I've committed this to trunk and branch-2 (required merging HDFS-3040). Looks like branch-0.23 will need more merges so holding off on that for now. , Integrated in Hadoop-Mapreduce-trunk-Commit #2715 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Commit/2715/])
    HDFS-3828. Block Scanner rescans blocks too frequently. Contributed by Andy Isaacson (Revision 1381472)

     Result = FAILURE
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1381472
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataBlockScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestMultipleNNDataBlockScanner.java
, Integrated in Hadoop-Hdfs-trunk #1157 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1157/])
    HDFS-3828. Block Scanner rescans blocks too frequently. Contributed by Andy Isaacson (Revision 1381472)

     Result = FAILURE
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1381472
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataBlockScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestMultipleNNDataBlockScanner.java
, Integrated in Hadoop-Mapreduce-trunk #1188 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1188/])
    HDFS-3828. Block Scanner rescans blocks too frequently. Contributed by Andy Isaacson (Revision 1381472)

     Result = ABORTED
eli : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1381472
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BlockPoolSliceScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataBlockScanner.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestMultipleNNDataBlockScanner.java
, I noticed that TestDatanodeBlockScanner is timing out after the commit., bq. I noticed that TestDatanodeBlockScanner is timing out after the commit.

Thanks for pointing this out, Kihwal. I'm looking into the failure now., TestDatanodeBlockScanner did not run as part of the precommit build. It's under o.a.h.hdfs. Would have it run if it was under o.a.h.hdfs.datanode? If so, we should move it., I need this fix in 0.23 branch, bq. TestDatanodeBlockScanner did not run as part of the precommit build. It's under o.a.h.hdfs. Would have it run if it was under o.a.h.hdfs.datanode? If so, we should move it.

I agree, this test should be validated and run as part of precommit.  I've opened HDFS-3902 to track the test regression, could you add the comment there regarding moving the test?, bq. I need this fix in 0.23 branch

As Eli noted above,

bq. Looks like branch-0.23 will need more merges so holding off on that for now.

I tried to merge this patch to branch-0.23 and it was not an easy merge., bq. assertions aren't jarring if you expect the assertion to hold. Do you agree that the invariant (that we should never get a scanner for a block pool with no scanner) should hold? If yes please file a follow on jira to address this case and the other uses (where the invariant might hold as well). If not, then note that printBlockReport and getNextBPScanner do not check for null so they will NPE and we should fix them. Also, looks like the test checks the return value to see if the scanners are initialized yet. Either way we can handle it in a separate jira.

I've opened HDFS-3913 to track the refactoring and this test cleanup., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12543965/hdfs-3828-3.txt
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/5974//console

This message is automatically generated., Since this patch has already been merged to trunk and branch 2, is this patch still needed in 0.23? If not, can we close this issue?, [~adi2] Can this issue be closed for 0.23 since it has been merged to trunk and branch-2?, [~adi2] and [~eli]

I am working through the backlog of 0.23 issues. Since the patch for this issue has been merged to trunk and branch-2, can we close this JIRA? I don't think it is needed for branch 23.

Please comment by Friday, April 25

, Fix was merged into branch-2 and into trunk. This issue will not be merged into branch-0.23. If this issue needs to be merged back into branch-0.23, please reopen this JIRA.]