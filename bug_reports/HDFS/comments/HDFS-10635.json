[Chen, before you start this, wait until HADOOP-13371 is done, or at least have a patch up. There's enough common code that you can cut out all the equals checks from every test, leaving something much more minimal where you just provide the pattern, the files and the lists of indexes in the matchedPath values:

{code}
  @Test
  public void testNestedCurlyBracket() throws Throwable {
    String[] files = {
        userDir + "/a.abcxx",
        userDir + "/a.abdxy",
        userDir + "/a.hlp",
        userDir + "/a.jhyy"
    };
    assertMatchOperation(userDir + "/a.{ab{c,d},jh}??", files, 0, 1, 3);
  }

  public Path[] assertMatchOperation(String pattern,
      String[] files,
      int... matchIndices)
      throws IOException {
    Path[] matchedPaths = prepareTesting(pattern, files);
    int expectedLength = matchIndices.length;
    StringBuilder builder = new StringBuilder(
        expectedLength * 128);
    builder.append("Expected Paths\n");
    for (int index : matchIndices) {
      if (index < path.length) {
        builder.append(
            String.format("  [%d] %s\n", index, path[index]));
      }
    }
    Joiner j = Joiner.on("\n  ");
    builder.append("\nMatched paths:\n  ");
    j.appendTo(builder, matchedPaths);
    assertEquals(builder.toString(), expectedLength, matchedPaths.length);
    for (int i = 0; i < matchedPaths.length; i++) {
      int expectedIndex = matchIndices[i];
      Path expectedPath = path[expectedIndex];
      assertEquals(String.format("Element %d: in %s", i, builder.toString()),
          expectedPath, matchedPaths[i]);
    }
    return matchedPaths;
  }
{code}
, Thanks Steve, I'll keep an eye on that for now then.]