[Proposal:
Redundant minor internal blocks contribute very little to data reliability. We invalidate them aggressively so that Repl checking can identify them as under-replicated. So BlockManager can trigger block recovery ASAP.
To trigger block recovery, BlockManager need twice Repl checking.

The first Repl checking:
addStoredBlock(..)
-->Repl checking
-->processOverReplicatedBlocks(..)
-->addToInvalidates(..)

The second Repl checking:
The DN sends IBR, reports the block got deleted.
-->updateNeedReplications(..)
-->Repl checking, this time the blockGroup becomes under-replicated

Uploaded 00 patch., Thanks for the fix, Walter! The patch looks good to me overall. Some comments:
# We can put the following conditions into a single function
{code}
+    if (numCurrentReplica > fileReplication
+        || (storedBlock.isStriped() && numCurrentReplica == fileReplication
+        && hasOverReplicatedLiveInternalBlock(storedBlock))) {
{code}
# For {{hasOverReplicatedLiveInternalBlock}}, maybe we only need to check {{BlockInfoStriped#triplets}} or {{indices}}. Currently all the redundant internal replicas start from index 9 in triplets/indices. Maybe we can define a function inside of {{BlockInfoStriped}}, which utilizes this logic to check if any internal block has redundant replicas. Then {{hasOverReplicatedLiveInternalBlock}} can call this function to check., {{hasOverReplicatedLiveInternalBlock}} focuses on live replicas.
bq. For hasOverReplicatedLiveInternalBlock, maybe we only need to check BlockInfoStriped#triplets or indices. Currently all the redundant internal replicas start from index 9 in triplets/indices.
The method is not faster if there's corrupted/decommission replicas. The method is faster in most cases. I think it's worth doing. I moved HDFS-8501 to HDFS-7285 which is requied.
Thanks Jing for the great idea.]