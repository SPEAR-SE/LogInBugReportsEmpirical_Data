[This seems like a duplicate of HDFS-4504., I think the issue is not the same as HDFS-4504. In the my case, 
  public synchronized void close() throws IOException {
    if (closed) {  // <---- it will enter this branch in my case
      IOException e = lastException;
      if (e == null)
        return;
      else
        throw e;
    }
   ......
  }, bad format in previous reply.  

  public synchronized void close() throws IOException {
    if (closed) {  // <---- it will enter this branch in my case
      IOException e = lastException;
      if (e == null)
        return;
      else
        throw e;
    }
    ......
  }, bad format in previous reply.  
{{
  public synchronized void close() throws IOException {
    if (closed) {  // <---- it will enter this branch in my case
      IOException e = lastException;
      if (e == null)
        return;
      else
        throw e;
    }
    ......
  }
}}, bad format in previous reply.  
{code:title=DFSOutputStream.java}
  public synchronized void close() throws IOException {
    if (closed) {  // <---- it will enter this branch in my case
      IOException e = lastException;
      if (e == null)
        return;
      else
        throw e;
    }
    ......
  }
{code}, It looks like this was fixed by HDFS-7854, which separated out the {{DataStreamer}} class from the {{DFSInputStream}} class.  As part of that refactoring, {{DataStreamer#closeStream}} no longer closed the stream as a whole when it closed.]