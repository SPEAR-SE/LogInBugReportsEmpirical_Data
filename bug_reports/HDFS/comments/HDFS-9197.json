[It seems that you can avoid this problem by changing Dfs.namenode.access time.precision.  I'm not sure what change we could make here since atime has the semantics you describe., [~cmccabe], what I'm proposing is creating a configuration parameter, which specifies whether or not to create a FileDiff for a snapshot based on *atime* changes, otherwise there is pernicious growth of the namenode metadata, which is not even obvious in Hadoop >= 2.5, as specified in [HDFS-9841|https://issues.apache.org/jira/browse/HDFS-9841]. Access time is enabled by default in Hadoop, but not obviously so since you have to go through the API to see it, i.e. *hdfs dfs -ls* does not show it.

Alternatively, *dfs.namenode.access time.precision* should be set to 0 by default, therefore disabling access time, so that people don't run into issues if they don't use it., Hi [~axenol], I definitely agree that we should be able to see these additional fields being added via snapshotDiff.  If we can't, that's frustrating.

"Access time" is a very frustrating feature.  As you noticed, it essentially turns every read operation into a write operation.  This has a lot of bad effects... on local filesystems, it generates lots of writes to disk just from reading files.  It complicates the implementation of distributed filesystems.  Clearly, it also increases snapshot sizes since writes need to be recorded in snapshots.

These bad things are all fundamental to atime.  This is one reason why many sysadmins always run with "noatime."  It's why Linux distributions ship with "relatime" (reduced granularity atime) by default.  HDFS's {{dfs.namenode.access.time.precision}} configuration key is similar.  We could consider changing {{dfs.namenode.access time.precision}} to 0 by default in Hadoop 3.0, since most would consider it an incompatible change., Thanks for your input, [~cmccabe], this sounds reasonable.]