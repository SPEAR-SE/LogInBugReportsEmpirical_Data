[Two things:
- according to this piece of code of {{DFSAdmin}} class
{noformat}
    SetSpaceQuotaCommand(String[] args, int pos, FileSystem fs) {
      super(fs);
      CommandFormat c = new CommandFormat(NAME, 2, Integer.MAX_VALUE);
      List<String> parameters = c.parse(args, pos);
{noformat}
the max value is {{Integer.MAX_VALUE}}
- {{parse}} is throwing {{IlligalArgumentException}} if max value is topped. I wonder why this isn't happening, Integer.MAX_VALUE is a bug.  See HDFS-46., I have put the Patch for HDFS-46. Since the Data type is long for nsQuota, increased it to Long.MAX_VALUE.

I will check the above two cases here.
I think we need to increase it to Long.MAX_VALUE here as well. no?
{code}
CommandFormat c = new CommandFormat(NAME, 2, Integer.MAX_VALUE);
{code}
in DFSAdmin class., Here one more problem is CommandFormat is taking the min rang and max ranges as int values.

I am planning it to increase it to long values.

Changing the below code
{code}
public CommandFormat(int min, int max, String ... possibleOpt) {
{code}
to 
{code}
public CommandFormat(long min, long max, String ... possibleOpt) {
{code}

Do you think any issues with it?

{quote}
â– parse is throwing IlligalArgumentException if max value is topped. I wonder why this isn't happening
{quote}
CommandFormat bevavior is that, it will take min and max ranges, if they are not in that boundary then it will throw exception.

Thanks
Uma, Ignore my above comment.
I just noticed that, min max ranges are for number of arguments.
  /**
   * Simple parsing of command line arguments
   * @param min minimum arguments required
   * @param max maximum arguments permitted

I will investigate more on this.
]