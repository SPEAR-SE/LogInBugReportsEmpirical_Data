[Nice find [~xkrogen]. Yes I think we can remove those non-deterministic checks., Your proposal sounds reasonable, although I wonder what is actually causing the long lock in your case.  Do you have snapshots? We don't. We have long getContentSummary calls made periodically and they can take close to a minute. But we do not hit this kind of long locking problems.  Even with unfair locking, read locking is blocked after a while. I.e. the lock is not indefinitely unfair even in the unfair mode. I believe as soon as a writer arrives, no more readers are allowed. So it is either lock is not relinquished for another reason or there are concurrent long read operations.  If the former is the case, the proposed change may not make any difference. The change may help if the concurrent long reads are all getContentSummary calls.  In any case, I think it is worth a try. It will be great if you can try it on one of your clusters and prove it helps., Thanks [~arpitagarwal] and [~kihwal] for taking a look!
{quote}
Do you have snapshots? We don't.
{quote}
No snapshots!

{quote}
I wonder what is actually causing the long lock in your case.
...
We have long getContentSummary calls made periodically and they can take close to a minute. But we do not hit this kind of long locking problems.
{quote}
The directory in question had around 100M entries. But, you make good points. To describe more fully the situation under which we observed this behavior:
* There was a job periodically calling {{getContentSummary}} on this huge directory. No long lock warnings were seen.
* The NameNode was restarted.
* Now, consistently, every {{contentSummary}} call on that directory caused the lock hold warning.
* The NameNode was restarted again.
* The long lock holds were no longer seen.

So I agree that it is an odd case, and probably only triggered under certain circumstances...

{quote}The change may help if the concurrent long reads are all getContentSummary calls.{quote}
Are there other long read operations besides {{getContentSummary}}? {{listStatus}} is already bounded by an even smaller limit.


I'll see if I can replicate this more deterministically to test the efficacy of the patch, perhaps with Dynamometer...]