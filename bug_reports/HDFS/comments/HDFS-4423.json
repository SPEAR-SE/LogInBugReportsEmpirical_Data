[Thank you for the detailed write-up, [~chenfolin].  I have one additional question.  You mentioned an exception causing {{NameNode}} to shutdown during checkpoint after writing latest name checkpoint time, but before writing latest edits checkpoint time.  Do you have details on that exception?  Was that exception related to this bug, or was it something unrelated that just exposed this problem in the {{loadFSImage}} logic?

Your assessment about the call to {{FSDirectory#updateCountForINodeWithQuota}} looks correct.  I'm thinking that we should move that call out of {{FSImage#loadFSEdits}} and into {{FSImage#loadFSImage}}, so that the end of {{loadFSImage}} would look like this:

{code}
boolean loadFSImage(MetaRecoveryContext recovery) throws IOException {
...    
  // Load latest edits
  if (latestNameCheckpointTime > latestEditsCheckpointTime)
    // the image is already current, discard edits
    needToSave |= true;
  else // latestNameCheckpointTime == latestEditsCheckpointTime
    needToSave |= (loadFSEdits(latestEditsSD, recovery) > 0);
    
  // update the counts.
  FSNamesystem.getFSNamesystem().dir.updateCountForINodeWithQuota();    
  return needToSave;
}
{code}

Moving the call there would help guarantee that it always happens.
, I'm uploading a patch that's similar to the original suggestion from [~chenfolin].

When I tried the approach I suggested in my last comment, it didn't work.  The reason is that {{SecondaryNameNode}} calls directly in to {{FSImage#loadFSEdits}} and depends on that method to call {{FSNamesystem.getFSNamesystem().dir.updateCountForINodeWithQuota()}} by side effect.  It's a less impactful change to add the call in the if block for when the image is already current.

I've also added a test that simulates the error condition by running a cluster with separate directories for image and edits, forcing the fstime file for edits to contain 0, and then going through a series of restarts/checkpoints to make sure that it can still load the merged image.  Before I applied the change in {{FSImage}}, this test would fail with {{EOFException}} on the last restart, similar to what is described in the bug report.  After I applied the fix in {{FSImage}}, the test passed.
, Here is the output from test-patch.  Regarding the Findbugs warnings, this is the exact same output I get from using a no-op patch file (a 0-byte file as input to test-patch.sh) applied to branch-1.  There are no new warnings related to this patch.  Perhaps we need to investigate if a prior patch accidentally introduced new warnings.

     [exec] -1 overall.  
     [exec] 
     [exec]     +1 @author.  The patch does not contain any @author tags.
     [exec] 
     [exec]     +1 tests included.  The patch appears to include 4 new or modified tests.
     [exec] 
     [exec]     +1 javadoc.  The javadoc tool did not generate any warning messages.
     [exec] 
     [exec]     +1 javac.  The applied patch does not increase the total number of javac compiler warnings.
     [exec] 
     [exec]     -1 findbugs.  The patch appears to introduce 12 new Findbugs (version 1.3.9) warnings.
, +1 patch looks good., I have run the tests with the patch.  All tests passed except TestNetUtils but it was due to my local network environment but not related to the patch., I have committed this.  Thanks, Chris!, Thank you, Nicholas!  From my own test run, the only failure I saw was {{TestJvmReuse}}.  This test has been failing consistently for me on branch-1, even before this patch.  I will file a separate jira for follow-up on that.
, Closed upon successful release of 1.1.2.]