[Hi Vinay. I agree it's a bug if the SBN is purging edits from the shared storage. However, I don't follow the scenario you mentioned:

bq. >> After some time Active NN is restarted and StandBy NN switched to Active.
bq. Now current Standby not able to load any edits from shared storage, as expected edits are not present in shared storage. Its keep running idle.

By "current Standby", do you mean the one that was Active prior to the restart?

Just to clarify, there was no permanent data loss here - just that you had to manually copy one of the checkpoints from the new Active over to the new Standby, and restart the new Standby before you could resynchronize?, By "current Standby", do you mean the one that was Active prior to the restart?

lwr:yes

Just to clarify, there was no permanent data loss here - just that you had to manually copy one of the checkpoints from the new Active over to the new Standby, and restart the new Standby before you could resynchronize?

lwrï¼šthis is only manual model.we hope namenode auto restoration itself, {quote}Just to clarify, there was no permanent data loss here - just that you had to manually copy one of the checkpoints from the new Active over to the new Standby, and restart the new Standby before you could resynchronize{quote}
Yes, I agree there are no permanent dataloss. 
, Please correct me if I misunderstand this issue, but it seems the title of this JIRA isn't accurate. If I understand the scenario described, the standby NN never purged any files from the shared storage - only the active did that. The trouble is that this resulted in the standby not having sufficient transactions in the shared edits dir to be able to become active, since its fsimage was so out of date.

If my understanding is correct, let's please change the title., the standby NN never purged any files from the shared storage - only the active did that

lwr:this isn't accurate.standby nn purged editlog from the share storage in StandbyCheckpointer. i will changed it to only the active did that for this issue, bq. lwr:this isn't accurate.standby nn purged editlog from the share storage in StandbyCheckpointer. i will changed it to only the active did that for this issue

I'm sorry, but I still don't understand. Are you saying that the Standby NN actually performed the deletions of files from the shared edits dir? Or that it triggered the removals at checkpoint time? Can you perhaps point to the line(s) of code you're referring to in the StandbyCheckpointer?, Hi Aaron,
Yes, its the standby who purged the edits from shared storage. I will describe it as below.

1. NN1 was Active and NN2 was Standby.
2. NN2 was doing the checkpoint every one hour. Every time saving namespace was success, but uploading to Active was failing due to some security issue. This was continued for long time. As part of {{saveNameSpace()}} in NN2, edits from shared storage purged, which are not present in NN1's fsimage. At this time Active was having old fsimage itself, but it was running.
3. After some time, NN1 got restarted, and NN2 became Active.
4. The current Standby NN1, is having out of date fsimage and there is a gap between fsimage and edits in shared storage. So NN1 cannot to tailing/checkpoint.


My point is, Standby should not do any modifications to shared storage., Aha, yep, got it. Thanks a lot for the explanation. I agree with your analysis., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12555860/hdfs-4238.txt
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3594//console

This message is automatically generated., Woops, sorry, previous patch did not apply correctly. This one should apply on trunk., The latest patch looks good to me. +1 pending Jenkins., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12555873/hdfs-4238.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3596//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3596//console

This message is automatically generated., Thanks Todd, patch looks good to me. +1., Committed to trunk and branch. Thanks for reporting this issue, and for the reviews., Integrated in Hadoop-trunk-Commit #3088 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3088/])
    HDFS-4238. Standby namenode should not do purging of shared storage edits. Contributed by Todd Lipcon. (Revision 1417651)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1417651
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/NameNodeAdapter.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestStandbyCheckpoints.java
, Integrated in Hadoop-Hdfs-trunk #1246 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1246/])
    HDFS-4238. Standby namenode should not do purging of shared storage edits. Contributed by Todd Lipcon. (Revision 1417651)

     Result = FAILURE
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1417651
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/NameNodeAdapter.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestStandbyCheckpoints.java
, Integrated in Hadoop-Mapreduce-trunk #1277 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1277/])
    HDFS-4238. Standby namenode should not do purging of shared storage edits. Contributed by Todd Lipcon. (Revision 1417651)

     Result = SUCCESS
todd : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1417651
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/NameNodeAdapter.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/ha/TestStandbyCheckpoints.java
]