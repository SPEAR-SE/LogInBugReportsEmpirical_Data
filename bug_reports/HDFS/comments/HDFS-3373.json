[Nicholas had some ideas about this in HDFS-3359. Quoting here:
{quote}
I think we should either

- change it from per DFSClient to per DFSInputStream; or
- change it to a global static cache (like what we did for LeaseRenewer.)
{quote}

Brainstorming: maybe another option would be to have a timer thread which periodically wakes up and scans SocketCaches for old sockets. If any socket has been sitting around longer than a minute or two, we can close it proactively., Is this a blocker for 2.0 given HDFS-3359 has been committed to 2.0?, No, I don't think so, because we also now have a fix on the DN side which closes the sockets. So it might result in TIME_WAIT or FIN_WAIT sockets on the client, but shouldn't impact DNs anymore. Unless someone has seen this to be a production issue with 2.0, it shouldn't be considered blocker., On a related tangent, a similar situation causes the NMs to leak sockets due to unclosed {{DistributedFileSystems}}.  Each one holds a {{DFSClient}} that holds a cache with at least 1 CLOSE_WAIT socket.  The socket gets closed if/when the {{DFSClient}} looks for a cached socket, but it gets replaced with another CLOSE_WAIT socket.

With security enabled, a NM leaks 1 socket/user.  With security disabled, a NM will leak *1 socket/job* since the UGI always appears different which causes multiple instances of the same dfs to pile up in the fs cache.

The UGI/fs-cache is a separate issue, but there should probably be something like another thread that scans the cached sockets to remove closed ones.  Otherwise {{FileContext}} will be ill-suited for a daemon that needs to create more than one context since it too will leak sockets., Attaching a branch-0.23 based patch. I will upload a trunk/branch2 patch in the next day or two., The approach in this patch is based on the suggestions from Nicholas and Todd:
- a global static cache to store socket caches
- a thread to expire cache entries in the cache, A related issue we need to consider, although tangental is that inability to {{close}} doesn't give a fs a chance to cleanup.  Ex. closing streams and deleting temp files.  I think there might be another jira for that?, Daryn,
I am not able to follow - Inability to close fs is not related to this JIRA because this JIRA is related to caching sockets when an input stream is closed. If I misunderstood your comment, could you elaborate a little more on what you meant?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12542653/HDFS-3373.trunk.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.TestConnCache
                  org.apache.hadoop.hdfs.TestHftpDelegationToken

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3101//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/3101//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3101//console

This message is automatically generated., TestConnCache failure is related to this JIRA. I had moved testDisableCache() from that test to another test file because now it is not possible to change cache config per DFS. 

TestHftpDelegationToken is unrelated to this patch and has been failing in other builds as well.

Attaching a patch with testDisableCache() removed from TestConnCache to a new file, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12542795/HDFS-3373.trunk.patch.1
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:

                  org.apache.hadoop.hdfs.TestHftpDelegationToken

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3110//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/3110//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3110//console

This message is automatically generated., Hi John, thanks for working on this.  Some comments on the patch:

- In SocketCache.getInstance(..),
-* If SocketCache is already initialized (i.e. isInitedOnce == true), then the parameters c and e will be igored silently.  Would it be a problem?
-* If it throws IllegalStateException, should isInitedOnce not be set to true?
-* typo: "initialzied" => "initialized"

- In SocketCache.evictExpired(..),
-* remove "throws IOException" since it does not throw it.
-* remove synchronized(this) since it is already synchronized.

- In SocketCache, add createTime to SocketAndStreams and remove SocketProp.

- In SocketCache.put(..), move "Preconditions.checkNotNull(sock);" to the very beginning.


, 
Thanks for looking into the patch Nicholas.

{quote}
- In SocketCache.getInstance(..),
-* If SocketCache is already initialized (i.e. isInitedOnce == true), then the parameters c and e will be igored silently.  Would it be a problem?
{quote}
This was done on purpose to avoid complications. I thought it would be better to keep it simple and allow only one valid setting of c and e.
{quote}
-* If it throws IllegalStateException, should isInitedOnce not be set to true?
-* typo: "initialzied" => "initialized"

- In SocketCache.evictExpired(..),
-* remove "throws IOException" since it does not throw it.
-* remove synchronized(this) since it is already synchronized.

- In SocketCache, add createTime to SocketAndStreams and remove SocketProp.

- In SocketCache.put(..), move "Preconditions.checkNotNull(sock);" to the very beginning.
{quote}
Thanks for these comments - will upload a patch incorporating these soon., {quote}
-* If SocketCache is already initialized (i.e. isInitedOnce == true), then the parameters c and e will be igored silently.  Would it be a problem?
{quote}

I suppose you actually meant if we should LOG a message in cases where someone tries to change the value after it has been set once? I agree that it is a good idea. , Attaching a new patch with Nicholas's comment taken into consideration, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12545606/HDFS-3373.trunk.patch.2
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3202//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HDFS-Build/3202//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3202//console

This message is automatically generated., Canceling patch to fix findbugs issue., Cancelling patch and uploading another file to trigger patch test run, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12546297/HDFS-3373.trunk.patch.3
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3227//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3227//console

This message is automatically generated., {code}
+  private synchronized void evictExpired(long expiryPeriod) 
+      throws IOException {
{code}
evictExpired(..)  still has "throws IOException" but IOException is never thrown in the code.  Patch looks good other than that., Thanks Nicholas and sorry for overlooking that review comment in the previous patches.

Attaching a new patch that removes the IOException., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12546571/HDFS-3373.trunk.patch.4
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3232//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3232//console

This message is automatically generated., +1 patch looks good., I have committed this.  Thanks, John!, Integrated in Hadoop-Common-trunk-Commit #2775 (See [https://builds.apache.org/job/Hadoop-Common-trunk-Commit/2775/])
    HDFS-3373. Change DFSClient input stream socket cache to global static and add a thread to cleanup expired cache entries.  Contributed by John George (Revision 1390466)

     Result = SUCCESS
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1390466
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestConnCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestSocketCache.java
, Integrated in Hadoop-Hdfs-trunk-Commit #2838 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Commit/2838/])
    HDFS-3373. Change DFSClient input stream socket cache to global static and add a thread to cleanup expired cache entries.  Contributed by John George (Revision 1390466)

     Result = SUCCESS
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1390466
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestConnCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestSocketCache.java
, Integrated in Hadoop-Mapreduce-trunk-Commit #2797 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Commit/2797/])
    HDFS-3373. Change DFSClient input stream socket cache to global static and add a thread to cleanup expired cache entries.  Contributed by John George (Revision 1390466)

     Result = FAILURE
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1390466
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestConnCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestSocketCache.java
, Integrated in Hadoop-Hdfs-trunk #1178 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1178/])
    HDFS-3373. Change DFSClient input stream socket cache to global static and add a thread to cleanup expired cache entries.  Contributed by John George (Revision 1390466)

     Result = SUCCESS
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1390466
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestConnCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestSocketCache.java
, Integrated in Hadoop-Mapreduce-trunk #1209 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1209/])
    HDFS-3373. Change DFSClient input stream socket cache to global static and add a thread to cleanup expired cache entries.  Contributed by John George (Revision 1390466)

     Result = SUCCESS
szetszwo : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1390466
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestConnCache.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestSocketCache.java
, Thanks Nicholas., Attaching a branch 23 patch based on Nicholas's review for the patch for trunk, Reopening for branch 23, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12546899/HDFS-3373.branch23.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3246//console

This message is automatically generated., The 0.23 patch looks like a fairly straight forward port of the trunk version, but what happened to hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestSocketCache.java?, In 2.0, setting cache capacity to 0 disabled the cache, this (along with some other changes) was not in 0.23. TestSocketCache was a one test file to test if cache disabling worked. Since, 0.23 does not have that, I did not port the test., Makes since.  Because it is such a straight forward patch I feel OK checking the code in.  Thanks for the work John., I pulled this into branch-0.23 too, Integrated in Hadoop-Hdfs-0.23-Build #389 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/389/])
    HDFS-3373. FileContext HDFS implementation can leak socket caches (John George via bobby) (Revision 1391542)

     Result = UNSTABLE
bobby : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1391542
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSConfigKeys.java
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/SocketCache.java
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestConnCache.java
* /hadoop/common/branches/branch-0.23/hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDistributedFileSystem.java
]