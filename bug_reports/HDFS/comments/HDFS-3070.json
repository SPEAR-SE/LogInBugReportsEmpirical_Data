[Woops, the first screenshot shows that 2 nodes are decommissioned. After recommissioning them and attempting to run hdfs balancer, the nodes still don't become balanced and the balancer claims to complete ~100 ms., > 12/03/08 10:10:32 INFO balancer.Balancer: namenodes = []

The namenode lists is empty.  You have to set dfs.namenode.servicerpc-address., Stephen,
What are dfs.namenode.rpc-address and servicerpc-address set to in the configs?

I suspect at least the 1st is set so it might be a bug in the method the balancer uses to determine the namenodes (eg doesn't work for a federated or HA conf)., Eli, servicerpc-address was not configured in hdfs-site.xml.

dfs.namenode.rpc-address:
{noformat}
  <property>
    <name>dfs.namenode.rpc-address.ha-nn-uri.nn1</name>
    <value>styx01.sf.cloudera.com:12020</value>
  </property>
  <property>
    <name>dfs.namenode.rpc-address.ha-nn-uri.nn2</name>
    <value>styx02.sf.cloudera.com:12020</value>
  </property>
{noformat}
, If the lack of having servicerpc-address configured caused this, then I would still consider that a bug. The balancer should work even if only the normal NN RPC address is configured., Yea sounds like a bug in the method the balancer uses to determine the namenodes., Sigh. Looks like this problem is the classic "hdfs-site.xml happens to never get loaded because HdfsConfiguration is never statically initialized in the JVM" issue. The tests don't catch this because MiniDFSCluster sets up the configuration explicitly, without hdfs-site.xml having to get loaded.

Here's a patch which addresses the issue. I tested this manually and confirmed that without the fix, the balancer won't run, but with the fix it runs just fine. Sample output:

{noformat}
12/03/30 19:06:08 INFO balancer.Balancer: namenodes = [hdfs://ha-nn-uri]
12/03/30 19:06:08 INFO balancer.Balancer: p         = Balancer.Parameters[BalancingPolicy.Node, threshold=10.0]
Time Stamp               Iteration#  Bytes Already Moved  Bytes Left To Move  Bytes Being Moved
12/03/30 19:06:09 INFO net.NetworkTopology: Adding a new node: /default-rack/172.29.20.100:50010
12/03/30 19:06:09 INFO balancer.Balancer: 0 over-utilized: []
12/03/30 19:06:09 INFO balancer.Balancer: 0 underutilized: []
The cluster is balanced. Exiting...
Balancing took 1.255 seconds
{noformat}, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12520710/HDFS-3070.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    -1 tests included.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in .

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2136//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2136//console

This message is automatically generated., Aaron, You are right. We have seen this yesterday and realized it. :-)
Before Federation we might not have the requirement of loading properties from hdfs-site.xml in balancer, some might have proceeded with default values set in the code. Becaus eConfiguration can load core-site.xml files.

I agree with the fix that creating the HdfsConfiguration class and passing.

To catch this bug in tests itself, I would suggest to call the runBalancerCLI( expose new API from Balancer with package scope) and make the run method private.
{code}
static int runBalancerCLI(String[] args) throws Exception {
    return ToolRunner.run(null, new Cli(), args); //Here you have to fix
  }
{code}

let main method and all tests call this function.


output from tests :

{quote}
2012-03-31 12:19:47,340 INFO  balancer.Balancer (Balancer.java:parse(1508)) - Using a threshold of 10.0
2012-03-31 12:19:47,340 INFO  balancer.Balancer (Balancer.java:run(1387)) - namenodes = []
2012-03-31 12:19:47,340 INFO  balancer.Balancer (Balancer.java:run(1388)) - p         = Balancer.Parameters[BalancingPolicy.Node, threshold=10.0]
Time Stamp               Iteration#  Bytes Already Moved  Bytes Left To Move  Bytes Being Moved
Balancing took 1.0 milliseconds
2012-03-31 12:19:47,341 INFO  balancer.Balancer (TestBalancerWithMultipleNameNodes.java:runBalancer(164)) - BALANCER 2
2012-03-31 12:19:47,341 INFO  balancer.Balancer (TestBalancerWithMultipleNameNodes.java:wait(132)) - WAIT expectedUsedSpace=350, expectedTotalSpace=1000
2012-03-31 12:19:47,341 INFO  balancer.Balancer (TestBalancerWithMultipleNameNodes.java:runBalancer(166)) - BALANCER 3
2012-03-31 12:19:47,342 WARN  balancer.Balancer (TestBalancerWithMultipleNameNodes.java:runBalancer(183)) - datanodes[0]: getDfsUsed()=60, getCapacity()=500
2012-03-31 12:19:47,343 WARN  balancer.Balancer (TestBalancerWithMultipleNameNodes.java:runBalancer(183)) - datanodes[1]: getDfsUsed()=290, getCapacity()=500
2012-03-31 12:19:47,344 WARN  balancer.Balancer (TestBalancerWithMultipleNameNodes.java:runBalancer(200)) - datanodes 1 is not yet balanced: used=290, cap=500, avg=35.0
{quote}

Remove HdfsConfiguration object creation from Balancer Tests. , BTW, could you please edit the issue title?, Hi Uma,

bq. To catch this bug in tests itself, I would suggest to call the runBalancerCLI...

I don't think this will actually expose the bug. The trouble isn't that the object isn't an instance of HdfsConfiguration, but rather that HdfsConfiguration never gets class-loaded and therefore the static initializer that add hdfs-default.xml and hdfs-site.xml as resources never gets called. Another perfectly valid solution would have been to continue to pass "null" for the configuration object, but to call HdfsConfiguration#init() somewhere (anywhere) in the Balancer. So, the only way to write a test that would catch this would be if from the tests we forked a new JVM to run the balancer, and examining the effects. Doing that doesn't seem worth it to me, for something that's such a simple bug.


bq. BTW, could you please edit the issue title?

Good idea. Will do., {quote}
So, the only way to write a test that would catch this would be if from the tests we forked a new JVM to run the balancer, and examining the effects.
{quote}
I remember, in our Jenkins it will spawn separate JVM for each test class. no?

{quote}
Doing that doesn't seem worth it to me, for something that's such a simple bug.{quote} I agree, this is very simple fix. But there is a functional effect.

If we have the test in above suggested way, that would have caught while re-factoring for Federation and introducing the dependency on rpc addresses to start. I am not very much insisting to change. If you feel not required, you can leave it. I won't block, because of simple test change.

+1, +1 to HDFS-3070.patch, looks good, bq. I remember, in our Jenkins it will spawn separate JVM for each test class. no?

True, but if that test class starts a MiniDFSCluster to run the balancer against, then the test won't detect any problem with the balancer, since the MiniDFSCluster will cause HdfsConfiguration to be class-loaded.

Uma, if I'm misunderstanding what you're proposing, perhaps you could post some code to illustrate how this would work? If you do, I'll be sure to review it promptly.

In the mean time, I'm going to go ahead and commit this patch since everyone seems to agree that this will fix the bug., I've just committed this to branch-2 and trunk.

Thanks a lot for the reviews, Uma and Eli., Integrated in Hadoop-Hdfs-trunk-Commit #2033 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Commit/2033/])
    HDFS-3070. HDFS balancer doesn't ensure that hdfs-site.xml is loaded. Contributed by Aaron T. Myers. (Revision 1307841)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1307841
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java
, Integrated in Hadoop-Common-trunk-Commit #1958 (See [https://builds.apache.org/job/Hadoop-Common-trunk-Commit/1958/])
    HDFS-3070. HDFS balancer doesn't ensure that hdfs-site.xml is loaded. Contributed by Aaron T. Myers. (Revision 1307841)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1307841
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java
, Integrated in Hadoop-Mapreduce-trunk-Commit #1971 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Commit/1971/])
    HDFS-3070. HDFS balancer doesn't ensure that hdfs-site.xml is loaded. Contributed by Aaron T. Myers. (Revision 1307841)

     Result = ABORTED
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1307841
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java
, {quote}
True, but if that test class starts a MiniDFSCluster to run the balancer against, then the test won't detect any problem with the balancer, since the MiniDFSCluster will cause HdfsConfiguration to be class-loaded.
{quote}
Yah, True. I agree with you. It's my mistake. Totally forgot about MiniDFSCluster conf loading.

Other question is, it looks like Balancer completely depending on dfs.federation.nameservices right?, bq. Other question is, it looks like Balancer completely depending on dfs.federation.nameservices right?

Nope. Note that DFSUtil#getNameServiceUris also adds URIs for just the straight conf keys, even if they're not suffixed with a nameservice ID., Thanks Aaron,
Recalling the API name (getNameServiceUris), I got doubt from outside(couldn't get chance to look into code, I was outside). Never mind for this silly question. :-)

 I have seen that getNameServiceUris impl about adding URIs for just the straight conf keys in code. Its loading all variable length of keys. No issues., Integrated in Hadoop-Hdfs-trunk #1002 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1002/])
    HDFS-3070. HDFS balancer doesn't ensure that hdfs-site.xml is loaded. Contributed by Aaron T. Myers. (Revision 1307841)

     Result = FAILURE
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1307841
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java
, Integrated in Hadoop-Mapreduce-trunk #1037 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1037/])
    HDFS-3070. HDFS balancer doesn't ensure that hdfs-site.xml is loaded. Contributed by Aaron T. Myers. (Revision 1307841)

     Result = FAILURE
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1307841
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java
, Hi Aaron,

I doubt if we configure only fs.default.name balancer will work?

Configuring fs.default.name is required to ensure backward compatibility with old configurations.


, Hi amith, that does seem to be true, though I'm not sure that it's a strict requirement that we support only setting fs.default.name at this point in time, since the ability to set the NN address via other configuration settings has existed for several releases. My personal opinion is that we should make the NN (and balancer, etc) not ever use fs.default.name as an indicator of the NN service bind address, but rather only as a client-side URI to use when a full FS URI is not given. Ideally we would have a system of deprecation which signals that fs.default.name is being used as the desired bind address when the NN address is configured in no other way, but as it stands our config deprecation system is only able to show warnings deprecating a named key in favor of another key.

Regardless, would you like to open a new JIRA to address this issue, amith?, Thanks Aaron,

I agree with u :)]