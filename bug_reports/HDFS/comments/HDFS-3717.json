[Broken after HDFS-3583, +1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12537699/hdfs-3717.patch.txt
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified test files.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 eclipse:eclipse.  The patch built with eclipse:eclipse.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/2893//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/2893//console

This message is automatically generated., Or if you use Double.POSITIVE_INFINITY then the delta parameter is ignored. I'm not sure if that is better than 0.0 but Double.POSITIVE_INFINITY fixed this for me on our private Jenkins last night., I don't think the use of {{Double.POSITIVE_INFINITY}} is correct. The condition {{(a < Double.POSITIVE_INFINITY)}} is always true for any real double number a.  Similarly, {{(a < Double.NEGATIVE_INFINITY)}} will be false.  By looking at junit4's source, using {{Double.NEGATIVE_INFINITY}} as {{delta}} will work. Probably you actually meant this. But the junit documentation says nothing about it, so I would prefer using 0.0.

{code:title=From Assert.java, junit 4.3}
static public void  [More ...] assertEquals(String message, double expected, double actual, double delta) {
  if (Double.compare(expected, actual) == 0)
    return;
  if (!(Math.abs(expected - actual) <= delta))
    failNotEquals(message, new Double(expected), new Double(actual));
}
{code}, Thanks for noticing this, Kihwal.

The patch looks good to me, and I agree that 0.0 seems to make the most sense for the value of the delta.

One thing I don't understand, though - why didn't this test fail during the test-patch run of HDFS-3583? For that matter, this test currently passes when run on my local box, on both trunk and branch-2. Any ideas why this might be?, The JUnit documentation just says that INFINITY (without saying either way the sign) means the delta is ignored. Anyway, just reporting what worked here. Maybe it's wrong. , HDFS-3711 was committed several hours ago and it fixed the issue. Wecan dupe it to HDFS-3711. , Thanks for looking into this, Kihwal. Resolving this JIRA as a duplicate., One note here is that HDFS-3711 uses a small, non-zero value for {{DELTA}}, not 0.0. I chose this because floating point values can vary slightly based on the order of supposedly commutative operations, so doing a straight equality comparison often won't work.]