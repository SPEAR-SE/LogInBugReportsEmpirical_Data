[Here's the failing unit test along with a log of its output., This turns out to be a bit of a different bug/feature. The test case was using fs.close() in order to implicitly close the stream. This caused the stream to flush on close, which is where the errors occurred. Since LeaseChecker.close swallows exceptions, it never threw.

Is there a reason that LeaseChecker.close does not rethrow these exceptions as a MultipleIOException?, Here is a patch that modifies DFSClient.close (really LeaseChecker.close) in order to propagate IOExceptions from closed files.

This is an incompatible change in a way, but I think it matches the semantics people expect. , Is there any value in letting exceptions out of a close?  What will the application do with an exception thrown on a close?, -1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12431749/hdfs-931.txt
  against trunk revision 903906.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: http://hudson.zones.apache.org/hudson/job/Hdfs-Patch-h2.grid.sp2.yahoo.net/107/testReport/
Findbugs warnings: http://hudson.zones.apache.org/hudson/job/Hdfs-Patch-h2.grid.sp2.yahoo.net/107/artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Checkstyle results: http://hudson.zones.apache.org/hudson/job/Hdfs-Patch-h2.grid.sp2.yahoo.net/107/artifact/trunk/build/test/checkstyle-errors.html
Console output: http://hudson.zones.apache.org/hudson/job/Hdfs-Patch-h2.grid.sp2.yahoo.net/107/console

This message is automatically generated., The action must depend on the app. Logging the problem is a common action, but retrying the operation is another possibility., > Is there any value in letting exceptions out of a close? What will the application do with an exception thrown on a close?

The application can know that the data it wrote to the file could be bad and trigger appropriate recovery.  In fact, it is very important that this exception be thrown to the applications instead of silently ignoring it., I'm cancelling patch since the test failures actually all seem to be related to this.

So do people agree on this direction? If so I will work through the test failures.

Also, should we consider this a breaking change? I think so - people might be relying on this behavior (eg using fs.close() in finally blocks and not expecting it to throw)., This could break existing applications in a bad way!, Agreed. Do we dare just break them and put it in the release notes as an incompatible change?

One reason for doing so is that close() already is listed as throwing IOException. So it's not an API change, and in theory people *should* have catch blocks in place., I think we should make this change only in trunk.  Do you have any use case why it needs to be back ported to already released branches?, bq. I think we should make this change only in trunk. Do you have any use case why it needs to be back ported to already released branches? 

I agree. Trunk only in my opinion., Mark this as Incompatible change.]