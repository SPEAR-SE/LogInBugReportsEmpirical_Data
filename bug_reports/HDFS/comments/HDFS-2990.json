[Move the offline image viewer and the offline edit log viewer into the org.apache.hadoop.hdfs.server.namenode package., > ... we can't ruuse a lot of the code from the NameNode without making things public ...

This does not sound a good reason to move the tools to the namenode package.  Otherwise, we will end up with everything in the same package., bq. This does not sound a good reason to move the tools to the namenode package. Otherwise, we will end up with everything in the same package.

Hey Nicholas, do you have an alternative suggestion? Would you be OK with changing a few things in o.a.h.hdfs.server.namenode public that otherwise wouldn't need to be? Certainly having to copy/paste the code would be a real shame., To be honest, I don't see the value add in having the tools in a separate package.  These tools are tied in pretty deeply to the NameNode format.  It's silly to pretend like they're a separate, completely independent module.

As Aaron pointed out, the alternative for us would be making a lot of things public and using @Interface unstable, or similar.  That seems messy to me, which is why I proposed this.  What do you think?, The namenode package has many components for inodes, lease, http, etc.  Image/edit is just one of the components.  It may make more sense to move out the image/edit out.  How about moving all image/edit related classes to a new package?  If it is not easy to do, how about moving the methods you want to use to a new ImageEditUtil class?, The idea of splitting all of the Image and EditLog stuff out into a separate package is interesting.  I don't think it could be done without a lot of refactoring, though.

I do not think that an ImageEditUtil class is the solution.  The classes I'm interested in aren't utilities, they are part of the core of the NameNode.  For example, EditLogInputStream, FSEditLogOp, and so forth.

The current OEV and OIV code duplicates basically all of these core classes, and it's a real code smell.  Whenever something changes, we need to implement it in both parsers, which is silly.  Also any improvements and bugfixes we make to one parser don't improve or bugfix the other, etc.

The end goal here is to have a very minimal OEV that basically just pulls stuff from the EditLogInputStream and prints it.  No parsing, no tokenizing, nothing like that.

Perhaps it is easier just to make the things I want public and use the interface annotations?  It seems to be done in a lot of other places.

I do understand the desire to keep the packages small.  However, sometimes you need more flexibility than the public/pcakage-private/private distinction can give.  I have heard that Java 7 is addressing this issue, but unfortunately we're not there yet :(, > ... The classes I'm interested in aren't utilities, they are part of the core of the NameNode. For example, EditLogInputStream, FSEditLogOp, and so forth. ...

How about moving only EditLogInputStream, FSEditLogOp, and so forth (frankly, I don't know what is "so forth") to a new package?  It makes some progress on cleaning up the code.  As you mentioned, the current image/edit code is quite messy., Hi Nicholas,

I will try the refactoring you suggested once I get a chance.  It sounds like a good idea if it's possible!
C., Hi Nicholas,

I took a quick look at your suggestion.  Here are the files I view as format-specific in the namenode package:
{code}
BackupImage.java
BackupJournalManager.java
EditLogBackupInputStream.java
EditLogBackupOutputStream.java
EditLogFileInputStream.java
EditLogFileOutputStream.java
EditLogInputStream.java
EditLogOutputStream.java
EditsDoubleBuffer.java
FSDirectory.java
FSEditLog.java
FSEditLogLoader.java
FSEditLogOpCodes.java
FSEditLogOp.java
FSImageCompression.java
FSImageFormat.java
FSImage.java
FSImagePreTransactionalStorageInspector.java
FSImageSerialization.java
FSImageStorageInspector.java
FSImageTransactionalStorageInspector.java
JournalManager.java
JournalSet.java
JournalStream.java
NNStorage.java
NNStorageRetentionManager.java
{code}


After moving all of those into a separate namespace, org.apache.hadoop.hdfs.server.namenode.format, I found that I had to make a lot of interfaces public that I didn't really want to.  This isn't really suprising because these files represent nearly 1/3 of the total files in org.apache.hadoop.hdfs.server.namenode.

My conclusion is that this is probably not the best way forward.

Assuming that we don't accept the patch I posted above, it looks like making things public and using interface annotations are the way forward for sharing more code between OEV / OIV and the NameNode.

cheers,
Colin, > ... it looks like making things public and using interface annotations are the way forward for sharing more code between OEV / OIV and the NameNode.

The problem is that the interface and implementation separation is not clear.  If moving the code out from the NameNode is not easy, you may make things public.  In such case, you should do it with other changes that you are going to make.

Thanks for taking a look., It looks like we'll keep oev and oiv in separate namespaces, and use interface annotations where needed., Please minimize the changes to public and try to separate the interfaces and implementations.  I believe you could clean up the code as well.  ;)]