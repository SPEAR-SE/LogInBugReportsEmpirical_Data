[I have yet to see this condition under real world practice, including losing an NFS partition.  You need to give a better description of how you were able to make the namenode fail.  Otherwise this is doomed to be a WONTFIX or some other 'non reproducable' closure., Triggering the rare cases is the goal of our project. 
We have read some papers saying that rare failure do happen,
and when they happen, the system does not behave as expected.
Thus, our view is that we should expect the unexpected., I did not understand the failure scenario. Could you please elaborate.
When the name-node gets an exception while loading image from one of the directories, does it fail or not?
Is it only the startup exceptions you are testing here?, Konstantin, this is the namenode start up workload. 
when namenode gets an exception, it fails, but not tolerate, 
i.e not retry with other image if there is any.
(this may be due the design choice that already been made)
, Ok, got it. Then it works as designed. 
We really don't want it to run and make admins think that everything is alright. Have I said that in another issue already?
What people think, should we change it?, I think this bug says that if the NN is configured with multiple fs.name.dirs and there is a bad fsimage/edits in one of the configured directories while the fsimage/edits in the other directories are not-corrupted, still the NN fails to load the image.

This feature is somewhat by design. On the other hand, i think there is still a bug in this "feature". Suppose there were two directories in fs.name.dir, say d1 and d2. The edits in d2 is corrupted but is of the same size as the edits file in d1. Now, suppose d1 is listed first in the fs.name.dir configuration parameter. In this case, the NN will try reading the fsimage/edits from d1, and will succeed with the load. , hasn't it been addressed by recent work in HDFS-903 and such? If so, let's close this as dup then.]