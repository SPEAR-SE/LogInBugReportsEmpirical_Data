[This was found by Findbugs2.  We'll need to fix most or all of these before upgrading., So this isn't a big problem, because this volatile int was only used for detecting concurrent modification (something the programmer should not be doing anyway.)  But it's easier to just fix it than to add a suppression, and people might copy this incorrect code.  Uploaded patch., Please see LightWeightGSet javadoc: "This class is not thread safe.", Probably shouldn't be volatile at all, then., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12570520/HDFS-4522.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3997//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3997//console

This message is automatically generated., We have 3 options here:
1. just use AtomicInteger
2. add a findbugs suppression clause in the XML, which we then have to maintain going forward
3. get rid of volatile (but then the code probably won't serve its intended function of warning about incorrect concurrent modification)

Nicholas, which one do you favor?  I don't really have an opinion here, but I want to get this solved., Seems to me like we should just use AtomicInteger, as the current patch does., > get rid of volatile (but then the code probably won't serve its intended function of warning about incorrect concurrent modification)

Why it won't warn about incorrect concurrent modification?, bq. Why it won't warn about incorrect concurrent modification?

Because without volatile or AtomicInteger, the different threads doing concurrent modifications may not see each others' updates to {{LightWeightGSet#modification}}., Colin, if a LightWeightGSet is used by multiple threads in an application, the application is responsible to synchronize their calls since LightWeightGSet is not thread safe., bq. Colin, if a LightWeightGSet is used by multiple threads in an application, the application is responsible to synchronize their calls since LightWeightGSet is not thread safe.

I commented on this earlier.  See https://issues.apache.org/jira/browse/HDFS-4522?focusedCommentId=13584599&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13584599

This is what I said:
bq. ... this volatile int was only used for detecting concurrent modification (something the programmer should not be doing anyway.)

The question is not whether this class is thread-safe... we all know that it is isn't.  The question is whether we should make an attempt to detect incorrect concurrent modification and throw a {{ConcurrentModificationException}}.  It might be reasonable to not do this (perhaps for performance reasons.)  Is that what you are suggesting?, > ... It might be reasonable to not do this (perhaps for performance reasons.) Is that what you are suggesting?

I think using AtomicLong is overkill since it does decrease performance.  How about removing volatile?  I seem to recall that the Java library does not use volatile., It's well-established that throwing {{ConcurrentModificationException}} is done on a best effort basis, with no guarantees, so callers cannot depend on it happening reliably. For a point of reference, let's look at {{HashMap}}. From the javadocs:

{quote}
Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: the fail-fast behavior of iterators should be used only to detect bugs.
{quote}

Source code for the OpenJDK 7 implementation is here:

http://www.docjar.com/html/api/java/util/HashMap.java.html

The relevant pieces are the declarations of modCount and expectedModCount:

{code}
  169       /**
  170        * The number of times this HashMap has been structurally modified
  171        * Structural modifications are those that change the number of mappings in
  172        * the HashMap or otherwise modify its internal structure (e.g.,
  173        * rehash).  This field is used to make iterators on Collection-views of
  174        * the HashMap fail-fast.  (See ConcurrentModificationException).
  175        */
  176       transient int modCount;
{code}

{code}
  785       private abstract class HashIterator<E> implements Iterator<E> {
  786           Entry<K,V> next;        // next entry to return
  787           int expectedModCount;   // For fast-fail
  788           int index;              // current slot
  789           Entry<K,V> current;     // current entry
{code}

There is no attempt to protect against lost updates via volatiles, atomics, or synchronization.

Treating this as a precedent, I'd like to suggest that we just remove the volatile. The presence of volatile is actually causing confusion, because it's deceiving us into thinking that the class has implemented thread-safety (but incorrectly), when the truth is that it hasn't.

Will this address the findbugs warning?
, Hi Chris,

Thanks for finding that precedent.  I'll remove the volatile as you and Nicholas have suggested., +1 for the patch removing volatile.  Thanks, Colin!, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571252/HDFS-4522.002.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/4013//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/4013//console

This message is automatically generated., Chris, thanks for checking it in details.  Nice findings!

+1 patch looks good., I've just committed this to trunk and branch-2.

Thanks a lot for the contribution, Colin., LightWeightGSet actually does not expect incrementing a volatile to be atomic as the fail-fast behavior is not guaranteed.  We probably should update the summary., Integrated in Hadoop-trunk-Commit #3459 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3459/])
    HDFS-4522. LightWeightGSet expects incrementing a volatile to be atomic. Contributed by Colin Patrick McCabe. (Revision 1455780)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1455780
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java
, Integrated in Hadoop-Yarn-trunk #154 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/154/])
    HDFS-4522. LightWeightGSet expects incrementing a volatile to be atomic. Contributed by Colin Patrick McCabe. (Revision 1455780)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1455780
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java
, Integrated in Hadoop-Hdfs-trunk #1343 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1343/])
    HDFS-4522. LightWeightGSet expects incrementing a volatile to be atomic. Contributed by Colin Patrick McCabe. (Revision 1455780)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1455780
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java
, Integrated in Hadoop-Mapreduce-trunk #1371 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1371/])
    HDFS-4522. LightWeightGSet expects incrementing a volatile to be atomic. Contributed by Colin Patrick McCabe. (Revision 1455780)

     Result = SUCCESS
atm : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1455780
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/LightWeightGSet.java
]