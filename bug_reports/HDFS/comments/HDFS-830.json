[I've added it to both classpath and testclasspath. This may have side effect of lib's jars appearing twice in the testclasspath. , I've converse with Aaron in offline and he had shared how he does common testing in his setup. Here's the main idea (and it is fully supported by our current mechanism):
{noformat}
  common% ant jar mvn-install
  hdfs% ant veryclean test -Dresolvers=internal
{noformat}
The idea is that first command installs fresh Common artifacts to the local maven repository. The second command then wipes out old version from Ivy cache and use the internal maven repository to obtain the needed snapshots.

I've checked it and it works like a chime. So, I'd suggest to drop proposed the modification all together and update an appropriate Wiki page with this information if it isn't already done.
 , I'm not wild about checking in jars just for testing, even if it is to your local mvn repository. That adds an extra step of cleaning them up.  Instead, how about if we have property for Ant such as -Dusejar= and provide a list of jars to be included. I can see this making it very easy to write a script to test up-the-line changes from common and hdfs to hdfs and mapreduce. This would also save the time of having to copy the jars into the lib directory: build the common jar, point hdfs to it when running tests with no extra checking in or copying muss or fuss., It looks like the twiki has been changed to mandate the use of the internal maven repository approach even though we've not yet reached a consensus on the correction solution.  This is too bad; I still have concerns, as detailed above., I suggested to update the Wiki page until we come up with an alternative solution., Looks like alternative solution is to use resolvers=iternal with maven.
Closing this one., I'm going to go ahead and re-open this: we've been using the resolvers:internal method for a while and, like I had I feared, it's a pain to keep straight which version is installed and when it is getting called.  Also, as noted above, there was no public discussion on this approach before it was added to the wiki.  

My preference would be a new option, something like, -Dadditional.jars=<foo.jar>, which would add those jars to the classpath before the other entries.  This would make it easy to automate upstream testing, building a patched common jar and then passing it to hdfs to be tested against (and so on for MR).  In any case, with some many patches flying around, locally installing temporary jars is not a good solution., bq. we've been using the resolvers:internal method for a while and, like I had I feared, it's a pain to keep straight which version is installed and when it is getting called.
its going to use the version of jars that's being mentioned in the libraries.properties file and not anything that is in the ivy cache. -Dadditional.jars=<foo.jars> is just going to add more complications in my opinion.]