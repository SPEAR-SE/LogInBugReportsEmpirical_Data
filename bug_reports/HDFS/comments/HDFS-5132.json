[Attaching the output of jstack, Looks like the deadlock was caused by the following locking scenario:

1. A thread is trying to acquire datanodeMap's monitor while holding the monitor of SafeModeInfo
{noformat}
Thread 14109: (state = BLOCKED)
org.apache.hadoop.hdfs.server.blockmanagement.DatanodeManager.getNumLiveDataNodes() @bci=8, line=877 (Compiled frame)
org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getNumLiveDataNodes() @bci=7, line=5287 (Compiled frame)
org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo.needEnter() @bci=24, line=4487 (Compiled frame)
org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo.canLeave() @bci=38, line=4479 (Compiled frame)
org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo.access$1300(org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo) @bci=1, line=4275 (Compiled frame)
org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeMonitor.run() @bci=27, line=4749 (Interpreted frame)
java.lang.Thread.run() @bci=11, line=662 (Interpreted frame)
{noformat}

2. Another thread is trying to get the monitor of SafeModeInfo while holding the datanodeMap's monitor
{noformat}
Thread 13921: (state = BLOCKED)
org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo.isOn() @bci=0, line=4385 (Compiled frame)
org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo.access$1500(org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo) @bci=1, line=4275 (Compiled frame)
org.apache.hadoop.hdfs.server.namenode.FSNamesystem.isInSafeMode() @bci=12, line=4798 (Interpreted frame)
org.apache.hadoop.hdfs.server.blockmanagement.DatanodeManager.handleHeartbeat(org.apache.hadoop.hdfs.server.protocol.DatanodeRegistration, java.lang.String, long, long, long, long, int, int, int) @bci=131, line=1180 (Interpreted frame)
{noformat}
, We can move SafeModeInfo#needEnter out of the synchronization block of SafeModeInfo#canLeave to fix the deadlock. When moving SafeModeInfo#needEnter out, we can either make blockSafe and blockThreshold as AtomicInteger, or get their values in the synchronization block and use the values outside (we do not need to get the exact value here, just need to make sure their updates can be seen). Upload a simple patch which implements the second fix., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12600072/HDFS-5132.001.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/4894//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/4894//console

This message is automatically generated., Safe mode related checks are done under the FSN lock, not to mention actual transitions. However, in SafeModeMonitor, the check and transition are separate. I think they need to be synchronized under the FSN lock. This happens to fix the deadlock.

{code}
      */
     @Override
     public void run() {
-      while (fsRunning && (safeMode != null && !safeMode.canLeave())) {
+      while (fsRunning) {
+        writeLock();
         try {
+          if (safeMode == null) break; // not in safe mode
+          if (safeMode.canLeave()) {
+            safeMode.leave();
+            break;
+          }
+        } finally {
+          writeUnlock();
+        }
+
+        try {
           Thread.sleep(recheckInterval);
         } catch (InterruptedException ie) {
           // Ignored
         }
       }
       if (!fsRunning) {
         LOG.info("NameNode is being shutdown, exit SafeModeMonitor thread");
-      } else {
-        // leave safe mode and stop the monitor
-        leaveSafeMode();
       }
       smmthread = null;
     }
   }
{code}

SafeModeMonitor is started only when NN enters safe mode extension, so it will get blocked by replication queue initialization right away and won't perform unnecessary checks every second while the initialization is still in progress. I.e. it won't cause any additional locking overhead., [~kihwal], I think you are right. Currently all the safemode related checks are done under the FSN r/w lock (except getBlockLocations). Since you already have the fix, could you upload a patch? Thanks!, Sure I will have it up shortly., Thanks for the patch Kihwal! The patch looks good to me. The deadlock will be fixed by the synchronization through the FSN R/W lock. +1 for the patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12600215/HDFS-5132.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/4897//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/4897//console

This message is automatically generated., I've committed this to trunk, branch-2 and branch-2.1-beta., SUCCESS: Integrated in Hadoop-trunk-Commit #4330 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4330/])
HDFS-5132. Deadlock in NameNode between SafeModeMonitor#run and DatanodeManager#handleHeartbeat. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1517989)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #315 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/315/])
HDFS-5132. Deadlock in NameNode between SafeModeMonitor#run and DatanodeManager#handleHeartbeat. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1517989)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1505 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1505/])
HDFS-5132. Deadlock in NameNode between SafeModeMonitor#run and DatanodeManager#handleHeartbeat. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1517989)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1532 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1532/])
HDFS-5132. Deadlock in NameNode between SafeModeMonitor#run and DatanodeManager#handleHeartbeat. Contributed by Kihwal Lee. (kihwal: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1517989)
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java
]