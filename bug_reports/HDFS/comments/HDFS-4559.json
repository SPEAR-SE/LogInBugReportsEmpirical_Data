[After some debugging it turns out this issue is actually caused by symlinks not working within HDFS. Making a child JIRA to discuss that issue., Please see my comment on HDFS-4561 on FileSystem not supporting symlinks. The reason WebHDFS does not support it is, it is closely based on the existing FileSystem APIs., I can understand the case for DFS. I have noticed there is a resolvePath() method in FileSystem though. I am assuming there was an attempt to introduce symlinks at the DFS layer. I can close that JIRA myself shortly.

I find it odd however that WebHDFS can make symlinks but not resolve them. Since NameNodeWebHdfsMethods has access to the NameNodeRpcServer, I believe it should be possible for WebHDFS to resolve those created symlinks using some implementation. Does FileContext never make use of the NameNodeRpcServer in order to resolve symlinks?, Suresh, it was true that symLinks were exposed only through FileContext, but not any more. Once creating a symLink is exposed through WebHdfs it should also support resolving symLinks and reading data through them.
This could be either done solely for WebHdfs or universally exposed through FileSystem. So we can close one of the two jiras, but need to fix the other one. I would rather add support for symLinks through FileSystem, otherwise the feature is rotting and not widely used.

Plamen, "Fix Version/s:" field should be only filled when the jira is resolved. Use "Target Version/s:" to indicate versions you want it to be fixed in., I agree with Suresh's comment. 

Furthermore, I think having CREATESYMLINK in WebHDFS is a mistake as it is not supported on the FileSystem API. For example HTTPFS cannot support this for any FileSystem (including HDFS). WebHDFS rides on the implementation detail that is running in the NN and can tap directly there.

IMO, we should first add symlinks to the FileSystem API and then do proper support in WebHDFS REST API., I think support symlink was not straight forward in FileSystem, given an instance of it is created one per URI and symlink could point to any file system. [~sanjay.radia] Can you comment?, Agree with Suresh and Alejandro above. FileSystem doesn't support symlinks at the moment, so it shouldn't be exposed.

[~sureshms] I've looked into this a fair bit since I'm working on HADOOP-8040 (porting symlinks to FileSystem). Full-on symlink support is definitely messier in FileSystem since we don't have the nice separation of FileContext/AbstractFileSystem, but it's still possible as long as the FileSystem subclasses are willing to do some work. I hope to have a patch up this week or next.

As a meta point, I don't think any FileSystem subclasses besides DistributedFileSystem support resolving symlinks (S3, FTP, ?), and getting resolution even just within HDFS would make 95% of our users happy.]