[Hi Daryn, if my understanding of this jira is correct, HDFS-4258 is to address this kinds of path-change related issues.  , I don't think HDFS-4258 fixes the case of a daemon being left with "leaked" leases on renamed files.  Ex. a daemon is busy writing files, let's say logs, and someone comes along and moves them.  The daemon will still have a lease on the renamed files, but has absolutely no idea where those files are now.  There is no way for the daemon to close the broken streams so the files can't be removed from the lease.  So the daemon opens new logs and chugs along.  Since it's busy writing to at least one file in its lease, the lease won't expire, so the renamed files remain locked "forever".

Actually, come to think of it, isn't the issue in HDFS-4258 much more simply fixed by releasing the leases?, If renaming revokes a lease, a client might be able to write to a file immediately by:
1. rename it
2. rename it back
3. write to it

, I'm not a lease expert, but how could that happen?  My understanding (I haven't thoroughly studied the code) is the lease is acquired when the file is opened for writing or appending.  If the NN revokes the lease, then the client is going to fail writing to the file.  Even if renamed back, I don't think the client auto-magically reacquires the lease?  Or that block recovery will allow the client to continue writing?

Even if the use case described can happen, is it really a legitimate use case?  Or at least one that outweighs the more common case of leases being leaked and never released by daemons or long running tasks?  If the "rename, rename-back, continue-writing" is deemed legitimate, how do we address the leaking leases?  Individual per-file timeouts in the lease instead of timeouts per lease?, I meant a "different client" in my previous comments. Basically, my point is, if renaming revokes a lease, the client is overpowered. 

For example, one random client renames one of the top directories. It basically revokes all the leases granted to other clients under this directory. That is, for any client wants to gain a lease of any file, it could just rename it and then open it. Most likely it could get the lease immediately as long as it has write permission., Isn't that a good thing though as opposed to nobody ever being able to get a lease on the renamed files until the daemon is restarted?, Daryn, Linux and Unix allow users to continue writing to a file even it is renamed/moved.  What do you think if we support the same behavior in HDFS?, @Daryn, I think we are talking about two things here.
1. with current code, as long as a client renews it lease, nobody else can write to it.
As we know, this is problematic and causes problems like this JIRA.

2. should a lease be revoked if its filepath changed?
I think no. It seems more reasonable to me the lease is associated with a file instead of a path as Nicholas pointed out.
, I think supporting file descriptor behavior is a great idea (we've internally talked about this).  Until we do, I think the lease should be revoked.  My concerns with fd behavior would be the ever pervasive "two wrongs make a right" where users are relying unintentionally on renames breaking writers, and ensuring we get the security right to avoid attacks probing for fileids., Daryn, just checking - do you intend to work on this now that INode IDs are in trunk?, Marking this as a dupe of HDFS-6294, which addressed the issues we had with moving files that were open for write.  Feel free to reopen if there's something more we should do here.]