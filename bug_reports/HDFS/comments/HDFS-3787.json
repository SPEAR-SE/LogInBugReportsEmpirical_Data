[Attaching proposed fix.  I'm ambivalent about the {{join}} in {{BlockManager#close}}, it helps preserve semantics, ensuring the BlockManager is shut down when close() returns, but I doubt anybody depends on that semantic.  But out of an abundance of caution it seems safer.

No testcases, because the race is very hard to hit without modifying the code., Thanks Andy. The patch looks like it should fix the race.

However, I wonder if there would ever be a case where the ReplicationMonitor is interrupted and the blocksMap should not be closed. To avoid "changing" the semantics (I am not sure if it really changes), how about the following:
{code}
   public void close() {
    if (replicationThread != null) {
      replicationThread.interrupt();
      try {
        replicationThread.join();
      } catch (InterruptedException ie) {
      } finally {
        if (pendingReplications != null) pendingReplications.stop();
        blocksMap.close();
        datanodeManager.close();
      }
    }
   }
{code}

In addition to this, we can conservatively call pendingReplications.stop() in ReplicationMonitor as well?, That seems reasonable to me, and it keeps the closing logic in close() where it logically belongs.  However it means that a hung replicationThread will hang the close() as well, if we do an unbounded join.

How about {{join(3000);}}, followed by a finally block?  If the join times out, assume the thread is hung and it doesn't matter if we close racily., This is a dupe of HDFS-3048 btw, I'll close it., Updated patch implementing Karthik's suggested rework, plus my join(3000) proposal.

Oddly, Jira seems to be missing the "Submit patch" button, so I can't trigger Jenkins., Bounded timeout makes sense. I am not aware of the practice - do you think it would make sense to use one of the IPC timeouts? I ll let you decide., Same patch attached to kick jira which doesn't seem to be showing the submit patch button., I kicked the pre-commit build manually., Marking HDFS-3787 as a duplicate of HDFS-3048 since patch activity and discussion has moved there.]