[What is your recommendation to fix this --- Do we need to get rid of the progress parameter? , The incorrect create() function currently calls an overloaded version of create() with improper arguments (specifically, it sends {{null}} instead of {{progress}}. This can be fixed by simply passing the correct argument. However, I also want to look into how these functions are being tested because the current tests are not catching this issue. , Hi Bill,

Are you talking about below code snippet in DFSClient?
{code}
public OutputStream create(String src, boolean overwrite) 
      throws IOException {
    return create(src, overwrite, dfsClientConf.defaultReplication,
        dfsClientConf.defaultBlockSize, null);
  }

{code}

{quote}
This can be fixed by simply passing the correct argument.{quote}

Here actually, when client doesn't want to see any progress, then why we need to pass progressible?

See the javadoc of Progressable

{code}
 * <p>Clients and/or applications can use the provided <code>Progressable</code>
 * to explicitly report progress to the Hadoop framework. This is especially
 * important for operations which take an insignificant amount of time since,
 * in-lieu of the reported progress, the framework has to assume that an error
 * has occured and time-out the operation.</p>{code}

in my opinion, when client invokes create api without progressable perameter, then we need to pass it as null. I feel this is correct behavior. Please correct me if i understood wrongly.


Thanks
Uma

, The create(Str, bool, Progressable) seems to pass what it gets properly. Resolving as can't reproduce today.

From 0.23:
{code}
  /**
   * Call {@link #create(String, boolean, short, long, Progressable)} with
   * default <code>replication</code> and <code>blockSize<code>.
   */
  public OutputStream create(String src, 
                             boolean overwrite,
                             Progressable progress) throws IOException {
    return create(src, overwrite, dfsClientConf.defaultReplication,
        dfsClientConf.defaultBlockSize, progress);
  }
{code}]