[I found this problem earlier and filed HDFS-5526.  It seems that HDFS-5526 did not completely solve the problem., [~szetszwo], I found BlockPoolSliceStorage.doRollback() is not called during DN start with -rollback in the Exception.

{code}
        at org.apache.hadoop.hdfs.server.common.Storage.readProperties(Storage.java:922)
        at org.apache.hadoop.hdfs.server.datanode.BlockPoolSliceStorage.doTransition(BlockPoolSliceStorage.java:244)
        at org.apache.hadoop.hdfs.server.datanode.BlockPoolSliceStorage.recoverTransitionRead(BlockPoolSliceStorage.java:145)
{code}

doTransition() should call doRollback(), right?, I think it probably first called doRollback(..) and then readProperties(..) as shown below.
{code}
// BlockPoolSliceStorage.doTransition(..)
    if (startOpt == StartupOption.ROLLBACK) {
      doRollback(sd, nsInfo); // rollback if applicable
    } else {
      // Restore all the files in the trash. The restored files are retained
      // during rolling upgrade rollback. They are deleted during rolling
      // upgrade downgrade.
      int restored = restoreBlockFilesFromTrash(getTrashRootDir(sd));
      LOG.info("Restored " + restored + " block files from trash.");
    }
    readProperties(sd);
{code}
, [~szetszwo], the Affects Version/s should be 2.0.5 right? This is a problem in rollback code from 2.0.5 and not from 2.4.0., I think this is fixed in trunk now after HDFS-6800 and HDFS-6981.

[~szetszwo], could you please confirm?, > ..., the Affects Version/s should be 2.0.5 right? ...

Sure.  Just have updated it., > I think this is fixed in trunk now after HDFS-6800 and HDFS-6981.

This problem probably is different than HDFS-6800 and HDFS-6981.

Let me give some background.  Federation added block pools to the datanode data directory.  The directory structure becomes

{noformat}
data +- current  +- pool_1 +- current
     |           |         +- previous
     |           |        
     |           +- pool_2 +- current
     |                     +- previous
     |
     +- previous
{noformat}

Then, we have two level VERSION files, data/current/VERSION and data/current/poo1_x/current/VERSION.  During upgrade, both VERSION files are overwritten to the new versions.  For rollback, since we may only rollback an individual block pool, only data/current/poo1_x/current/VERSION is restored but not data/current/VERSION.  Then, we will get version mismatched.

We found the problem in HDFS-5526.  At that time we added code to overwrite the data/current/VERSION file during rollback.  It worked fine.

However, for the software versions with Federation but without HDFS-5526, they still have the problem so that they cannot rollback.  This is the bug described here.

I think we only can advise users to do manually rollback (manually change the data/current/VERSION file to the old version) but cannot change the (old) softwares to fix bug.
, Thanks for the explaining that Nicholas, that makes sense., Thanks [~szetszwo], a very useful description.

bq. I think we only can advise users to do manually rollback (manually change the data/current/VERSION file to the old version) 
Yes. but for a large cluster, there need some addtional work to do.

bq. but cannot change the (old) softwares to fix bug.
what did you mean?

, {quote}
>    but cannot change the (old) softwares to fix bug.

what did you mean?
{quote}
In this case, the old software we tried to rollback is hadoop-2.0.5-alpha.  The bug actually is in hadoop-2.0.5-alpha but not trunk.]