[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12563394/HDFS-4362.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HDFS-Build/3748//testReport/
Console output: https://builds.apache.org/job/PreCommit-HDFS-Build/3748//console

This message is automatically generated., +1, patch looks good to me. Thanks, Suresh., Aaron, thanks for the review. I have committed the patch., BTW this incompatible change needs to go into 2.0.3-alpha as well., Integrated in Hadoop-trunk-Commit #3189 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3189/])
    HDFS-4362. GetDelegationTokenResponseProto does not handle null token. Contributed by Suresh Srinivas. (Revision 1430137)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1430137
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/ClientNamenodeProtocol.proto
, Integrated in Hadoop-Yarn-trunk #90 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/90/])
    HDFS-4362. GetDelegationTokenResponseProto does not handle null token. Contributed by Suresh Srinivas. (Revision 1430137)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1430137
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/ClientNamenodeProtocol.proto
, Integrated in Hadoop-Hdfs-trunk #1279 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1279/])
    HDFS-4362. GetDelegationTokenResponseProto does not handle null token. Contributed by Suresh Srinivas. (Revision 1430137)

     Result = FAILURE
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1430137
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/ClientNamenodeProtocol.proto
, Integrated in Hadoop-Mapreduce-trunk #1307 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1307/])
    HDFS-4362. GetDelegationTokenResponseProto does not handle null token. Contributed by Suresh Srinivas. (Revision 1430137)

     Result = SUCCESS
suresh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1430137
Files : 
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/CHANGES.txt
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolServerSideTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java
* /hadoop/common/trunk/hadoop-hdfs-project/hadoop-hdfs/src/main/proto/ClientNamenodeProtocol.proto
, I committed this change to branch-2., I don't think this should be considered an incompatible change. In any case where an old server would return null, it would have thrown an error before responding. So this is just a bug fix on the server side. There's no case where an old client could have been working correctly against an old server but will stop working against a new server.

Can you please show a scenario in which this could create an incompatibility between 2.0.2 and 2.0.3?, Incompatible means a contract is being broken. In this case it is wire protocol.

Incompatible change && does not affect any one does not make it compatible change. That is the difference. Hence It is okay to say, this is an incompatible change, but will not affect any body in production.
 , So your argument is like the old "if a tree falls in a forest, and no one is there, does it make a sound?"

What's the purpose of labeling it if no one cares? Doesn't it just dilute the "incompatible changes" section of our release notes with information that no one cares about?

If someone is implementing a client in some other language, then they're already used to looking at the source code and the .proto files. Wouldn't they just be diffing the .proto files between versions to see what new fields are added, etc?

Maybe we need separate tags instead of just one "incompatible change" checkbox? I've always understood the purpose of this checkbox to alert users and operators who are upgrading between versions of things they need to be aware of that can break their applications. This isn't such a case, as you said above., bq. So your argument is like the old "if a tree falls in a forest, and no one is there, does it make a sound?"
Actually that is your argument :-) If an incompatible change does not affect any one, is it an incompatible change? I say it is.

bq. What's the purpose of labeling it if no one cares?
The purpose is clearly to say, the wire protocol change is incompatible. The second part, this may not affect if one is using public interfaces or DFSClient is to alleviate the concern and indicate that they should not see any issues.

bq.  Doesn't it just dilute the "incompatible changes" section of our release notes with information that no one cares about?
We have handful of these. So it should not dilute the value of of the section. There are many types of incompatible changes today. API, wire protocol, logs, semantic behavior, even log changes. Users take a look at the list of changes. If it is of no concern to them, they disregard it.

By this argument our changes.txt is replete with things that does not matter to users at all. Some of them are very specific java changes to specific classes, only relevant to developers. Most users do not care about them either. We still put them in changes.txt right?

bq. Wouldn't they just be diffing the .proto files between versions to see what new fields are added, etc?
If I am building some thing based on proto, I may not diff or worry about looking at the change unless it is flagged as incompatible. Why would you diff .proto from release to release?

bq. Maybe we need separate tags instead of just one "incompatible change" checkbox? I've always understood the purpose of this checkbox to alert users and operators who are upgrading between versions of things they need to be aware of that can break their applications. 
I think the current box serves the purpose. Like I said, it draws people's attention to such changes. The users can then make a decision for themselves whether it affects them or not, and how it affects them, instead of we making that decision for them., This is not worth arguing. I'm going back to work., I just want to make sure I understand the issue correctly.  In order for a secure client to talk to an insecure NN, a server that does not issue tokens must return null.  The reason is the insecure NN will kick the secure client into SIMPLE auth.  However, the secure client will always request tokens anyway so the insecure server must return null.  This patch appears to allow protobuf token requests to return null, correct?, bq. This patch appears to allow protobuf token requests to return null, correct?
Yes. Before this patch, null could not be returned by the server. Even if null is returned by the server, client could not handle that response and would have encountered a protobuf exception., Excellent!  This was complicating the testing of my SASL work I'll be resuming shortly.]