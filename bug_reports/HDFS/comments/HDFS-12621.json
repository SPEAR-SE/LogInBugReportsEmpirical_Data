[{{addDelegationTokens}} had to be added to accommodate the fact that a single FileSystem may have >1 DT which was not previously true. So a new API had to be added.

To work around this same issue, HDFS router-based federation (HDFS-10467) proposed using a "dummy" DT which represented the combination of all necessary DTs. The router would maintain as part of its state a mapping from dummy DTs to real DTs. Then, when the dummy was used by a client, the router would look up the correct DT (based on which NN was being communicated with) and forward that along. I'm not sure if the same approach would work here but it may be worth considering., Added Mohammad to contributor list and assigned this jira to him per his request., Thanks [~sureshms] for re-adding me.

[~xkrogen] : thanks for your comments. Follow up comments:
_addDelegationTokens_ for ViewFileSystem works fine and collects the appropriate tokens from child filesystem(s). But the  confusion is *getDelegationToken*() works for most FS but not for ViewFileSsytem. 
 
Which option do you think will be a good idea? I think option #1 could be less risky but at least give some message to the caller to call _addDelegationTokens_ instead. 

, I don't think Option 2 is the right approach; this goes against the general semantics of viewfs and may be even more confusing to users if they have the right delegation tokens for some paths but not others. I think that Option 1 is definitely a good idea given that we won't be removing the method until Hadoop 4 at the earliest which is a long way away.

Do you have any thoughts on adapting a similar approach as router-based federation? I think it is worth considering to see if there are any reasons why it is not possible. This approach would actually allow the API to work properly until it is removed., Thanks [~xkrogen]

So we agree option #2 is the last.

However, I want to pursue your proposal that was adopted in router-based federation. Can you please provide more concrete example (such as code/commit) of that. I found this JIRA (HDFS-12284) which was created to address the delegation token for router. , Hm... There is some reference in the design document for HDFS-10467, but not a lot of detail. As-is it actually will not work since it relies on an external state store. This is what I had in mind for ViewFS, loosely based off of their ideas:
* Upon a call to {{ViewFileSystem#getDelegationToken()}}, make a call to each underlying Namenode. This is essentially the same as the behavior of  {{addDelegationToken()}}.
* Since {{getDelegationToken()}} can only store one delegation token, we need a way to stuff all of the other tokens inside of it. Create a new {{ViewFSTokenIdentifier extends TokenIdentifier}} which will stores all of them.
* When a {{ViewFileSystem}} method is called under a {{UserGroupInformation}} which is authenticated via a {{ViewFSTokenIdentifier}}, extract the underlying Token and send it along to the corresponding NN.
* To serialize {{ViewFSTokenIdentifier}} for later use by other clients, we leverage the fact that all of the underlying Tokens are also serializable ({{Writable}}). The sequence of bytes that {{ViewFSTokenIdentifier}} serializes to can simply be a concatenation of the serialized bytes for each underlying Token, along with some information about which Token goes with which mount point and/or NN URI. This should enable, after deserialization, any other client to perform the same steps, assuming that it is using the same ViewFS mount table.

It would require a fair amount of effort / code change, but all isolated to within {{ViewFileSystem}} code., Hi [~kamrul], are you working on this Jira? If not, I would like to take it up., Currently Yarn, MapReduce jobs runs on ViewFs with existing implementation. [HADOOP-8701] talks about deprecating  {{FileSystem#getDelegationToken}} as it is incompatible with a multi-token fs like viewfs. That is one alternative to introducing a new type of token. What are your thoughts? Do you have any specific use case, is it legacy applications that call getDelegationToken directly?]