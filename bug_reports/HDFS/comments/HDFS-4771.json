[HDFS makes the assumption that the symlink is inside the same namespace. This could be wrong when HDFS is integrated into client's file system namespace. In that case, the symlink can't be resolved inside HDFS. , Btw HDFS symlinks don't currently support permissions on the links themselves (see HDFS-948)., I haven't checked what they are, but I recommend we follow POSIX conventions., {quote}...but I recommend we follow POSIX conventions.{quote}
I think so too.

{quote}Btw HDFS symlinks don't currently support permissions on the links themselves (see HDFS-948).{quote}
Two major problems I found with current symlink implementation.

 1. HDFS assumes the link is inside its own namespace. This is a problem when HDFS is integrated into client's file system namespace.
 2. Suppose the linked target is inside HFDS, HDFS doesn't really check whether the target saved in the link file is a valid path. Even the target was valid, it could become invalid as the namespace changes. 

For example, create a symlink /user/brandon/iamlink.lnk  and it has the content(target) as "/invalid/path". The file /user/brandon/iamlink.lnk can't be deleted since HDFS can't resolve it.

Let me update the JIRA title accordingly., Hi Brandon,

I'm working on a related JIRA on a symlink delete issue (HDFS-4765), it's great to see others working on stabilizing symlinks too.

I was hoping to get more details on what exactly you're trying to accomplish here. When you say "HDFS assumes the target is inside its own namespace", this is not strictly true. Link targets are stored as specified, and cross-filesystem symlinks are supported. This also applies to dangling symlinks. The real error in your example is possibly what's getting fixed in HDFS-4765, not with the properties of symlinks in HDFS themselves.

Regarding permissions, AFAIK symlinks do not have meaningful permissions in POSIX. Creation and deletion of symlinks depends on having write permissions for the parent directory (true of any file), and access of a symlink target depends on the permissions on the target. I don't think the use-case specified in HDFS-948 (undeletable link in a writable directory) is actually supported by POSIX symlinks.

So, could we get specific with precise APIs and errors that we're trying to fix here? Depending on the extent, it might be worth splitting into multiple sub-JIRAs., Yes, regarding create/delete of symlinks, you are correct that dir permissions apply.  However, symlinks themselves do support permissions that dictate if the link itself can be resolved.  The target path of the symlink is not even viewable if the user does not have permissions to the symlink itself.  A symlink is conceptually treated as a file that contains a string target path., Hey [~daryn], thanks for the info. I did some searching, and I'm not sure how common this behavior is. The Open Group man page for chmod has this to say [1]:

{noformat}
Some implementations might allow changing the mode of symbolic links. This is not supported by the interfaces in the POSIX specification.
{noformat}

The Linux man page for chmod says this [2]:

{noformat}
chmod never changes the permissions of symbolic links; the chmod system call cannot change their permissions. This is not a problem since the permissions of symbolic links are never used.
{noformat}

Not to say that permissions aren't potentially useful though. I think Brandon intended something different for this JIRA though, since HDFS-948 captures setting permissions and owners on symlinks.

[1]: http://pubs.opengroup.org/onlinepubs/9699919799/functions/fchmodat.html
[2]: http://linux.die.net/man/1/chmod, I had tested this on OS X so honoring permissions for link resolution is probably BSD behavior.  I'll take the discussion to HDFS-948., Resolving this one for now, since I think the basic issue was fixed in HDFS-4765. Feel free to reopen if you like.]