{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12752623","self":"https://issues.apache.org/jira/rest/api/2/issue/12752623","key":"HDFS-7342","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310942","id":"12310942","key":"HDFS","name":"Hadoop HDFS","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310942&avatarId=10094","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310942&avatarId=10094","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310942&avatarId=10094","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310942&avatarId=10094"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2014-11-19T11:06:12.769+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri May 18 07:02:09 UTC 2018","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_3_*:*_97533222710_*|*_5_*:*_1_*:*_0_*|*_10002_*:*_2_*:*_14020705233","customfield_12312321":null,"resolutiondate":"2018-05-18T07:02:09.725+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HDFS-7342/watchers","watchCount":11,"isWatching":false},"created":"2014-11-04T03:50:01.846+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12310230":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"4.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12320353","id":"12320353","description":"hadoop-2.0.0-alpha release","name":"2.0.0-alpha","archived":false,"released":true,"releaseDate":"2012-05-23"}],"issuelinks":[{"id":"12401757","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12401757","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"inwardIssue":{"id":"12651089","key":"HDFS-4882","self":"https://issues.apache.org/jira/rest/api/2/issue/12651089","fields":{"summary":"Prevent the Namenode's LeaseManager from looping forever in checkLeases","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}},{"id":"12401759","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12401759","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12680851","key":"HDFS-5558","self":"https://issues.apache.org/jira/rest/api/2/issue/12680851","fields":{"summary":"LeaseManager monitor thread can crash if the last block is complete but another block is not.","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}},{"id":"12423918","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12423918","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12828061","key":"HDFS-8344","self":"https://issues.apache.org/jira/rest/api/2/issue/12828061","fields":{"summary":"NameNode doesn't recover lease for files with missing blocks","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/10002","description":"A patch for this issue has been uploaded to JIRA by a contributor.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/document.png","name":"Patch Available","id":"10002","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/4","id":4,"key":"indeterminate","colorName":"yellow","name":"In Progress"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}}],"customfield_12312339":null,"assignee":null,"customfield_12312337":null,"customfield_12312338":null,"updated":"2018-05-18T07:02:09.787+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"timeoriginalestimate":null,"description":"In some cases, LeaseManager tries to recover a lease, but is not able to. HDFS-4882 describes a possibility of that. We should fix this","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12731032","id":"12731032","filename":"HDFS-7342.04.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-07T01:08:35.772+0000","size":7506,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12731032/HDFS-7342.04.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12682302","id":"12682302","filename":"HDFS-7342.1.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-19T00:34:19.145+0000","size":5786,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12682302/HDFS-7342.1.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12682370","id":"12682370","filename":"HDFS-7342.2.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-19T07:53:52.457+0000","size":8159,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12682370/HDFS-7342.2.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12683334","id":"12683334","filename":"HDFS-7342.3.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-24T15:31:28.823+0000","size":11989,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12683334/HDFS-7342.3.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Lease Recovery doesn't happen some times","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14209022","id":"14209022","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"Some details I've been able to gather from the logs on a cluster running Hadoop 2.2.0:\nThe client logs. \n{noformat}\n2014-10-27 19:46:54,952 INFO [Thread-60] org.apache.hadoop.hive.ql.exec.FileSinkOperator: Writing to temp file: FS hdfs://<NAMENODE>:8020/<FILENAME>\n..... nothing related to this file.......\n2014-10-28 01:18:26,018 INFO [main] org.apache.hadoop.hdfs.DFSClient: Could not complete <FILENAME> retrying...\n2014-10-28 01:18:26,419 INFO [main] org.apache.hadoop.hdfs.DFSClient: Could not complete <FILENAME> retrying...\n...goes on for 10 mins.....\n2014-10-28 01:28:24,481 INFO [main] org.apache.hadoop.hdfs.DFSClient: Could not complete <FILENAME> retrying...\n2014-10-28 01:28:24,883 INFO [main] org.apache.hadoop.hdfs.DFSClient: Could not complete <FILENAME> retrying...\n{noformat}\n\nThe Namenode Logs grepping for <FILENAME>\n{noformat}\n2014-10-27 19:46:58,041 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_A{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE1>:50010|RBW], ReplicaUnderConstruction[<SLAVE8>:50010|RBW]]}\n2014-10-27 20:13:26,607 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_B{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE2>:50010|RBW], ReplicaUnderConstruction[<SLAVE9>:50010|RBW]]}\n2014-10-27 20:47:52,422 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_C{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE3>:50010|RBW], ReplicaUnderConstruction[<SLAVE10>:50010|RBW]]}\n2014-10-27 21:23:13,844 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_D{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE4>:50010|RBW], ReplicaUnderConstruction[<SLAVE11>:50010|RBW]]}\n2014-10-27 22:02:33,405 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_E{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE5>:50010|RBW], ReplicaUnderConstruction[<SLAVE12>:50010|RBW]]}\n2014-10-27 22:42:49,227 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_F{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE6>:50010|RBW], ReplicaUnderConstruction[<SLAVE15>:50010|RBW]]}\n2014-10-27 23:25:58,555 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_G{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE7>:50010|RBW], ReplicaUnderConstruction[<SLAVE12>:50010|RBW]]}\n2014-10-28 00:07:36,093 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_H{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE2>:50010|RBW], ReplicaUnderConstruction[<SLAVE13>:50010|RBW]]}\n2014-10-28 01:13:50,298 INFO org.apache.hadoop.hdfs.StateChange: BLOCK* allocateBlock: <FILENAME>. <BlockPoolID> blk_A_I{blockUCState=UNDER_CONSTRUCTION, primaryNodeIndex=-1, replicas=[ReplicaUnderConstruction[<CLIENT_IP>:50010|RBW], ReplicaUnderConstruction[<SLAVE1>:50010|RBW], ReplicaUnderConstruction[<SLAVE14>:50010|RBW]]}\n2014-10-28 01:18:20,868 INFO org.apache.hadoop.hdfs.StateChange: DIR* completeFile: <FILENAME> is closed by DFSClient_attempt_X_Y_r_T_U_V_W\n2014-10-28 01:18:21,272 INFO org.apache.hadoop.hdfs.StateChange: DIR* completeFile: <FILENAME> is closed by DFSClient_attempt_X_Y_r_T_U_V_W\n....This keeps going interspersed with other logs until ....\n2014-10-28 01:28:24,483 INFO org.apache.hadoop.hdfs.StateChange: DIR* completeFile: <FILENAME> is closed by DFSClient_attempt_X_Y_r_T_U_V_W\n2014-10-28 01:28:25,615 INFO org.apache.hadoop.hdfs.StateChange: DIR* completeFile: <FILENAME> is closed by DFSClient_attempt_X_Y_r_T_U_V_W\n2014-10-28 02:28:17,569 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem: Recovering [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1], src=<FILENAME>\n......BOOM.... NN IS IN INFINITE LOOP...... Only the following two messages keep getting repeated:\n2014-10-28 02:28:17,568 INFO org.apache.hadoop.hdfs.server.namenode.LeaseManager: [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1] has expired hard limit\n2014-10-28 02:28:17,569 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem: Recovering [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1], src=<FILENAME>\n2014-10-28 02:28:17,569 INFO org.apache.hadoop.hdfs.server.namenode.LeaseManager: [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1] has expired hard limit\n2014-10-28 02:28:17,569 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem: Recovering [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1], src=<FILENAME>\n2014-10-28 02:28:17,569 INFO org.apache.hadoop.hdfs.server.namenode.LeaseManager: [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1] has expired hard limit\n2014-10-28 02:28:17,569 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem: Recovering [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1], src=<FILENAME>\n2014-10-28 02:28:17,569 INFO org.apache.hadoop.hdfs.server.namenode.LeaseManager: [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1] has expired hard limit\n2014-10-28 02:28:17,569 INFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem: Recovering [Lease.  Holder: DFSClient_attempt_X_Y_r_T_U_V_W, pendingcreates: 1], src=<FILENAME>\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-13T01:03:03.513+0000","updated":"2014-11-13T01:03:03.513+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14217142","id":"14217142","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"Here's a patch which triggered the infinite loop in the Namenode. (You'll have to comment out this line in FSNamesystem.internalReleaseLease\n{code}\nassert false : \"Already checked that the last block is incomplete\";\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-19T00:34:19.151+0000","updated":"2014-11-19T00:34:19.151+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14217160","id":"14217160","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"Its also worth noting that I spent quite a few cycles trying to get the file itself in a state where the penultimate block was marked as COMMITTED and last as COMPLETE (by stopping the nodes with the penultimate block while writing various blocks) but wasn't successful. Also, there's no easy way for me to iterate through values of minReplication (true/false) because BlockManager.minReplication is a final member.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-19T00:40:42.046+0000","updated":"2014-11-19T00:40:42.046+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14217573","id":"14217573","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Yongjun!\n\nHere's a patch with your suggested fix. I converted the assertAllBlocksComplete() method into assertAllBlocksCompleteOrCommitted() . This is the only place it is ever used, so we should be fine.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-19T07:53:52.463+0000","updated":"2014-11-19T07:53:52.463+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14217748","id":"14217748","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12682370/HDFS-7342.2.patch\n  against trunk revision 5bd048e.\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-hdfs-project/hadoop-hdfs.\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-HDFS-Build/8780//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-HDFS-Build/8780//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-11-19T11:06:12.769+0000","updated":"2014-11-19T11:06:12.769+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14218085","id":"14218085","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"body":"HI Ravi,\n\nThanks a lot for your continued effort to work on this!\n\nI had some concern of changing {{assertAllBlocksComplete()}} to {{assertAllBlocksCompleteOrCommitted()}}, because {{finalizeINodeFileUnderConstruction}} checks to make sure all blocks are complete (which means all blocks need to have minimal replication) before closing a file. Your suggested change would change the behavior here, and I think it may not be safe.\n\nGood thing is, the place that we are fixing does check the minimal replication requirement before calling {{finalizeINodeFileUnderConstruction}}. So I was looking into addressing this issue in a different approach on top of my earlier suggested fix at https://issues.apache.org/jira/browse/HDFS-4882?focusedCommentId=14215703&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14215703. \n\nHere is the complete snapshot of my approach:\n\n{code}\n    // If penultimate block doesn't exist then its minReplication is met\n    boolean penultimateBlockMinReplication = penultimateBlock == null ? true :\n        blockManager.checkMinReplication(penultimateBlock);\n    BlockUCState penultimateBlockState = penultimateBlock == null ?\n        BlockUCState.COMPLETE : penultimateBlock.getBlockUCState();\n    String blockStateStr = \"(penultimateBlockState=\" + penultimateBlockState +\n        \" lastBlockState=\"+lastBlockState + \")\";\n\n    switch(lastBlockState) {\n    case COMPLETE:\n      // Getting here means the penultimate block is COMMITTED, fallthrough\n      // to handle the same way as when the final block is COMMITTED\n    case COMMITTED:\n      blockStateStr = \"(penultimateBlockState=\" + penultimateBlockState +\n        \" lastBlockState=\"+lastBlockState + \")\";\n      // Close file if committed blocks are minimally replicated\n      if(penultimateBlockMinReplication &&\n          blockManager.checkMinReplication(lastBlock)) {\n        if (penultimateBlock != null &&\n            penultimateBlockState == BlockUCState.COMMITTED) {\n          getBlockManager().forceCompleteBlock(pendingFile,\n              (BlockInfoUnderConstruction)penultimateBlock);\n        }\n        getBlockManager().forceCompleteBlock(pendingFile,\n            (BlockInfoUnderConstruction) lastBlock);\n        finalizeINodeFileUnderConstruction(src, pendingFile,\n            iip.getLatestSnapshotId());\n        NameNode.stateChangeLog.warn(\"BLOCK*\"\n          + \" internalReleaseLease: Committed blocks are minimally replicated,\"\n          + \" lease removed, file closed \" + blockStateStr + \".\");\n        return true;  // closed!\n      }\n      // Cannot close file right now, since some blocks\n      // are not yet minimally replicated.\n      // This may potentially cause infinite loop in lease recovery\n      // if there are no valid replicas on data-nodes.\n      String message = \"DIR* NameSystem.internalReleaseLease: \" +\n          \"Failed to release lease for file \" + src +\n          \". Committed blocks are waiting to be minimally replicated \" +\n          blockStateStr + \". Try again later.\";\n      NameNode.stateChangeLog.warn(message);\n      throw new AlreadyBeingCreatedException(message);\n    case UNDER_CONSTRUCTION:\n{code}\n\nThat is, add the {{getBlockManager().forceCompleteBlock}} for the neede blocks before calling\n{code}\n        finalizeINodeFileUnderConstruction(src, pendingFile,\n            iip.getLatestSnapshotId());\n{code}\n\nHowever, there is a problem because of the way your test is written, the {{BlockInfoUCDesired}} in your test is not allowed to be converted to {{(BlockInfoUnderConstruction}}. I was looking a bit more into fixing that.\n\nMake sense to you? If you agree, maybe you can look further into this direction?\n\nBTW, notice I had the block state added to the messsage printing, which I think is important. Also I added comments in between the two {{case}} statements.\n\nThanks again!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-19T16:25:41.445+0000","updated":"2014-11-19T16:25:41.445+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14218962","id":"14218962","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"body":"HI Ravi,\n\nI worked out a version toward the direction I described in my last comment (use {{getBlockManager().forceCompleteBlock}}).\n\nBelow are the main changes I made:\n\n* I forgot one condition check in the snapshot of code change in my last comment, revised as \n{code}\n  if (lastBlockState == BlockUCState.COMMITTED) {\n    getBlockManager().forceCompleteBlock(pendingFile,\n        (BlockInfoUnderConstruction) lastBlock);\n   }\n{code}\n*  Replace your original {{BlockInfoDdesired}} with the following\n{code}\n  class BlockInfoUcDesired extends BlockInfoUnderConstruction {\n    BlockUCState desiredState;\n    BlockInfoUcDesired(BlockInfo blk, BlockUCState state) {\n      super(blk, (short)3);\n      desiredState = state;\n      setBlockCollection(blk.getBlockCollection());\n    }\n    @Override\n    public BlockUCState getBlockUCState() {\n      return desiredState;\n    }\n  }\n{code}\n*  Replace\n{code}\n  assert lm.getLeaseByPath(testFile.toString()).getHolder().equals(\n      HdfsServerConstants.NAMENODE_LEASE_HOLDER) : \"Lease not recovered\";\n{code}\nwith\n{code}\n  Lease lease = lm.getLeaseByPath(testFile.toString());\n  String leaseHolder = (lease == null) ? \"\" : lease.getHolder();\n  assert leaseHolder == \"\" ||\n      leaseHolder == HdfsServerConstants.NAMENODE_LEASE_HOLDER :\n        \"Lease not recovered\";\n{code}\n\nWould you please revise the patch with the above changes I suggested?\n\nNotice that even though the tests now pass, there are some ERROR messages in the test log file after the test finished. I studied a bit, and figured out that it's because DFSClient tries to close all files at the very end of the test, but the files were already closed by the leaseManager. So this kind of ERROR msgs are expected based on my understanding.\n\nBTW, there are some format changes needed in the test code you did, such as shorten lines that's over 80, when splitting one line into two, the second part need to have 4 spaces difference in the beginning etc. \n\nThanks a lot.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-20T03:55:15.362+0000","updated":"2014-11-20T03:55:15.362+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14219744","id":"14219744","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Yongjun! Sorry for the delay, but I got to thinking\n1. What is special about the penultimate block that it could be COMMITTED when the last block is COMPLETE? Could that happen to any of the preceding blocks?\n2. Do other callers of finalizeINodeFileUnderConstruction have the same expectations that internalReleaseLease did (i.e. even when the penultimate/non-last block is !COMPLETE) it should finalize the file.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-20T18:35:17.853+0000","updated":"2014-11-20T18:35:17.853+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14219922","id":"14219922","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Ravi,\n\nNo problem, actually you responded pretty fast and I really appreciate it!\n\nGood thoughts! \n\nTo answer your comment#1: for the case that blocks even before penultimate block that are COMMITTED, current code handles it as\n{code}\n    // Only the last and the penultimate blocks may be in non COMPLETE state.\n    // If the penultimate block is not COMPLETE, then it must be COMMITTED.\n    if(nrCompleteBlocks < nrBlocks - 2 ||\n       nrCompleteBlocks == nrBlocks - 2 &&\n         curBlock != null &&\n         curBlock.getBlockUCState() != BlockUCState.COMMITTED) {\n      final String message = \"DIR* NameSystem.internalReleaseLease: \"\n        + \"attempt to release a create lock on \"\n        + src + \" but file is already closed.\";\n      NameNode.stateChangeLog.warn(message);\n      throw new IOException(message);\n    }\n{code}\nwhich means the lease will be released right away because of the IOException. The exception message there is a bit misleading though. I'm actually not so sure about the effect of releasing the lease without closing the file (e.g., my guess is, there might be some bad effect, and it's not uncovered because this code path is not really exercised). But  I guess this kind of case would be more rare than penultimate block being COMMITTED and last block being COMPLETE (which I refer to as caseOfInterest).  So we could possibly live with the current code.\n\nMy suggested approach was to handle caseOfInterest is to do it similar like penultimate block being COMPLETE and last block being COMMITTED. Another approach is to treat them the same as the above pasted code. But since more people are hitting caseOfInterest problem, that means the chance it happens is relatively high. And since we are checking the minimal replication before calling finalizeINodeFileUnderConstruction, it looks safer to close the file before releasing the lease to me (as my suggested fix does).\n\nTo answer your comment#2, there are two other callers of the method {{finalizeINodeFileUnderConstruction}}, {{FSNamesystem#closeFileCommitBlocks}} and {{FSNameSystem#completeFileInternal}}. But the requirement is the same: {{finalizeINodeFileUnderConstruction}} expects all blocks are complete and throw an exception otherwise. Since we check minimal replication in {{internalReleaseLease}} before calling  {{finalizeINodeFileUnderConstruction}} , that's why I think we should call {{getBlockManager().forceCompleteBlock}} before calling  {{finalizeINodeFileUnderConstruction}} in the suggested fix. This sounds a safer solution than the pasted code above.\n\nComments?\n\nThanks.\n\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-20T20:15:27.028+0000","updated":"2014-11-20T20:15:27.028+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14222707","id":"14222707","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"body":"I got the reason, why [~raviprak] is facing the problem and I am not. \n\nYou have mentioned affected version as 2.0.0-alpha, which came to help.\nThe possibility of making the last block COMPLETE when the penultimate block still in COMMITTED state was before the fix of HDFS-5558 which was fixed in 2.3.0 version, though the problem faced at that time was not infinite loop, but crash of the lease monitor thread.\n\nAfter the fix, last block cannot be in COMPLETE state when others blocks are not COMPLETED, and infinite loop never occurs.\n\nI hope this clears the confusion. And I think, there is no change required in this Jira. In that case, can this be closed as Duplicate?\n\nHi  [~yzhangal], any thoughts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"created":"2014-11-24T06:01:34.111+0000","updated":"2014-11-24T06:01:34.111+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14222769","id":"14222769","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~vinayrpet],\n\nThanks for the good catch of yours! \n\nYes, I examined the version of the s/w that caused my case, it doesn't have HDFS-5558. And so is Ravi's case.\n\nIf HDFS-5558 avoids the case that penultimate block is COMMITTED and last block is COMPLETE, I had the following thoughts.\n\nWith HDFS-5558 fix, I assume the case that both the penultimate and the last block are COMMITTED could be possible, which case the code pasted in https://issues.apache.org/jira/browse/HDFS-4882?focusedCommentId=14213992&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14213992 would be executed.\n\nEven though the lease can be removed in this case based on current trunk code,  in scenario#1 described in that comment, if both blocks have minimal replication number of blocks,  there would be an exception thrown because the method {{finalizeINodeFileUnderConstruction}} that calls:\n{code}\n      Preconditions.checkState(blocks[i].isComplete(), \"Failed to finalize\"\n          + \" %s %s since blocks[%s] is non-complete, where blocks=%s.\",\n          getClass().getSimpleName(), this, i, Arrays.asList(blocks));\n{code}\nThus the file won't be closed.\n\nI proposed a solution here \n\nhttps://issues.apache.org/jira/browse/HDFS-7342?focusedCommentId=14218085&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14218085\n(and the one that follows it)\n\nwould avoid this by forcing the penultimate and last block to complete if they already have minimal replication number of replicas, and the file will be closed successfully.\n\nAny comments/thoughts on this proposed solution?\n\nHi Ravi, to help further discussion about the fix here, would you please help consolidating your testcase with the solution I suggested above?\n\nThanks.\n\n\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-24T08:08:41.421+0000","updated":"2014-11-24T08:08:41.421+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14222817","id":"14222817","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"body":"bq. With HDFS-5558 fix, I assume the case that both the penultimate and the last block are COMMITTED could be possible\nI agree, this is possible only in case of {{commitBlockSynchronization()}} and finalize fails. But as of now this also removes the lease, and which will not be added back immediately. Lease will be present in the Standby NN, or it will come back after NN restart. Note that at that time also last Block state will be UNDER_CONSTRUCTION not COMMITTED. COMMITTED state is only at ACTIVE NN side.\n\nbq. in scenario#1 described in that comment, if both blocks have minimal replication number of blocks, there would be an exception thrown because the method finalizeINodeFileUnderConstruction that calls:\nIf any COMMITTED blocks reaches minReplication, state will be automatically changed to COMPLETE while processing that IBR itself. Need not be user call. So there is no chance of COMMITTED block state with minReplication met. right?\n\nOne more thing I have observed was, In this state, where penultimate was not having minReplication(=2) replicas, but had only one replica, restarted the Namenode, and NN scheduled replication for penultimate block and replicated successfully even before lease recovery was triggered. Later lease recovery was successful as everything was OK.\n\nHow about scheduling replication during the lease recovery for such penultimate blocks with atleast one replica available to satisfy min-replication, then go ahead for lease recovery. Till now this situation might not have experienced as minReplication itself by default was 1. \n\nAny thoughts...?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"created":"2014-11-24T09:19:03.769+0000","updated":"2014-11-24T09:19:03.769+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14223049","id":"14223049","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Yongjun! Thanks a lot for your very helpful and detailed explanations and patience while we work through this. Much appreciated.\nHere's the patch with what I have so far. Is my understanding of the conversation with Jing and Colin correct?\nI was also wondering what happens when the penultimate block is COMMITTED but last block is UNDER_RECOVERY/UNDER_CONSTRUCTION ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-24T15:31:28.831+0000","updated":"2014-11-24T15:31:28.831+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14223105","id":"14223105","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kihwal","name":"kihwal","key":"kihwal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kihwal&avatarId=34594","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kihwal&avatarId=34594","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kihwal&avatarId=34594","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kihwal&avatarId=34594"},"displayName":"Kihwal Lee","active":true,"timeZone":"America/Chicago"},"body":"bq. How about scheduling replication during the lease recovery for such penultimate blocks with atleast one replica available to satisfy min-replication, then go ahead for lease recovery. Till now this situation might not have experienced as minReplication itself by default was 1. \n\nLet's first think about the meaning of min-replication. It is the level of degradation that is allowed before being considered critical in terms of data durability. Falling below this level does not necessarily mean a failure (i.e. data not available) unless min-replica is 1. For synchronous or semi-synchronous operations such as {{addBlcok()}} and {{complete()}}, this is *enforced* to maintain the healthy steady state. Clients also do their best to meet this, but any failures on datanodes between finalizing a block and sending the IBR are beyond their control.  For asynchronous recovery activities such as lease recovery and replication, min-replica should be advisory.  Since replication is already doing the right thing, let's focus on lease recovery.\n\nDealing with COMMITTED blocks is simpler. Being committed means the client thought enough number of replicas were finalized. If a lease is expired, the block can simply turn in to COMPLETE. If it has at least one live replica, it will be replicated soon after closing the file. If it doesn't, the block will be considered missing.  I think it is better to report the committed but missing data early rather than hiding it in the infinite lease recovery cycle.  Also, recovery will be faster this way.  If all blocks in a file are in either complete or committed state, lease recovery may force complete all committed blocks and close the file. The rest will be up to the replication monitor.\n\n{{recoverLeaseInternal()}} and {{internalReleaseLease()}} will need to be made to distinguish the on-demand recovery from normal lease expiration.  For on-demand recovery, we might want it to fail if there is no live replicas, as a file lease is normally recovered for subsequent append or copy(read). If there is no data, they will fail.\n\nFor recovering blocks in the UNDER_CONSTRUCTION state, we can make {{commitBlockSynchronization()}} to force commit when there is at least one replica, ignoring min-replication. It will allow the recovery to make progress and eventually the file to be closed if there is at least one replica per block. Then the blocks can be replicated.  This is far better than getting stuck in recovery.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kihwal","name":"kihwal","key":"kihwal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kihwal&avatarId=34594","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kihwal&avatarId=34594","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kihwal&avatarId=34594","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kihwal&avatarId=34594"},"displayName":"Kihwal Lee","active":true,"timeZone":"America/Chicago"},"created":"2014-11-24T16:26:43.210+0000","updated":"2014-11-24T16:26:43.210+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14223109","id":"14223109","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"body":"bq. If all blocks in a file are in either complete or committed state, lease recovery may force complete all committed blocks and close the file. The rest will be up to the replication monitor.\nbq.  we can make commitBlockSynchronization() to force commit when there is at least one replica, ignoring min-replication. It will allow the recovery to make progress and eventually the file to be closed if there is at least one replica per block. Then the blocks can be replicated. This is far better than getting stuck in recovery.\nMakes sense.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"created":"2014-11-24T16:31:58.878+0000","updated":"2014-11-24T16:31:58.878+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14223290","id":"14223290","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12683334/HDFS-7342.3.patch\n  against trunk revision 555fa2d.\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-hdfs-project/hadoop-hdfs:\n\n                  org.apache.hadoop.hdfs.TestLeaseRecovery2\n                  org.apache.hadoop.hdfs.server.namenode.TestLeaseManager\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-HDFS-Build/8819//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-HDFS-Build/8819//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-11-24T18:53:27.648+0000","updated":"2014-11-24T18:53:27.648+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14224213","id":"14224213","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Guys, \n\nThanks a lot for the comments and new rev. Please see my comments below, one for each of you:-)\n\n{quote}\nIf any COMMITTED blocks reaches minReplication, state will be automatically changed to COMPLETE while processing that IBR itself. Need not be user call. So there is no chance of COMMITTED block state with minReplication met. right?\n{quote}\nHi [~vinayrpet], indeed the following code in {{BlockManager::addStoredBlock}} may be called when IBR is processed, that matches what you were saying:\n{code}\n  if(storedBlock.getBlockUCState() == BlockUCState.COMMITTED &&\n        numLiveReplicas >= minReplication) {\n      storedBlock = completeBlock(bc, storedBlock, false);\n  }\n{code}\nBut the block has to be COMMITTED to be made COMPLETE. If it's not COMMITTED yet (changing to COMMITTED is a request from client and it's asynchronous) , even if it has min replication number of replications, it won't be changed to COMPLETE. So I think we may still need to take care of changing block's state to COMPLETE in {{FSNamesystem#internalReleaseLease}}. Right?\n\nHi [~kihwal], \n\nSummary of my understanding of your comment is, there are two paths, one is the regular write, the other is recovery. \n* for regular write path, we need to enforce minimal replication\n* for the recovery patch, we just need to enforce 1 replica and let replication monitor to take care of the rest.\n* we can make commitBlockSynchronization() to change a block to COMMITTED when there is at least one replica, ignoring min-replication. Currently only client can inform NN asynchronously to make a block COMMITTED.\n\nI think it makes sense. Am I understanding you correctly?\n\nHi Ravi,\nThanks for the new rev. While we are still discussing the final solution, I noticed couple of things in your rev3 per my original suggested solution:\n \n1. Change \n{code}\n4471\t   * <li>If the penultimate/last block is COMMITTED or COMPLETE -> force the \n4472\t   * block to be COMPLETE even if it is not minimally replicated</li>\n{code}\nTo\n{code}\n4471\t   * <li>If the penultimate/last block is COMMITTED  -> force the \n4472\t   * block to be COMPLETE if it is minimally replicated</li>\n{code}\n\n2. you forgot to add {{setBlockCollection(blk.getBlockCollection());}} in BlockInfoDesired constructor, thus Null pointer exception will happen. \n\nLet's not rush into addressing those, but see if we can work out a solution toward the direction Kihwal stated.\n\nThank you all again.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-25T08:21:13.077+0000","updated":"2014-11-25T08:21:13.077+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14224407","id":"14224407","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"body":"{quote}But the block has to be COMMITTED to be made COMPLETE. If it's not COMMITTED yet (changing to COMMITTED is a request from client and it's asynchronous) , even if it has min replication number of replications, it won't be changed to COMPLETE. So I think we may still need to take care of changing block's state to COMPLETE in FSNamesystem#internalReleaseLease. Right?{quote}\nI agree that client request and Datanode's IBR are asynchronous. But both will update the block state under writelock.\npenultimate block will  be COMMITTED in the {{getAdditionalBlock()}} client's request.\n\nHere there are 3 possibilities,\n1. All IBRs comes before even block is COMMITTED. At this time, if the block is FINALIZED in DN, replica will be accepted.\n{code}    if (ucBlock.reportedState == ReplicaState.FINALIZED &&\n        !block.findDatanode(storageInfo.getDatanodeDescriptor())) {\n      addStoredBlock(block, storageInfo, null, true);\n    }{code}\n2. If client request comes after receiving 2 (=minReplication) IBRs, then client request only will make the state to COMPLETED immediately after making it COMMITTED in following code of {{BlockManager#commitOrCompleteLastBlock()}}\n{code}    final boolean b = commitBlock((BlockInfoUnderConstruction)lastBlock, commitBlock);\n    if(countNodes(lastBlock).liveReplicas() >= minReplication)\n      completeBlock(bc, bc.numBlocks()-1, false);\n    return b;{code}\n  At this time, if the IBRs received are not enough, then block will be just COMMITTED.\n\n3. If the IBRs received after client request. i.e. after COMMITTED, then while processing the second IBR block will be COMPLETED in below code.\n{code}    if(storedBlock.getBlockUCState() == BlockUCState.COMMITTED &&\n        numLiveReplicas >= minReplication) {\n      storedBlock = completeBlock(bc, storedBlock, false);{code}\n\nSo I couldnt find the possibility of the Block in COMMITTED state with minReplication met.\n\n{quote}{{recoverLeaseInternal()}} and {{internalReleaseLease()}} will need to be made to distinguish the on-demand recovery from normal lease expiration. For on-demand recovery, we might want it to fail if there is no live replicas, as a file lease is normally recovered for subsequent append or copy(read). If there is no data, they will fail.{quote}\nI understood [~kihwal]'s suggestions as below.\n{{recoverLease()}} call from client passes a {{force}} flag to {{recoverLeaseInternal()}}. Based on this flag, we can check the block's states (excluding last block) and # of replicas and decide to go ahead for recovery or not even initiating request to DataNode. \nSo we need not worry this case in commitBlockSynchronization. In {{commitBlockSynchronization()}} directly complete all blocks and close the file.\nAm I right [~kihwal] ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"created":"2014-11-25T11:18:33.229+0000","updated":"2014-11-25T11:18:33.229+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14224827","id":"14224827","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks a lot for your detailed explanation [~vinayrpet].\n{quote}\n2. If client request comes after receiving 2 (=minReplication) IBRs, ...\n{quote}\nIt seems that lease recovery could happen before the client request comes here, when this happens, the block state would be COMMITTED with minReplication met, right?\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-25T17:02:54.888+0000","updated":"2014-11-25T17:02:54.888+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14225767","id":"14225767","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"body":"bq. It seems that lease recovery could happen before the client request comes here, when this happens, the block state would be COMMITTED with minReplication met, right?\nWe are talking about the state of the penultimate block not the last block, which is the cause found for this issue.\n1. For the penultimate block, only client request (request for another block) will make it COMMITTED, as client will be still alive and adds one more block.\n2. And for the last block, client makes it COMMITTED during normal closure, else {{commitBlockSynchronization()}} during the lease recovery closure. \n\nI see no other places, block getting COMMITTED.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinayrpet","name":"vinayrpet","key":"vinayrpet","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinayakumar B","active":true,"timeZone":"Asia/Kolkata"},"created":"2014-11-26T05:23:16.885+0000","updated":"2014-11-26T05:23:16.885+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14226765","id":"14226765","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~vinayrpet],\n\nThanks for further explanation. I studied your latest two comments, and I agree with your analysis: the case that penultimate block being in COMMITTEED sate with minimal replication met may not exist. In other words, when penultimate block is in COMMITTED state, the minimal replication is not met.\n\nGoing back to the source that triggerd this discussion, it's the scenario#1 described in:\n https://issues.apache.org/jira/browse/HDFS-4882?focusedCommentId=14213992&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14213992\n\nHere is what I think now:\n\nscenario#1 exists for last block but not penultimate block\nscenarion#2 exists for both penultimate and last block\n\nMy suggested solution for this jia is to share the same code that handles the case when last block is COMMITTEED, with some modifications:\n\n* For scenarion#1 (last block), my suggested solution is to forceComplete the block before calling  {{finalizeINodeFileUnderConstruction}}:\n{code}\n        if (lastBlockState == BlockUCState.COMMITTED) {\n          getBlockManager().forceCompleteBlock(pendingFile,\n              (BlockInfoUnderConstruction) lastBlock);\n        }\n        finalizeINodeFileUnderConstruction(src, pendingFile,\n            iip.getLatestSnapshotId());\n{code}\nthus avoiding the exception thrown from {{finalizeINodeFileUnderConstruction}} caused by\n{code}\nPreconditions.checkState(blocks[i].isComplete(), \"Failed to finalize\"\n          + \" %s %s since blocks[%s] is non-complete, where blocks=%s.\",\n          getClass().getSimpleName(), this, i, Arrays.asList(blocks));\n{code}\n\n* For scenarion#2, the same code can be shared to handle the case that when penultimate block is COMMITTED with minimal replication NOT met. the lease will be recovered, even if it's this kind of state.\n\nOn top of this suggested solution, we can add what Kihwal suggested.\n\nWhat do you think?\n\nThanks.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-26T20:19:05.923+0000","updated":"2014-11-26T20:19:05.923+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14520401","id":"14520401","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"I found another\\(?) instance in which the lease is not recovered. This is reproducible easily on a pseudo-distributed single node cluster\n# Before you start it helps if you set. This is not necessary, but simply reduces how long you have to wait \n{code}\n  public static final long LEASE_SOFTLIMIT_PERIOD = 30 * 1000;\n  public static final long LEASE_HARDLIMIT_PERIOD = 2 * LEASE_SOFTLIMIT_PERIOD;\n{code}\n# Client starts to write a file. (could be less than 1 block, but it hflushed so some of the data has landed on the datanodes) (I'm copying the client code I am using. I generate a jar and run it using $ hadoop jar TestHadoop.jar)\n# Client crashes. (I simulate this by kill -9 the $(hadoop jar TestHadoop.jar) process after it has printed \"Wrote to the bufferedWriter\"\n# Shoot the datanode. (Since I ran on a pseudo-distributed cluster, there was only 1)\n\nI believe the lease should be recovered and the block should be marked missing. However this is not happening. The lease is never recovered. I am going to check what happens when only the primary datanode is shot. {color:red}Please let me know if I shouldn't hijack this JIRA. By default I will{color}\n\n{code:title=TestHadoop.java|borderStyle=solid}\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FSDataOutputStream;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\n\npublic class TestHadoop {\n  public static void main(String args[]) throws IOException, InterruptedException {\n    Path path = new Path(\"/tmp/testHadoop\");\n    Configuration conf = new Configuration();\n    FileSystem fs = FileSystem.get(conf);\n    System.out.println(\"DefaultFS: \" + conf.get(\"fs.defaultFS\"));\n    System.out.flush();\n    FSDataOutputStream hdfsout = fs.create(path,true);\n    BufferedWriter br=new BufferedWriter(new OutputStreamWriter(hdfsout));\n    System.out.println(\"Created the bufferedWriter\" );\n    System.out.flush();\n    br.write(\"Some string\");\n    br.flush();\n    hdfsout.hflush();\n    System.out.println(\"Wrote to the bufferedWriter\" );\n    System.out.flush();\n    \n    Thread.sleep(120000); //KILL THE PROCESS DURING THIS SLEEP\n    br.close();\n    System.out.println(\"Closed the bufferedWriter\" );\n    System.out.flush();\n  }\n}\n{code}\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-04-29T22:20:36.715+0000","updated":"2015-04-29T22:20:36.715+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14520605","id":"14520605","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"I checked with 2 datanodes, and the correct thing happens. i.e. the lease is recovered properly. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-04-30T00:34:03.558+0000","updated":"2015-04-30T00:34:03.558+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14531834","id":"14531834","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"Here's a patch with a unit test and a fix. Could people please review it?\n\nThe effect of this bug for us was that nodes could not be decommissioned cleanly. Although we knew that the client had crashed, the Namenode never released the leases (even after restarting the Namenode) (even months afterwards). There are actually several other cases too where we don't consider what happens if ALL the datanodes die while the file is being written, but I am going to punt on that for another time.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-07T01:08:35.778+0000","updated":"2015-05-07T01:08:35.778+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14531989","id":"14531989","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"\\\\\n\\\\\n| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | pre-patch |  14m 32s | Pre-patch trunk compilation is healthy. |\n| {color:green}+1{color} | @author |   0m  0s | The patch does not contain any @author tags. |\n| {color:green}+1{color} | tests included |   0m  0s | The patch appears to include 1 new or modified test files. |\n| {color:green}+1{color} | javac |   7m 28s | There were no new javac warning messages. |\n| {color:green}+1{color} | javadoc |   9m 31s | There were no new javadoc warning messages. |\n| {color:green}+1{color} | release audit |   0m 22s | The applied patch does not increase the total number of release audit warnings. |\n| {color:red}-1{color} | checkstyle |   2m 17s | The applied patch generated  4 new checkstyle issues (total was 538, now 525). |\n| {color:green}+1{color} | whitespace |   0m  1s | The patch has no lines that end in whitespace. |\n| {color:green}+1{color} | install |   1m 34s | mvn install still works. |\n| {color:green}+1{color} | eclipse:eclipse |   0m 33s | The patch built with eclipse:eclipse. |\n| {color:green}+1{color} | findbugs |   3m  3s | The patch does not introduce any new Findbugs (version 2.0.3) warnings. |\n| {color:green}+1{color} | native |   3m 14s | Pre-build of native portion |\n| {color:red}-1{color} | hdfs tests | 163m 56s | Tests failed in hadoop-hdfs. |\n| | | 206m 35s | |\n\\\\\n\\\\\n|| Reason || Tests ||\n| Failed unit tests | hadoop.tracing.TestTraceAdmin |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Patch URL | http://issues.apache.org/jira/secure/attachment/12731032/HDFS-7342.04.patch |\n| Optional Tests | javadoc javac unit findbugs checkstyle |\n| git revision | trunk / 4c7b9b6 |\n| checkstyle |  https://builds.apache.org/job/PreCommit-HDFS-Build/10839/artifact/patchprocess/diffcheckstylehadoop-hdfs.txt |\n| hadoop-hdfs test log | https://builds.apache.org/job/PreCommit-HDFS-Build/10839/artifact/patchprocess/testrun_hadoop-hdfs.txt |\n| Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/10839/testReport/ |\n| Java | 1.7.0_55 |\n| uname | Linux asf909.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |\n| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/10839/console |\n\n\nThis message was automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2015-05-07T04:47:00.500+0000","updated":"2015-05-07T04:47:00.500+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14532050","id":"14532050","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~raviprak],\n\nThanks for reporting the new case and patch. I think it may be better to have a new jira for this case, so we don't mix the discussion. What do you think? Thanks..\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=yzhangal","name":"yzhangal","key":"yzhangal","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yongjun Zhang","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-07T05:46:30.859+0000","updated":"2015-05-07T05:46:30.859+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/14940323","id":"14940323","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vganji","name":"vganji","key":"vganji","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Venkata Ganji","active":true,"timeZone":"America/Los_Angeles"},"body":"Hello [~raviprak], I have a quick question, will the above test reproduce the infinite loop of recovery by lease manager ? I am trying to reproduce this issue in Hadoop 2.0.0.\n\nThanks","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vganji","name":"vganji","key":"vganji","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Venkata Ganji","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-10-01T20:05:12.484+0000","updated":"2015-10-01T20:05:12.484+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12752623/comment/16480259","id":"16480259","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"body":"A lot of work went into LeaseRecovery from my collection. Although I have not verified that its been fixed, the chances are high that it has. Hence closing this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=raviprak","name":"raviprak","key":"raviprak","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=raviprak&avatarId=10113","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=raviprak&avatarId=10113","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=raviprak&avatarId=10113","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=raviprak&avatarId=10113"},"displayName":"Ravi Prakash","active":true,"timeZone":"America/Los_Angeles"},"created":"2018-05-18T07:02:09.774+0000","updated":"2018-05-18T07:02:09.774+0000"}],"maxResults":28,"total":28,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/HDFS-7342/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i21xdr:"}}