{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10443",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10443",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10443",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10443"
            },
            "displayName": "Xuan Gong",
            "key": "xgong",
            "name": "xgong",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=xgong",
            "timeZone": "America/Los_Angeles"
        },
        "components": [{
            "id": "12319323",
            "name": "nodemanager",
            "self": "https://issues.apache.org/jira/rest/api/2/component/12319323"
        }],
        "created": "2012-03-30T05:26:56.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xieguiming&avatarId=14331",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xieguiming&avatarId=14331",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xieguiming&avatarId=14331",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xieguiming&avatarId=14331"
            },
            "displayName": "xieguiming",
            "key": "xieguiming",
            "name": "xieguiming",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=xieguiming",
            "timeZone": "Etc/UTC"
        },
        "customfield_10010": null,
        "customfield_12310191": [{
            "id": "10343",
            "self": "https://issues.apache.org/jira/rest/api/2/customFieldOption/10343",
            "value": "Reviewed"
        }],
        "customfield_12310192": null,
        "customfield_12310220": "2012-09-23T03:53:23.142+0000",
        "customfield_12310222": "10002_*:*_4_*:*_270786139_*|*_1_*:*_4_*:*_31652281127_*|*_5_*:*_1_*:*_0",
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "6.0",
        "customfield_12310320": null,
        "customfield_12310420": "233879",
        "customfield_12310920": "69056",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i0c6v3:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 04 14:05:53 UTC 2013",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "see the red color:\n\norg.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl.java\n\n protected void startStatusUpdater() {\n\n    new Thread(\"Node Status Updater\") {\n      @Override\n      @SuppressWarnings(\"unchecked\")\n      public void run() {\n        int lastHeartBeatID = 0;\n        while (!isStopped) {\n          // Send heartbeat\n          try {\n            synchronized (heartbeatMonitor) {\n              heartbeatMonitor.wait(heartBeatInterval);\n            }\n        {color:red} \n            // Before we send the heartbeat, we get the NodeStatus,\n            // whose method removes completed containers.\n            NodeStatus nodeStatus = getNodeStatus();\n         {color}\n            nodeStatus.setResponseId(lastHeartBeatID);\n            \n            NodeHeartbeatRequest request = recordFactory\n                .newRecordInstance(NodeHeartbeatRequest.class);\n            request.setNodeStatus(nodeStatus);   \n            {color:red} \n\n           // But if the nodeHeartbeat fails, we've already removed the containers away to know about it. We aren't handling a nodeHeartbeat failure case here.\n            HeartbeatResponse response =\n              resourceTracker.nodeHeartbeat(request).getHeartbeatResponse();\n           {color} \n\n            if (response.getNodeAction() == NodeAction.SHUTDOWN) {\n              LOG\n                  .info(\"Recieved SHUTDOWN signal from Resourcemanager as part of heartbeat,\" +\n                  \t\t\" hence shutting down.\");\n              NodeStatusUpdaterImpl.this.stop();\n              break;\n            }\n            if (response.getNodeAction() == NodeAction.REBOOT) {\n              LOG.info(\"Node is out of sync with ResourceManager,\"\n                  + \" hence rebooting.\");\n              NodeStatusUpdaterImpl.this.reboot();\n              break;\n            }\n\n            lastHeartBeatID = response.getResponseId();\n            List<ContainerId> containersToCleanup = response\n                .getContainersToCleanupList();\n            if (containersToCleanup.size() != 0) {\n              dispatcher.getEventHandler().handle(\n                  new CMgrCompletedContainersEvent(containersToCleanup));\n            }\n            List<ApplicationId> appsToCleanup =\n                response.getApplicationsToCleanupList();\n            //Only start tracking for keepAlive on FINISH_APP\n            trackAppsForKeepAlive(appsToCleanup);\n            if (appsToCleanup.size() != 0) {\n              dispatcher.getEventHandler().handle(\n                  new CMgrCompletedAppsEvent(appsToCleanup));\n            }\n          } catch (Throwable e) {\n            // TODO Better error handling. Thread can die with the rest of the\n            // NM still running.\n            LOG.error(\"Caught exception in status-updater\", e);\n          }\n        }\n      }\n    }.start();\n  }\n\n\n\n  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus = recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers = 0;\n    List<ContainerStatus> containersStatuses = new ArrayList<ContainerStatus>();\n    for (Iterator<Entry<ContainerId, Container>> i =\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry<ContainerId, Container> e = i.next();\n      ContainerId containerId = e.getKey();\n      Container container = e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus = \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n      {color:red} \n\n      // Here is the part that removes the completed containers.\n      if (containerStatus.getState() == ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n      {color} \n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus = this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node's health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List<ApplicationId> keepAliveAppIds = createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }\n",
        "duedate": null,
        "environment": "suse.",
        "fixVersions": [{
            "archived": false,
            "description": "2.1.0-beta release",
            "id": "12324029",
            "name": "2.1.0-beta",
            "releaseDate": "2013-08-22",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12324029"
        }],
        "issuelinks": [],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "id": "4",
            "name": "Minor",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12313722&avatarId=15135",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12313722&avatarId=15135",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12313722&avatarId=15135",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12313722&avatarId=15135"
            },
            "id": "12313722",
            "key": "YARN",
            "name": "Hadoop YARN",
            "projectCategory": {
                "description": "Scalable Distributed Computing",
                "id": "10292",
                "name": "Hadoop",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/10292"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12313722"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xieguiming&avatarId=14331",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xieguiming&avatarId=14331",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xieguiming&avatarId=14331",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xieguiming&avatarId=14331"
            },
            "displayName": "xieguiming",
            "key": "xieguiming",
            "name": "xieguiming",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=xieguiming",
            "timeZone": "Etc/UTC"
        },
        "resolution": {
            "description": "A fix for this issue is checked into the tree and tested.",
            "id": "1",
            "name": "Fixed",
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1"
        },
        "resolutiondate": "2013-04-03T16:58:03.000+0000",
        "status": {
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "id": "6",
            "name": "Closed",
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "statusCategory": {
                "colorName": "green",
                "id": 3,
                "key": "done",
                "name": "Done",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3"
            }
        },
        "subtasks": [],
        "summary": "If  the heartbeat message loss, the nodestatus info of complete container will loss too.",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2013-08-27T22:15:29.000+0000",
        "versions": [],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/YARN-101/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/YARN-101/watchers",
            "watchCount": 11
        },
        "workratio": -1
    },
    "id": "12548782",
    "key": "YARN-101",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12548782"
}