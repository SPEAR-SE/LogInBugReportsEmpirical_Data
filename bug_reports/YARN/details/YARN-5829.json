{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13017808","self":"https://issues.apache.org/jira/rest/api/2/issue/13017808","key":"YARN-5829","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12313722","id":"12313722","key":"YARN","name":"Hadoop YARN","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12313722&avatarId=15135","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12313722&avatarId=15135","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12313722&avatarId=15135","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12313722&avatarId=15135"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/3","id":"3","description":"The problem is a duplicate of an existing issue.","name":"Duplicate"},"customfield_12312322":null,"customfield_12310220":"2017-02-17T02:07:43.680+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Tue Apr 04 17:51:43 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_3_*:*_11233859950_*|*_5_*:*_1_*:*_0_*|*_10002_*:*_3_*:*_1888565120","customfield_12312321":null,"resolutiondate":"2017-04-04T17:51:43.438+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/YARN-5829/watchers","watchCount":7,"isWatching":false},"created":"2016-11-03T20:44:38.441+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"2.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[{"id":"12499811","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12499811","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"inwardIssue":{"id":"13061319","key":"YARN-6432","self":"https://issues.apache.org/jira/rest/api/2/issue/13061319","fields":{"summary":"FairScheduler: Reserve preempted resources for corresponding applications","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}},{"id":"12496976","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12496976","type":{"id":"12310010","name":"Incorporates","inward":"is part of","outward":"incorporates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310010"},"inwardIssue":{"id":"13004195","key":"YARN-5636","self":"https://issues.apache.org/jira/rest/api/2/issue/13004195","fields":{"summary":"Support reserving resources on certain nodes for certain applications","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-04-04T17:52:01.257+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12322906","id":"12322906","name":"fairscheduler","description":"Fair Scheduler"}],"timeoriginalestimate":null,"description":"FS preemption evaluates nodes for preemption, and subsequently preempts identified containers. If this node is not reserved for a specific application, any other application could be allocated resources on this node. \n\nReserving the node for the starved application before preempting containers would help avoid this.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12861549","id":"12861549","filename":"YARN-5829.001.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-04-01T00:17:13.056+0000","size":38920,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12861549/YARN-5829.001.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12861737","id":"12861737","filename":"YARN-5829.002.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-04-03T16:54:02.289+0000","size":38920,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12861737/YARN-5829.002.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"FS preemption should reserve a node before considering containers on it for preemption","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kasha","name":"kasha","key":"kasha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Karthik Kambatla","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kasha","name":"kasha","key":"kasha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Karthik Kambatla","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15871054","id":"15871054","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Tao+Jie","name":"Tao Jie","key":"tao jie","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tao Jie","active":true,"timeZone":"Etc/UTC"},"body":"[~kasha], it seems similar situation as mentioned in YARN-5636.\nShould we have a common mechanism that supports \"reserving certain resource on a certain node for a certain app for a while\" ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Tao+Jie","name":"Tao Jie","key":"tao jie","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tao Jie","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-17T02:07:43.680+0000","updated":"2017-02-17T02:07:43.680+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15904453","id":"15904453","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"body":"[~Tao Jie], I like the idea that you described in YARN-5636.\n\nI did some testing and prototyping on this Jira. I am open to a wider solution as well.\n\n1. What I have learned so far is that preemption has a conflict with the following code:\n{code}\nisReservable(capability) &&\n        reserve(pendingAsk.getPerAllocationResource(), node, reservedContainer,\n            type, schedulerKey)\n{code}\nBasically the preempted application will have an excess demand and it will reserve the lost resources. They will be assigned back to it, when they become free.\n2. We also need to be careful with prioritizing reservations. For example how it works now is that a reservation takes priority before any other request.\nWhat happens, if I have a preemption from a lower priority request but there is a demand from a higher priority application?\n3. It is a great idea to have a timeout. We also need to take into consideration proper release of the reservation. If the app is killed, all reservations should be released.\nI do not see such code in the current reservation code for FS.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-03-10T05:11:55.938+0000","updated":"2017-03-10T05:11:55.938+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15904584","id":"15904584","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Tao+Jie","name":"Tao Jie","key":"tao jie","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tao Jie","active":true,"timeZone":"Etc/UTC"},"body":"Thank you [~miklos.szegedi@cloudera.com] for sharing your thought.\n1, It is easy to confuse the reservation we are taking about with the current reservation mechanism in scheduler. IIRC, the purpose of current reservation is to prevent starvation of request with large resource. And our reservation here is to assign container on node to one exact application.\n2, I feel both OK about 1)reuse/extend current reservation mechanism or 2)add another logic to handle the reservation for preemption.  If is 2), it's better to find another name to avoid naming confusion.\n3,\n{quote}\n2. We also need to be careful with prioritizing reservations. For example how it works now is that a reservation takes priority before any other request.\nWhat happens, if I have a preemption from a lower priority request but there is a demand from a higher priority application?\n{quote}\nIn my opinion, the reservation for preemption should have higher priority than current reservation in allocation. If starved application that triggers preempting is not satisfied as soon as possible, it will still in starvation and try to preempt more containers. However a normal application has reservation container on nodes would wait for a while since the resource is allocated to another starved application, it makes sense that application would get higher priority when itself becomes a starved application. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=Tao+Jie","name":"Tao Jie","key":"tao jie","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Tao Jie","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-10T06:56:01.751+0000","updated":"2017-03-10T06:56:01.751+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15905611","id":"15905611","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"body":"Thank you, [~Tao Jie] for the reply.\n1, I suggest turning off large resource starvation, if preemption is enabled. They do not work well together. In my situation A was preempted by B with equal demand but A kept reserving the preempted containers to itself.\n2, I will share the patch soon for this Jira. From there we can decide, whether it is worth to expand to a complete solution or keep it just for preemption.\n3, I agree, I also lean towards reservation for preemption being the highest priority allocation. The rationality behind it is that the preemption decision was made previously, not in the current situation. However, this might not be the opinion of others. I would be glad to see confirmation from the community.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-03-10T19:48:44.165+0000","updated":"2017-03-10T19:48:44.165+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15905999","id":"15905999","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"GitHub user szegedim opened a pull request:\n\n    https://github.com/apache/hadoop/pull/201\n\n    YARN-5829 Reserve containers for preemptors\n\n    YARN-5829 Reserve containers for preemptors.\n    The change does the following.\n    1. When a container is selected for preemption, it stores the preemptor next to the container.\n    2. When a container is finally completed it creates a reservation for the preemptor application.\n    3. On the next node update we check first reservations, then preemption reservations. They are satisfied before any other request, even if those have higher priorities. This is used tho avoid stealing preempted containers.\n    4. It also disables standard reservations because I noticed that the preempted applications reserve nodes for themselves stealing back the preempted resources.\n    5. If a preemptor is deleted before the preemption or after the preemption, the assignment won't happen at node update.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/szegedim/hadoop YARN-5829\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/hadoop/pull/201.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #201\n    \n----\ncommit 07acc98178ea88bdd1621dc39e2aa28354be7f63\nAuthor: Miklos Szegedi <miklos.szegedi@cloudera.com>\nDate:   2017-03-10T04:50:08Z\n\n    YARN-5829 Initial suggestion. Track preempted containers and create reservation, when they free up\n\ncommit 7009aac04f0eb9301868b50c6e0c1720db3b92e2\nAuthor: Miklos Szegedi <miklos.szegedi@cloudera.com>\nDate:   2017-03-11T01:00:28Z\n\n    YARN-5829 Added unit test, fixed concurrent exception bug with multiple preempted applications.\n\ncommit bbaa3a5980d1e25d2788c5f80539dfcdff500184\nAuthor: Miklos Szegedi <miklos.szegedi@cloudera.com>\nDate:   2017-03-11T01:42:15Z\n\n    YARN-5829 Make sure deleted applications do not satisfy reservations.\n\n----\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-11T01:52:41.170+0000","updated":"2017-03-11T01:52:41.170+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923132","id":"15923132","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105787743\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -118,23 +178,56 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n        *\n        * @param containers container to mark\n        */\n    -  void addContainersForPreemption(Collection<RMContainer> containers) {\n    -    containersForPreemption.addAll(containers);\n    +  void addContainersForPreemption(Collection<RMContainer> containers,\n    +                                  FSAppAttempt appAttempt) {\n    +    for(RMContainer container : containers) {\n    +      containersForPreemption.put(container, appAttempt);\n    --- End diff --\n    \n    Actually, if we do that, the first list of containers need not be a map. It could continue to be a set. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.017+0000","updated":"2017-03-13T23:00:06.017+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923133","id":"15923133","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105792954\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,360 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.Container;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.ExecutionType;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    --- End diff --\n    \n    Should the tests related to preemptions be in TestFairSchedulerPreemption instead? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.066+0000","updated":"2017-03-13T23:00:06.066+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923134","id":"15923134","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105792834\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,6 +132,44 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized boolean assignContainersToPreemptionReservees() {\n    --- End diff --\n    \n    I am slightly concerned about this splitting the container allocation code across too many places. The alternative is to do this in FairScheduler but maintain the map here, which is also ugly. Would it make any sense to hold this information in FSContext? \n    \n    Just calling out we need to think through this carefully. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.080+0000","updated":"2017-03-13T23:00:06.080+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923135","id":"15923135","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105785747\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java ---\n    @@ -831,7 +831,11 @@ private Resource assignContainer(\n         }\n     \n         // The desired container won't fit here, so reserve\n    -    if (isReservable(capability) &&\n    +    // Important: Do not enable this kind of reservation in case of preemption,\n    +    // since the preempted application will re-reserve the preempted resources\n    +    // and prevent the starving application to get them\n    +    if (!scheduler.getConf().getPreemptionEnabled() &&\n    --- End diff --\n    \n    This seems very bad. What happens if preemption is enabled, but no containers are preempted. However, if there are apps requesting large containers that don't fit in the free resources created by smaller containers finishing, these apps end up being starved forever. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.156+0000","updated":"2017-03-13T23:00:06.156+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923136","id":"15923136","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105786285\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,30 +18,52 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.util.Collection;\n    +import java.util.Comparator;\n    +import java.util.Iterator;\n    +import java.util.LinkedHashMap;\n    +import java.util.Map;\n     import java.util.Set;\n    -import java.util.concurrent.ConcurrentSkipListSet;\n    +import java.util.concurrent.ConcurrentSkipListMap;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    -\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Map<RMContainer, FSAppAttempt> containersForPreemption =\n    +      new ConcurrentSkipListMap<>(comparator);\n    +\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  Map<FSAppAttempt, Resource> reservedApp =\n    --- End diff --\n    \n    This map can be final as well. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.226+0000","updated":"2017-03-13T23:00:06.226+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923137","id":"15923137","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105790059\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -118,23 +178,56 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n        *\n        * @param containers container to mark\n        */\n    -  void addContainersForPreemption(Collection<RMContainer> containers) {\n    -    containersForPreemption.addAll(containers);\n    +  void addContainersForPreemption(Collection<RMContainer> containers,\n    +                                  FSAppAttempt appAttempt) {\n    +    for(RMContainer container : containers) {\n    +      containersForPreemption.put(container, appAttempt);\n    +    }\n       }\n     \n       /**\n        * @return set of containers marked for preemption.\n        */\n       Set<RMContainer> getContainersForPreemption() {\n    -    return containersForPreemption;\n    +    return containersForPreemption.keySet();\n       }\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n    -  void removeContainerForPreemption(RMContainer container) {\n    +  private synchronized void removeContainerForPreemption(RMContainer container) {\n    --- End diff --\n    \n    If we add the entry to the map when we add container, this method doesn't need to be changed. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.331+0000","updated":"2017-03-13T23:00:06.331+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923138","id":"15923138","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105787301\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -118,23 +178,56 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n        *\n        * @param containers container to mark\n        */\n    -  void addContainersForPreemption(Collection<RMContainer> containers) {\n    -    containersForPreemption.addAll(containers);\n    +  void addContainersForPreemption(Collection<RMContainer> containers,\n    +                                  FSAppAttempt appAttempt) {\n    +    for(RMContainer container : containers) {\n    +      containersForPreemption.put(container, appAttempt);\n    --- End diff --\n    \n    We should add the entry to the other map also here. That way, we count allocations prior to the preemptions also against the same app. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.337+0000","updated":"2017-03-13T23:00:06.337+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923139","id":"15923139","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105786158\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,30 +18,52 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.util.Collection;\n    +import java.util.Comparator;\n    +import java.util.Iterator;\n    +import java.util.LinkedHashMap;\n    +import java.util.Map;\n     import java.util.Set;\n    -import java.util.concurrent.ConcurrentSkipListSet;\n    +import java.util.concurrent.ConcurrentSkipListMap;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    -\n    +  private static final Comparator<RMContainer> comparator =\n    --- End diff --\n    \n    Why do we need this comparator?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.452+0000","updated":"2017-03-13T23:00:06.452+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923140","id":"15923140","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105786728\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,30 +18,52 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.util.Collection;\n    +import java.util.Comparator;\n    +import java.util.Iterator;\n    +import java.util.LinkedHashMap;\n    +import java.util.Map;\n     import java.util.Set;\n    -import java.util.concurrent.ConcurrentSkipListSet;\n    +import java.util.concurrent.ConcurrentSkipListMap;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    -\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Map<RMContainer, FSAppAttempt> containersForPreemption =\n    +      new ConcurrentSkipListMap<>(comparator);\n    +\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  Map<FSAppAttempt, Resource> reservedApp =\n    --- End diff --\n    \n    Instead of calling this reservedApp which can be confused with reservedAppSchedulable, how about we call this resourcesPreemptedPerApp?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.491+0000","updated":"2017-03-13T23:00:06.491+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923141","id":"15923141","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105790122\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -118,23 +178,56 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n        *\n        * @param containers container to mark\n        */\n    -  void addContainersForPreemption(Collection<RMContainer> containers) {\n    -    containersForPreemption.addAll(containers);\n    +  void addContainersForPreemption(Collection<RMContainer> containers,\n    +                                  FSAppAttempt appAttempt) {\n    +    for(RMContainer container : containers) {\n    +      containersForPreemption.put(container, appAttempt);\n    +    }\n       }\n     \n       /**\n        * @return set of containers marked for preemption.\n        */\n       Set<RMContainer> getContainersForPreemption() {\n    -    return containersForPreemption;\n    +    return containersForPreemption.keySet();\n       }\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n    -  void removeContainerForPreemption(RMContainer container) {\n    +  private synchronized void removeContainerForPreemption(RMContainer container) {\n    +    FSAppAttempt app = containersForPreemption.get(container);\n    +    if (app != null) {\n    +      Resource containerSize =\n    +          Resources.clone(container.getAllocatedResource());\n    +      if (!reservedApp.containsKey(app)) {\n    +        reservedApp.put(app, containerSize);\n    +      } else {\n    +        Resources.addTo(reservedApp.get(app),\n    +            Resources.clone(containerSize));\n    +      }\n    +    }\n         containersForPreemption.remove(container);\n       }\n    +\n    +  /**\n    +   * Release an allocated container on this node.\n    +   * It also releases from the reservation list to trigger preemption\n    +   * allocations.\n    +   * @param containerId ID of container to be released.\n    +   * @param releasedByNode whether the release originates from a node update.\n    +   */\n    +  @Override\n    +  public synchronized void releaseContainer(ContainerId containerId,\n    +                                            boolean releasedByNode) {\n    +    RMContainer container = getContainer(containerId);\n    +    super.releaseContainer(containerId, releasedByNode);\n    +    if (container != null) {\n    +      removeContainerForPreemption(container);\n    --- End diff --\n    \n    This is nice to see. We should have done this to begin with. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:00:06.566+0000","updated":"2017-03-13T23:00:06.566+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923151","id":"15923151","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105794343\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,30 +18,52 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.util.Collection;\n    +import java.util.Comparator;\n    +import java.util.Iterator;\n    +import java.util.LinkedHashMap;\n    +import java.util.Map;\n     import java.util.Set;\n    -import java.util.concurrent.ConcurrentSkipListSet;\n    +import java.util.concurrent.ConcurrentSkipListMap;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    -\n    +  private static final Comparator<RMContainer> comparator =\n    --- End diff --\n    \n    The unit test failed without it.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:09:20.360+0000","updated":"2017-03-13T23:09:20.360+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923164","id":"15923164","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105795629\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,30 +18,52 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.util.Collection;\n    +import java.util.Comparator;\n    +import java.util.Iterator;\n    +import java.util.LinkedHashMap;\n    +import java.util.Map;\n     import java.util.Set;\n    -import java.util.concurrent.ConcurrentSkipListSet;\n    +import java.util.concurrent.ConcurrentSkipListMap;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    -\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Map<RMContainer, FSAppAttempt> containersForPreemption =\n    +      new ConcurrentSkipListMap<>(comparator);\n    +\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  Map<FSAppAttempt, Resource> reservedApp =\n    --- End diff --\n    \n    Sure, done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:18:41.682+0000","updated":"2017-03-13T23:18:41.682+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15923171","id":"15923171","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r105796619\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,6 +132,44 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized boolean assignContainersToPreemptionReservees() {\n    --- End diff --\n    \n    The reason I brought it here is that we need to run it synchronized to make sure the list does not change. The preemption reservation data belongs here I think. What I could do is that do the assignContainersToPreemptionReservees tasks in fair scheduler and expose the lock to that function.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-13T23:25:53.783+0000","updated":"2017-03-13T23:25:53.783+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15926641","id":"15926641","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r106237085\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,30 +18,52 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.util.Collection;\n    +import java.util.Comparator;\n    +import java.util.Iterator;\n    +import java.util.LinkedHashMap;\n    +import java.util.Map;\n     import java.util.Set;\n    -import java.util.concurrent.ConcurrentSkipListSet;\n    +import java.util.concurrent.ConcurrentSkipListMap;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    -\n    +  private static final Comparator<RMContainer> comparator =\n    --- End diff --\n    \n    java.lang.ClassCastException: org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer$$EnhancerByMockitoWithCGLIB$$4607190f cannot be cast to java.lang.Comparable\n    \n    \tat java.util.concurrent.ConcurrentSkipListMap.cpr(ConcurrentSkipListMap.java:655)\n    \tat java.util.concurrent.ConcurrentSkipListMap.doGet(ConcurrentSkipListMap.java:794)\n    \tat java.util.concurrent.ConcurrentSkipListMap.get(ConcurrentSkipListMap.java:1546)\n    \tat org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FSSchedulerNode.removeContainerForPreemption(FSSchedulerNode.java:203)\n    \tat org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FSSchedulerNode.releaseContainer(FSSchedulerNode.java:230)\n    \tat org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.TestFSSchedulerNode.testPreemptionToCompletedApp(TestFSSchedulerNode.java:302)\n    \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    \tat java.lang.reflect.Method.invoke(Method.java:498)\n    \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    \tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    \tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    \tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n    \tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)\n    \tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)\n    \tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n    \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    \tat java.lang.reflect.Method.invoke(Method.java:498)\n    \tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-15T17:50:30.018+0000","updated":"2017-03-15T17:50:30.018+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15926841","id":"15926841","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r106266603\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,360 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.Container;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.ExecutionType;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    --- End diff --\n    \n    Only, if all the preemption classes are used by the test. This is a real unit test for the class FSSchedulerNode. In this case the unit test is restricted to mocks and only FSSchedulerNode is a real class. All in all, I see this as a test of a limited subset of preemption functionality restricted to FSSchedulerNode, so it should be in a class named TestFSSchedulerNode. If you want me to add additional functional tests to TestFairSchedulerPreemption, I am happy to do that.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-15T19:52:00.373+0000","updated":"2017-03-15T19:52:00.373+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15926866","id":"15926866","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r106269289\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -118,23 +178,56 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n        *\n        * @param containers container to mark\n        */\n    -  void addContainersForPreemption(Collection<RMContainer> containers) {\n    -    containersForPreemption.addAll(containers);\n    +  void addContainersForPreemption(Collection<RMContainer> containers,\n    +                                  FSAppAttempt appAttempt) {\n    +    for(RMContainer container : containers) {\n    +      containersForPreemption.put(container, appAttempt);\n    +    }\n       }\n     \n       /**\n        * @return set of containers marked for preemption.\n        */\n       Set<RMContainer> getContainersForPreemption() {\n    -    return containersForPreemption;\n    +    return containersForPreemption.keySet();\n       }\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n    -  void removeContainerForPreemption(RMContainer container) {\n    +  private synchronized void removeContainerForPreemption(RMContainer container) {\n    +    FSAppAttempt app = containersForPreemption.get(container);\n    +    if (app != null) {\n    +      Resource containerSize =\n    +          Resources.clone(container.getAllocatedResource());\n    +      if (!reservedApp.containsKey(app)) {\n    +        reservedApp.put(app, containerSize);\n    +      } else {\n    +        Resources.addTo(reservedApp.get(app),\n    +            Resources.clone(containerSize));\n    +      }\n    +    }\n         containersForPreemption.remove(container);\n       }\n    +\n    +  /**\n    +   * Release an allocated container on this node.\n    +   * It also releases from the reservation list to trigger preemption\n    +   * allocations.\n    +   * @param containerId ID of container to be released.\n    +   * @param releasedByNode whether the release originates from a node update.\n    +   */\n    +  @Override\n    +  public synchronized void releaseContainer(ContainerId containerId,\n    +                                            boolean releasedByNode) {\n    +    RMContainer container = getContainer(containerId);\n    +    super.releaseContainer(containerId, releasedByNode);\n    +    if (container != null) {\n    +      removeContainerForPreemption(container);\n    --- End diff --\n    \n    Thanks!\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-15T20:03:57.039+0000","updated":"2017-03-15T20:03:57.039+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15926869","id":"15926869","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r106269431\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -118,23 +178,56 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n        *\n        * @param containers container to mark\n        */\n    -  void addContainersForPreemption(Collection<RMContainer> containers) {\n    -    containersForPreemption.addAll(containers);\n    +  void addContainersForPreemption(Collection<RMContainer> containers,\n    +                                  FSAppAttempt appAttempt) {\n    +    for(RMContainer container : containers) {\n    +      containersForPreemption.put(container, appAttempt);\n    +    }\n       }\n     \n       /**\n        * @return set of containers marked for preemption.\n        */\n       Set<RMContainer> getContainersForPreemption() {\n    -    return containersForPreemption;\n    +    return containersForPreemption.keySet();\n       }\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n    -  void removeContainerForPreemption(RMContainer container) {\n    +  private synchronized void removeContainerForPreemption(RMContainer container) {\n    --- End diff --\n    \n    Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-15T20:04:44.983+0000","updated":"2017-03-15T20:04:44.983+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15926872","id":"15926872","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r106269539\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -118,23 +178,56 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n        *\n        * @param containers container to mark\n        */\n    -  void addContainersForPreemption(Collection<RMContainer> containers) {\n    -    containersForPreemption.addAll(containers);\n    +  void addContainersForPreemption(Collection<RMContainer> containers,\n    +                                  FSAppAttempt appAttempt) {\n    +    for(RMContainer container : containers) {\n    +      containersForPreemption.put(container, appAttempt);\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-15T20:05:21.592+0000","updated":"2017-03-15T20:05:21.592+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15926921","id":"15926921","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r106274089\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java ---\n    @@ -831,7 +831,11 @@ private Resource assignContainer(\n         }\n     \n         // The desired container won't fit here, so reserve\n    -    if (isReservable(capability) &&\n    +    // Important: Do not enable this kind of reservation in case of preemption,\n    +    // since the preempted application will re-reserve the preempted resources\n    +    // and prevent the starving application to get them\n    +    if (!scheduler.getConf().getPreemptionEnabled() &&\n    --- End diff --\n    \n    I improved this by giving higher priority to preempted containers than reservation. Child queues may pass containers to each other this way resolving fairness starvation. Please review the updated change.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-15T20:27:25.304+0000","updated":"2017-03-15T20:27:25.304+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939369","id":"15939369","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107801140\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -131,10 +203,58 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n       void removeContainerForPreemption(RMContainer container) {\n         containersForPreemption.remove(container);\n       }\n    +\n    +  /**\n    +   * The Scheduler has allocated containers on this node to the given\n    +   * application.\n    +   * @param rmContainer Allocated container\n    +   * @param launchedOnNode True if the container has been launched\n    +   */\n    +  @Override\n    +  protected synchronized void allocateContainer(RMContainer rmContainer,\n    +                                                boolean launchedOnNode) {\n    +    super.allocateContainer(rmContainer, launchedOnNode);\n    +    Resource allocated = rmContainer.getAllocatedResource();\n    +    if (!Resources.isNone(allocated)) {\n    +      for (FSAppAttempt app: resourcesPreemptedPerApp.keySet()) {\n    +        if (app.getApplicationAttemptId().equals(\n    +            rmContainer.getApplicationAttemptId())) {\n    +          Resource reserved = resourcesPreemptedPerApp.get(app);\n    +          Resource fulfilled = Resources.componentwiseMin(reserved, allocated);\n    --- End diff --\n    \n    This is not necessary if we use subtractFromNonNegative in the following two statements. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.648+0000","updated":"2017-03-23T22:50:45.648+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939370","id":"15939370","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107779617\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedPerApp = new LinkedHashMap<>();\n    +  Resource totalResourcesPreempted = Resource.newInstance(0, 0);\n     \n       public FSSchedulerNode(RMNode node, boolean usePortForNodeName) {\n         super(node, usePortForNodeName);\n       }\n     \n    +  /**\n    +   * Total amount of reserved resources including reservations and preempted\n    +   * containers.\n    +   * @return total resources reserved\n    +   */\n    +  Resource getTotalReserved() {\n    +    Resource totalReserved = getReservedContainer() != null ?\n    +        Resources.clone(getReservedContainer().getAllocatedResource()) :\n    --- End diff --\n    \n    My personal preference is for the \"?\" to go on the same line as the corresponding value, and the same for \":\".\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.651+0000","updated":"2017-03-23T22:50:45.651+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939371","id":"15939371","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107778404\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedPerApp = new LinkedHashMap<>();\n    --- End diff --\n    \n    The variable name could be construed two ways: (1) resources being preempted **from** an app and (2) resources being preempted **for** an app. It would be nice to pick a name that avoids this ambiguity. \n    \n    Also, should the associated comment be updated? Let us keep the comment as simple as possible. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.652+0000","updated":"2017-03-23T22:50:45.652+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939372","id":"15939372","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107774052\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java ---\n    @@ -113,11 +113,6 @@ public void run() {\n             List<FSSchedulerNode> potentialNodes = scheduler.getNodeTracker()\n                 .getNodesByResourceName(rr.getResourceName());\n             for (FSSchedulerNode node : potentialNodes) {\n    -          // TODO (YARN-5829): Attempt to reserve the node for starved app.\n    -          if (isNodeAlreadyReserved(node, starvedApp)) {\n    -            continue;\n    -          }\n    -\n    --- End diff --\n    \n    Observation: We aren't checking for the node being reserved because the reservation is only for larger containers. Even if a node is reserved, we can preempt running containers to fit in a new app. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.655+0000","updated":"2017-03-23T22:50:45.655+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939373","id":"15939373","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107779451\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedPerApp = new LinkedHashMap<>();\n    +  Resource totalResourcesPreempted = Resource.newInstance(0, 0);\n     \n       public FSSchedulerNode(RMNode node, boolean usePortForNodeName) {\n         super(node, usePortForNodeName);\n       }\n     \n    +  /**\n    +   * Total amount of reserved resources including reservations and preempted\n    +   * containers.\n    +   * @return total resources reserved\n    +   */\n    +  Resource getTotalReserved() {\n    +    Resource totalReserved = getReservedContainer() != null ?\n    +        Resources.clone(getReservedContainer().getAllocatedResource()) :\n    +        Resource.newInstance(0, 0);\n    --- End diff --\n    \n    Use Resources.clone(Resources.none()). That way, you could do \n    \n    Resources.clone(\n    getReservedContainer() != null ? getReservedContainer.getAllocatedResource() : Resources.none())\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.655+0000","updated":"2017-03-23T22:50:45.655+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939374","id":"15939374","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107777379\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    --- End diff --\n    \n    How about having RMContainer implement Comparable instead? \n    \n    RMContainerImpl already has an implementation that IMO should just be in RMContainer. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.661+0000","updated":"2017-03-23T22:50:45.661+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939375","id":"15939375","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107778744\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedPerApp = new LinkedHashMap<>();\n    +  Resource totalResourcesPreempted = Resource.newInstance(0, 0);\n    --- End diff --\n    \n    This variable is tracking total resources that are slated for preemption. Should we update the name to reflect that and maybe also add a comment? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.663+0000","updated":"2017-03-23T22:50:45.663+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939376","id":"15939376","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107772839\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java ---\n    @@ -841,7 +841,11 @@ private Resource assignContainer(\n         }\n     \n         // The desired container won't fit here, so reserve\n    -    if (isReservable(capability) &&\n    +    boolean reservedToOtherApp = (reservedContainer != null &&\n    +        reservedContainer.getId().getApplicationAttemptId().\n    +            equals(getApplicationAttemptId()));\n    +    if (reservedToOtherApp &&\n    --- End diff --\n    \n    This if-condition is getting a little too complex. Can we move these checks to reserve() itself? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.666+0000","updated":"2017-03-23T22:50:45.666+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939377","id":"15939377","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107776870\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n    --- End diff --\n    \n    We avoid wildcard imports in YARN land. Can we just include the necessary imports? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.671+0000","updated":"2017-03-23T22:50:45.671+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939378","id":"15939378","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107801908\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -987,9 +978,19 @@ void attemptScheduling(FSSchedulerNode node) {\n           }\n     \n           // Assign new containers...\n    -      // 1. Check for reserved applications\n    -      // 2. Schedule if there are no reservations\n    -\n    +      // 1. Ensure containers are assigned to the apps that preempted\n    +      // 2. Check for reserved applications\n    +      // 3. Schedule if there are no reservations\n    +\n    +      // Apps may wait for preempted containers\n    +      // We have to satisfy these first to avoid cases, when we preempt\n    +      // a container for A from B and C gets the preempted containers,\n    +      // when C does not qualify for preemption itself.\n    +      for (FSAppAttempt app : node.getPreemptionList()) {\n    --- End diff --\n    \n    We don't seem to handle the case where an app is to be allocated multiple containers from based on the preempted resources.\n    \n    Would it help to store the apps in a TreeMap in FSSchedulerNode and have a method that returns the next preempted app to allocate to? If none exist, return null? Also, if this were to work, we might have to revert back to the behavior in an earlier patch: add app/resources to the map only after the container is actually preempted? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.676+0000","updated":"2017-03-23T22:50:45.676+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939379","id":"15939379","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107777757\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    --- End diff --\n    \n    Rephrase to say \"Stores list of containers still to be preempted\"\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.678+0000","updated":"2017-03-23T22:50:45.678+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939380","id":"15939380","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107801268\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -93,15 +91,8 @@\n     import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.io.IOException;\n    -import java.util.ArrayList;\n    -import java.util.Collection;\n    -import java.util.Comparator;\n    -import java.util.EnumSet;\n    -import java.util.HashSet;\n    -import java.util.List;\n    -import java.util.Map;\n    +import java.util.*;\n    --- End diff --\n    \n    Same comment as above. Let us avoid using wildcard imports\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.681+0000","updated":"2017-03-23T22:50:45.681+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939381","id":"15939381","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107799584\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -131,10 +203,58 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n       void removeContainerForPreemption(RMContainer container) {\n         containersForPreemption.remove(container);\n       }\n    +\n    +  /**\n    +   * The Scheduler has allocated containers on this node to the given\n    +   * application.\n    +   * @param rmContainer Allocated container\n    +   * @param launchedOnNode True if the container has been launched\n    +   */\n    +  @Override\n    +  protected synchronized void allocateContainer(RMContainer rmContainer,\n    +                                                boolean launchedOnNode) {\n    +    super.allocateContainer(rmContainer, launchedOnNode);\n    +    Resource allocated = rmContainer.getAllocatedResource();\n    +    if (!Resources.isNone(allocated)) {\n    +      for (FSAppAttempt app: resourcesPreemptedPerApp.keySet()) {\n    --- End diff --\n    \n    Given this is a map, why aren't we just doing a map.get()? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.690+0000","updated":"2017-03-23T22:50:45.690+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939382","id":"15939382","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107776685\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java ---\n    @@ -164,7 +160,10 @@ private PreemptableContainers identifyContainersToPreemptOnNode(\n         containersToCheck.removeAll(node.getContainersForPreemption());\n     \n         // Initialize potential with unallocated resources\n    -    Resource potential = Resources.clone(node.getUnallocatedResource());\n    +    Resource potential = Resources.clone(\n    +        Resources.componentwiseMax(Resources.none(),\n    --- End diff --\n    \n    Would using Resources.subtractFromNonNegative be better here for one fewer Resource object creation.\n    \n    If we decide to keep this, the comment above needs to be changed accordingly. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.718+0000","updated":"2017-03-23T22:50:45.718+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939383","id":"15939383","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107802366\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -987,9 +978,19 @@ void attemptScheduling(FSSchedulerNode node) {\n           }\n     \n           // Assign new containers...\n    -      // 1. Check for reserved applications\n    -      // 2. Schedule if there are no reservations\n    -\n    +      // 1. Ensure containers are assigned to the apps that preempted\n    +      // 2. Check for reserved applications\n    +      // 3. Schedule if there are no reservations\n    +\n    +      // Apps may wait for preempted containers\n    +      // We have to satisfy these first to avoid cases, when we preempt\n    +      // a container for A from B and C gets the preempted containers,\n    +      // when C does not qualify for preemption itself.\n    +      for (FSAppAttempt app : node.getPreemptionList()) {\n    --- End diff --\n    \n    Also, we are not counting allocated resources/containers against the assignMultiple. We probably should so that we limit the number of non-preemption, non-reserved containers/resources appropriately. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.720+0000","updated":"2017-03-23T22:50:45.720+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939384","id":"15939384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107780786\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -131,10 +203,58 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n       void removeContainerForPreemption(RMContainer container) {\n    --- End diff --\n    \n    This is a one-liner method that is only used in the same class. Can we get rid of the method? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T22:50:45.728+0000","updated":"2017-03-23T22:50:45.728+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939394","id":"15939394","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107804587\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java ---\n    @@ -113,11 +113,6 @@ public void run() {\n             List<FSSchedulerNode> potentialNodes = scheduler.getNodeTracker()\n                 .getNodesByResourceName(rr.getResourceName());\n             for (FSSchedulerNode node : potentialNodes) {\n    -          // TODO (YARN-5829): Attempt to reserve the node for starved app.\n    -          if (isNodeAlreadyReserved(node, starvedApp)) {\n    -            continue;\n    -          }\n    -\n    --- End diff --\n    \n    Indeed, preemption reservation has higher priority.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:05:42.570+0000","updated":"2017-03-23T23:05:42.570+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939400","id":"15939400","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107804983\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSPreemptionThread.java ---\n    @@ -164,7 +160,10 @@ private PreemptableContainers identifyContainersToPreemptOnNode(\n         containersToCheck.removeAll(node.getContainersForPreemption());\n     \n         // Initialize potential with unallocated resources\n    -    Resource potential = Resources.clone(node.getUnallocatedResource());\n    +    Resource potential = Resources.clone(\n    +        Resources.componentwiseMax(Resources.none(),\n    --- End diff --\n    \n    Yes that is nicer. Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:08:41.667+0000","updated":"2017-03-23T23:08:41.667+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939404","id":"15939404","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107805522\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n    --- End diff --\n    \n    Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:12:30.879+0000","updated":"2017-03-23T23:12:30.879+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939405","id":"15939405","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107805618\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    --- End diff --\n    \n    RMContainer is an interface, it cannot implement a method.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:13:17.440+0000","updated":"2017-03-23T23:13:17.440+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939408","id":"15939408","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107805823\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    --- End diff --\n    \n    All right.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:14:55.499+0000","updated":"2017-03-23T23:14:55.499+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939413","id":"15939413","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107806119\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedPerApp = new LinkedHashMap<>();\n    --- End diff --\n    \n    All right.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:17:16.720+0000","updated":"2017-03-23T23:17:16.720+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939419","id":"15939419","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107806509\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedPerApp = new LinkedHashMap<>();\n    +  Resource totalResourcesPreempted = Resource.newInstance(0, 0);\n    --- End diff --\n    \n    All right.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:20:19.757+0000","updated":"2017-03-23T23:20:19.757+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939423","id":"15939423","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107806639\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedPerApp = new LinkedHashMap<>();\n    +  Resource totalResourcesPreempted = Resource.newInstance(0, 0);\n     \n       public FSSchedulerNode(RMNode node, boolean usePortForNodeName) {\n         super(node, usePortForNodeName);\n       }\n     \n    +  /**\n    +   * Total amount of reserved resources including reservations and preempted\n    +   * containers.\n    +   * @return total resources reserved\n    +   */\n    +  Resource getTotalReserved() {\n    +    Resource totalReserved = getReservedContainer() != null ?\n    +        Resources.clone(getReservedContainer().getAllocatedResource()) :\n    --- End diff --\n    \n    All right.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:21:07.805+0000","updated":"2017-03-23T23:21:07.805+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939424","id":"15939424","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107806808\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,35 +18,66 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n    -import java.util.Collection;\n    -import java.util.Set;\n    +import java.util.*;\n     import java.util.concurrent.ConcurrentSkipListSet;\n     \n     @Private\n     @Unstable\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores preemption list until the container is completed\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores preemption list after the container is completed before assigned\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedPerApp = new LinkedHashMap<>();\n    +  Resource totalResourcesPreempted = Resource.newInstance(0, 0);\n     \n       public FSSchedulerNode(RMNode node, boolean usePortForNodeName) {\n         super(node, usePortForNodeName);\n       }\n     \n    +  /**\n    +   * Total amount of reserved resources including reservations and preempted\n    +   * containers.\n    +   * @return total resources reserved\n    +   */\n    +  Resource getTotalReserved() {\n    +    Resource totalReserved = getReservedContainer() != null ?\n    +        Resources.clone(getReservedContainer().getAllocatedResource()) :\n    +        Resource.newInstance(0, 0);\n    --- End diff --\n    \n    Sorry, what is the point cloning none? I think the current one is more straightforward.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:22:29.372+0000","updated":"2017-03-23T23:22:29.372+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939427","id":"15939427","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107806990\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -131,10 +203,58 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n       void removeContainerForPreemption(RMContainer container) {\n    --- End diff --\n    \n    Good catch. Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:23:49.262+0000","updated":"2017-03-23T23:23:49.262+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939428","id":"15939428","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107807194\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -131,10 +203,58 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n       void removeContainerForPreemption(RMContainer container) {\n         containersForPreemption.remove(container);\n       }\n    +\n    +  /**\n    +   * The Scheduler has allocated containers on this node to the given\n    +   * application.\n    +   * @param rmContainer Allocated container\n    +   * @param launchedOnNode True if the container has been launched\n    +   */\n    +  @Override\n    +  protected synchronized void allocateContainer(RMContainer rmContainer,\n    +                                                boolean launchedOnNode) {\n    +    super.allocateContainer(rmContainer, launchedOnNode);\n    +    Resource allocated = rmContainer.getAllocatedResource();\n    +    if (!Resources.isNone(allocated)) {\n    +      for (FSAppAttempt app: resourcesPreemptedPerApp.keySet()) {\n    --- End diff --\n    \n    It is not indexed by ID but the app.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:25:26.474+0000","updated":"2017-03-23T23:25:26.474+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939430","id":"15939430","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107807464\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -131,10 +203,58 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n       void removeContainerForPreemption(RMContainer container) {\n         containersForPreemption.remove(container);\n       }\n    +\n    +  /**\n    +   * The Scheduler has allocated containers on this node to the given\n    +   * application.\n    +   * @param rmContainer Allocated container\n    +   * @param launchedOnNode True if the container has been launched\n    +   */\n    +  @Override\n    +  protected synchronized void allocateContainer(RMContainer rmContainer,\n    +                                                boolean launchedOnNode) {\n    +    super.allocateContainer(rmContainer, launchedOnNode);\n    +    Resource allocated = rmContainer.getAllocatedResource();\n    +    if (!Resources.isNone(allocated)) {\n    +      for (FSAppAttempt app: resourcesPreemptedPerApp.keySet()) {\n    +        if (app.getApplicationAttemptId().equals(\n    +            rmContainer.getApplicationAttemptId())) {\n    +          Resource reserved = resourcesPreemptedPerApp.get(app);\n    +          Resource fulfilled = Resources.componentwiseMin(reserved, allocated);\n    --- End diff --\n    \n    Not really, because we would subtract a bigger value from total than from reserved, leaving the state of the map and it's totals inconsistent.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:27:19.014+0000","updated":"2017-03-23T23:27:19.014+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939437","id":"15939437","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107808165\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -93,15 +91,8 @@\n     import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.io.IOException;\n    -import java.util.ArrayList;\n    -import java.util.Collection;\n    -import java.util.Comparator;\n    -import java.util.EnumSet;\n    -import java.util.HashSet;\n    -import java.util.List;\n    -import java.util.Map;\n    +import java.util.*;\n    --- End diff --\n    \n    All right.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-23T23:32:44.030+0000","updated":"2017-03-23T23:32:44.030+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15939544","id":"15939544","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r107820670\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -987,9 +978,19 @@ void attemptScheduling(FSSchedulerNode node) {\n           }\n     \n           // Assign new containers...\n    -      // 1. Check for reserved applications\n    -      // 2. Schedule if there are no reservations\n    -\n    +      // 1. Ensure containers are assigned to the apps that preempted\n    +      // 2. Check for reserved applications\n    +      // 3. Schedule if there are no reservations\n    +\n    +      // Apps may wait for preempted containers\n    +      // We have to satisfy these first to avoid cases, when we preempt\n    +      // a container for A from B and C gets the preempted containers,\n    +      // when C does not qualify for preemption itself.\n    +      for (FSAppAttempt app : node.getPreemptionList()) {\n    --- End diff --\n    \n    > Would it help to store the apps in a TreeMap in FSSchedulerNode and have a method that > returns the next preempted app to allocate to? If none exist, return null? Also, if this were > to work, we might have to revert back to the behavior in an earlier patch: add app/resources to the map only after the container is actually preempted?\n    This approach has a clear advantage, that it allocates any newly appeared container to the preemptors. TreeMap might slow down search a little bit. Let's try to continue with this approach but multiple allocations enabled.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-24T01:38:12.171+0000","updated":"2017-03-24T01:38:12.171+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941358","id":"15941358","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020252\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -131,10 +203,58 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n       void removeContainerForPreemption(RMContainer container) {\n         containersForPreemption.remove(container);\n       }\n    +\n    +  /**\n    +   * The Scheduler has allocated containers on this node to the given\n    +   * application.\n    +   * @param rmContainer Allocated container\n    +   * @param launchedOnNode True if the container has been launched\n    +   */\n    +  @Override\n    +  protected synchronized void allocateContainer(RMContainer rmContainer,\n    +                                                boolean launchedOnNode) {\n    +    super.allocateContainer(rmContainer, launchedOnNode);\n    +    Resource allocated = rmContainer.getAllocatedResource();\n    +    if (!Resources.isNone(allocated)) {\n    +      for (FSAppAttempt app: resourcesPreemptedPerApp.keySet()) {\n    --- End diff --\n    \n    A for loop seems a little wasteful. Would it make any sense to keep another map so this can just be a lookup? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T00:02:15.108+0000","updated":"2017-03-25T00:02:15.108+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941417","id":"15941417","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108021344\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -968,6 +966,32 @@ private boolean shouldContinueAssigning(int containers,\n         }\n       }\n     \n    +  /**\n    +   * Assign preempted containers to the applications that have reserved\n    +   * resources for preempted containers.\n    +   * @param node Node to check\n    +   * @return assignment has occurred\n    +   */\n    +  static boolean assignPreemptedContainers(FSSchedulerNode node ) {\n    +    boolean assignedAny = false;\n    +    node.cleanupPreemptionList();\n    +    for (Entry<FSAppAttempt, Resource> entry :\n    +        node.getPreemptionList().entrySet()) {\n    +      FSAppAttempt app = entry.getKey();\n    +      Resource reserved = Resources.clone(entry.getValue());\n    +      while (!app.isStopped() && !Resources.isNone(reserved)) {\n    +        Resource assigned = app.assignContainer(node);\n    +        if (Resources.isNone(assigned)) {\n    +          break;\n    --- End diff --\n    \n    Add a comment as to why we are breaking here. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.488+0000","updated":"2017-03-25T01:05:20.488+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941418","id":"15941418","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020399\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,18 +18,27 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.util.Collection;\n    +import java.util.Comparator;\n    +import java.util.Iterator;\n    +import java.util.LinkedHashMap;\n    +import java.util.LinkedHashSet;\n    --- End diff --\n    \n    Don't think we are using this import anymore. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.489+0000","updated":"2017-03-25T01:05:20.489+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941419","id":"15941419","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108021321\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -968,6 +966,32 @@ private boolean shouldContinueAssigning(int containers,\n         }\n       }\n     \n    +  /**\n    +   * Assign preempted containers to the applications that have reserved\n    +   * resources for preempted containers.\n    +   * @param node Node to check\n    +   * @return assignment has occurred\n    +   */\n    +  static boolean assignPreemptedContainers(FSSchedulerNode node ) {\n    +    boolean assignedAny = false;\n    +    node.cleanupPreemptionList();\n    +    for (Entry<FSAppAttempt, Resource> entry :\n    +        node.getPreemptionList().entrySet()) {\n    +      FSAppAttempt app = entry.getKey();\n    +      Resource reserved = Resources.clone(entry.getValue());\n    --- End diff --\n    \n    Can we call this variable pendingPreempted or some such. I would like us to avoid calling this reserved :)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.501+0000","updated":"2017-03-25T01:05:20.501+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941420","id":"15941420","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023329\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    --- End diff --\n    \n    Also, numContainers might be a better name. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.569+0000","updated":"2017-03-25T01:05:20.569+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941421","id":"15941421","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108021362\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -968,6 +966,32 @@ private boolean shouldContinueAssigning(int containers,\n         }\n       }\n     \n    +  /**\n    +   * Assign preempted containers to the applications that have reserved\n    +   * resources for preempted containers.\n    +   * @param node Node to check\n    +   * @return assignment has occurred\n    +   */\n    +  static boolean assignPreemptedContainers(FSSchedulerNode node ) {\n    +    boolean assignedAny = false;\n    +    node.cleanupPreemptionList();\n    +    for (Entry<FSAppAttempt, Resource> entry :\n    +        node.getPreemptionList().entrySet()) {\n    +      FSAppAttempt app = entry.getKey();\n    +      Resource reserved = Resources.clone(entry.getValue());\n    +      while (!app.isStopped() && !Resources.isNone(reserved)) {\n    +        Resource assigned = app.assignContainer(node);\n    +        if (Resources.isNone(assigned)) {\n    +          break;\n    +        }\n    +        assignedAny = true;\n    +        Resources.subtractFromNonNegative(reserved, assigned);\n    +      }\n    +    }\n    +    node.cleanupPreemptionList();\n    --- End diff --\n    \n    Again, let us avoid cleaning up explicitly. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.570+0000","updated":"2017-03-25T01:05:20.570+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941422","id":"15941422","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023073\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    +    Iterator<FSAppAttempt> iterator =\n    +        resourcesPreemptedForApp.keySet().iterator();\n    +    while (iterator.hasNext()) {\n    +      FSAppAttempt app = iterator.next();\n    +      boolean removeApp = false;\n    +      if (app.isStopped() || Resources.equals(\n    --- End diff --\n    \n    Actually, we probably need to check if the app is starved instead of if it having pending demand. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.570+0000","updated":"2017-03-25T01:05:20.570+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941423","id":"15941423","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023563\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    +      schedulerNode.containerStarted(containers.get((int)containerNum - 1).\n    +          getContainerId());\n    +    }\n    +  }\n    +\n    +  private FSAppAttempt createStarvingApp(FSSchedulerNode schedulerNode,\n    +                                         Resource request) {\n    +    FSAppAttempt starvingApp = mock(FSAppAttempt.class);\n    +    ApplicationAttemptId appAttemptId =\n    +        mock(ApplicationAttemptId.class);\n    +    when(starvingApp.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(starvingApp.assignContainer(schedulerNode)).thenAnswer(\n    +        new Answer<Resource>() {\n    +          @Override\n    +          public Resource answer(InvocationOnMock invocationOnMock)\n    +              throws Throwable {\n    +            Resource response = Resource.newInstance(0, 0);\n    +            while (!Resources.isNone(request) &&\n    +                !Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +              RMContainer container = createContainer(request, appAttemptId);\n    +              schedulerNode.allocateContainer(container);\n    +              Resources.addTo(response, container.getAllocatedResource());\n    +              Resources.subtractFrom(request,\n    +                  container.getAllocatedResource());\n    +            }\n    +            return response;\n    +          }\n    +        });\n    +    when(starvingApp.getPendingDemand()).thenReturn(request);\n    +    return starvingApp;\n    +  }\n    +\n    +  private void finalValidation(FSSchedulerNode schedulerNode) {\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    assertTrue(\"No containers should be reserved for preemption\",\n    +        schedulerNode.containersForPreemption.isEmpty());\n    +    assertTrue(\"No resources should be reserved for preemptees\",\n    +        schedulerNode.resourcesPreemptedForApp.isEmpty());\n    +    assertEquals(\n    +        \"No amount of resource should be reserved for preemptees\",\n    +        Resources.none(),\n    +        schedulerNode.getTotalReserved());\n    +  }\n    +\n    +  private void allocateContainers(FSSchedulerNode schedulerNode) {\n    +    FairScheduler.assignPreemptedContainers(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimpleAllocation() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    assertEquals(\"Container should be allocated\",\n    +        containers.get(0).getContainer().getResource(),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +\n    +    // Check that we are error prone\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release three containers with launch.\n    +   */\n    +  @Test\n    +  public void testMultipleAllocations() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    schedulerNode.containerStarted(containers.get(0).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(1));\n    +    schedulerNode.containerStarted(containers.get(1).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(2));\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(), 3.0),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(1).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(2).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimplePreemption() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    // Launch containers and saturate the cluster\n    +    saturateCluster(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(),\n    +            containerNum),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Request preemption\n    +    FSAppAttempt starvingApp = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(1024, 1));\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(0)), starvingApp);\n    +    assertEquals(\n    +        \"No resource amount should be reserved for preemptees\",\n    +        containers.get(0).getAllocatedResource(),\n    +        schedulerNode.getTotalReserved());\n    +\n    +    // Preemption occurs\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    allocateContainers(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        schedulerNode.getTotalResource(),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Release all containers\n    +    for (int i = 1; i < containerNum; ++i) {\n    +      schedulerNode.releaseContainer(containers.get(i).getContainerId(), true);\n    +    }\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release three containers requested by two apps.\n    +   */\n    +  @Test\n    +  public void testComplexPreemption() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    // Launch containers and saturate the cluster\n    +    saturateCluster(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(),\n    +            containerNum),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Preempt a container\n    +    FSAppAttempt starvingApp1 = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(2048, 2));\n    +    FSAppAttempt starvingApp2 = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(1024, 1));\n    +\n    +    // Preemption thread kicks in\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(0)), starvingApp1);\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(1)), starvingApp1);\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(2)), starvingApp2);\n    +\n    +    // Preemption happens\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(2).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(1).getContainerId(), true);\n    +\n    +    allocateContainers(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        schedulerNode.getTotalResource(),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Release all containers\n    +    for (int i = 3; i < containerNum; ++i) {\n    +      schedulerNode.releaseContainer(containers.get(i).getContainerId(), true);\n    --- End diff --\n    \n    Same comment as above. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.581+0000","updated":"2017-03-25T01:05:20.581+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941424","id":"15941424","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023245\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    --- End diff --\n    \n    execution type is repeated. Also, do we need to add a when for all these? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.588+0000","updated":"2017-03-25T01:05:20.588+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941425","id":"15941425","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108021737\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java ---\n    @@ -646,7 +646,6 @@ private Container createContainer(FSSchedulerNode node, Resource capability,\n       private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n           Container reservedContainer, NodeType type,\n           SchedulerRequestKey schedulerKey) {\n    -\n    --- End diff --\n    \n    Spurious change. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.625+0000","updated":"2017-03-25T01:05:20.625+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941426","id":"15941426","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023542\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    --- End diff --\n    \n    Actually, can't you just use containers.size() instead? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.628+0000","updated":"2017-03-25T01:05:20.628+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941427","id":"15941427","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023320\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    --- End diff --\n    \n    You don't need to typecast if you change it to int. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.639+0000","updated":"2017-03-25T01:05:20.639+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941428","id":"15941428","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023612\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    +      schedulerNode.containerStarted(containers.get((int)containerNum - 1).\n    +          getContainerId());\n    +    }\n    +  }\n    +\n    +  private FSAppAttempt createStarvingApp(FSSchedulerNode schedulerNode,\n    +                                         Resource request) {\n    +    FSAppAttempt starvingApp = mock(FSAppAttempt.class);\n    +    ApplicationAttemptId appAttemptId =\n    +        mock(ApplicationAttemptId.class);\n    +    when(starvingApp.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(starvingApp.assignContainer(schedulerNode)).thenAnswer(\n    +        new Answer<Resource>() {\n    +          @Override\n    +          public Resource answer(InvocationOnMock invocationOnMock)\n    +              throws Throwable {\n    +            Resource response = Resource.newInstance(0, 0);\n    +            while (!Resources.isNone(request) &&\n    +                !Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +              RMContainer container = createContainer(request, appAttemptId);\n    +              schedulerNode.allocateContainer(container);\n    +              Resources.addTo(response, container.getAllocatedResource());\n    +              Resources.subtractFrom(request,\n    +                  container.getAllocatedResource());\n    +            }\n    +            return response;\n    +          }\n    +        });\n    +    when(starvingApp.getPendingDemand()).thenReturn(request);\n    +    return starvingApp;\n    +  }\n    +\n    +  private void finalValidation(FSSchedulerNode schedulerNode) {\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    assertTrue(\"No containers should be reserved for preemption\",\n    +        schedulerNode.containersForPreemption.isEmpty());\n    +    assertTrue(\"No resources should be reserved for preemptees\",\n    +        schedulerNode.resourcesPreemptedForApp.isEmpty());\n    +    assertEquals(\n    +        \"No amount of resource should be reserved for preemptees\",\n    +        Resources.none(),\n    +        schedulerNode.getTotalReserved());\n    +  }\n    +\n    +  private void allocateContainers(FSSchedulerNode schedulerNode) {\n    +    FairScheduler.assignPreemptedContainers(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimpleAllocation() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    assertEquals(\"Container should be allocated\",\n    +        containers.get(0).getContainer().getResource(),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +\n    +    // Check that we are error prone\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release three containers with launch.\n    +   */\n    +  @Test\n    +  public void testMultipleAllocations() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    schedulerNode.containerStarted(containers.get(0).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(1));\n    +    schedulerNode.containerStarted(containers.get(1).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(2));\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(), 3.0),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(1).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(2).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimplePreemption() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    // Launch containers and saturate the cluster\n    +    saturateCluster(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(),\n    +            containerNum),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Request preemption\n    +    FSAppAttempt starvingApp = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(1024, 1));\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(0)), starvingApp);\n    +    assertEquals(\n    +        \"No resource amount should be reserved for preemptees\",\n    +        containers.get(0).getAllocatedResource(),\n    +        schedulerNode.getTotalReserved());\n    +\n    +    // Preemption occurs\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    allocateContainers(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        schedulerNode.getTotalResource(),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Release all containers\n    +    for (int i = 1; i < containerNum; ++i) {\n    +      schedulerNode.releaseContainer(containers.get(i).getContainerId(), true);\n    --- End diff --\n    \n    This seems to be in many tests. How about a helper to release all containers? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.658+0000","updated":"2017-03-25T01:05:20.658+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941429","id":"15941429","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023440\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    +      schedulerNode.containerStarted(containers.get((int)containerNum - 1).\n    +          getContainerId());\n    +    }\n    +  }\n    +\n    +  private FSAppAttempt createStarvingApp(FSSchedulerNode schedulerNode,\n    +                                         Resource request) {\n    +    FSAppAttempt starvingApp = mock(FSAppAttempt.class);\n    +    ApplicationAttemptId appAttemptId =\n    +        mock(ApplicationAttemptId.class);\n    +    when(starvingApp.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(starvingApp.assignContainer(schedulerNode)).thenAnswer(\n    +        new Answer<Resource>() {\n    +          @Override\n    +          public Resource answer(InvocationOnMock invocationOnMock)\n    +              throws Throwable {\n    +            Resource response = Resource.newInstance(0, 0);\n    +            while (!Resources.isNone(request) &&\n    +                !Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +              RMContainer container = createContainer(request, appAttemptId);\n    +              schedulerNode.allocateContainer(container);\n    +              Resources.addTo(response, container.getAllocatedResource());\n    +              Resources.subtractFrom(request,\n    +                  container.getAllocatedResource());\n    +            }\n    +            return response;\n    +          }\n    +        });\n    +    when(starvingApp.getPendingDemand()).thenReturn(request);\n    +    return starvingApp;\n    +  }\n    +\n    +  private void finalValidation(FSSchedulerNode schedulerNode) {\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    assertTrue(\"No containers should be reserved for preemption\",\n    +        schedulerNode.containersForPreemption.isEmpty());\n    +    assertTrue(\"No resources should be reserved for preemptees\",\n    --- End diff --\n    \n    s/preemptee/preemptor\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.664+0000","updated":"2017-03-25T01:05:20.664+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941430","id":"15941430","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023020\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    +    Iterator<FSAppAttempt> iterator =\n    +        resourcesPreemptedForApp.keySet().iterator();\n    +    while (iterator.hasNext()) {\n    +      FSAppAttempt app = iterator.next();\n    +      boolean removeApp = false;\n    --- End diff --\n    \n    This variable is not used. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.666+0000","updated":"2017-03-25T01:05:20.666+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941431","id":"15941431","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023650\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairSchedulerPreemption.java ---\n    @@ -294,11 +294,29 @@ private void verifyPreemption(int numStarvedAppContainers)\n             8 - 2 * numStarvedAppContainers,\n             greedyApp.getQueue().getMetrics().getAggregatePreemptedContainers());\n     \n    +    // Verify the node is reserved for the starvingApp\n    +    for (RMNode rmNode : rmNodes) {\n    +      FSSchedulerNode node = (FSSchedulerNode)\n    +          scheduler.getNodeTracker().getNode(rmNode.getNodeID());\n    +      if (node.getContainersForPreemption().size() > 0) {\n    +        assertTrue(node.getPreemptionList().keySet().contains(starvingApp));\n    +      }\n    +    }\n    +\n         sendEnoughNodeUpdatesToAssignFully();\n     \n         // Verify the preempted containers are assigned to starvingApp\n         assertEquals(\"Starved app is not assigned the right # of containers\",\n             numStarvedAppContainers, starvingApp.getLiveContainers().size());\n    +\n    +    // Verify the node is not reserved for the starvingApp anymore\n    +    for (RMNode rmNode : rmNodes) {\n    +      FSSchedulerNode node = (FSSchedulerNode)\n    +          scheduler.getNodeTracker().getNode(rmNode.getNodeID());\n    +      if (node.getContainersForPreemption().size() > 0) {\n    +        assertTrue(!node.getPreemptionList().keySet().contains(starvingApp));\n    --- End diff --\n    \n    assertFalse?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:20.675+0000","updated":"2017-03-25T01:05:20.675+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941432","id":"15941432","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020432\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -38,15 +47,45 @@\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    --- End diff --\n    \n    If you have RMContainer extend Comparable, you don't need this comparator. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:21.013+0000","updated":"2017-03-25T01:05:21.013+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941433","id":"15941433","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023665\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairSchedulerPreemption.java ---\n    @@ -294,11 +294,29 @@ private void verifyPreemption(int numStarvedAppContainers)\n             8 - 2 * numStarvedAppContainers,\n             greedyApp.getQueue().getMetrics().getAggregatePreemptedContainers());\n     \n    +    // Verify the node is reserved for the starvingApp\n    +    for (RMNode rmNode : rmNodes) {\n    +      FSSchedulerNode node = (FSSchedulerNode)\n    +          scheduler.getNodeTracker().getNode(rmNode.getNodeID());\n    +      if (node.getContainersForPreemption().size() > 0) {\n    +        assertTrue(node.getPreemptionList().keySet().contains(starvingApp));\n    --- End diff --\n    \n    assert message. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:21.365+0000","updated":"2017-03-25T01:05:21.365+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941434","id":"15941434","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020477\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -38,15 +47,45 @@\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores list of containers still to be preempted\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores amount of respources preempted and reserved for each app\n    --- End diff --\n    \n    Typo in resources\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:21.414+0000","updated":"2017-03-25T01:05:21.414+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941435","id":"15941435","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020752\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    --- End diff --\n    \n    Having to call cleanup before get seems like a bug-magnet. \n    \n    Since get already calls cleanup, I recommend not suggesting that callers call cleanup. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:21.606+0000","updated":"2017-03-25T01:05:21.606+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941436","id":"15941436","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108021228\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -968,6 +966,32 @@ private boolean shouldContinueAssigning(int containers,\n         }\n       }\n     \n    +  /**\n    +   * Assign preempted containers to the applications that have reserved\n    +   * resources for preempted containers.\n    +   * @param node Node to check\n    +   * @return assignment has occurred\n    +   */\n    +  static boolean assignPreemptedContainers(FSSchedulerNode node ) {\n    +    boolean assignedAny = false;\n    +    node.cleanupPreemptionList();\n    --- End diff --\n    \n    Let us rely on the call to getPreemptionList to do cleanup instead. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:22.302+0000","updated":"2017-03-25T01:05:22.302+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941437","id":"15941437","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023522\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    +      schedulerNode.containerStarted(containers.get((int)containerNum - 1).\n    +          getContainerId());\n    +    }\n    +  }\n    +\n    +  private FSAppAttempt createStarvingApp(FSSchedulerNode schedulerNode,\n    +                                         Resource request) {\n    +    FSAppAttempt starvingApp = mock(FSAppAttempt.class);\n    +    ApplicationAttemptId appAttemptId =\n    +        mock(ApplicationAttemptId.class);\n    +    when(starvingApp.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(starvingApp.assignContainer(schedulerNode)).thenAnswer(\n    +        new Answer<Resource>() {\n    +          @Override\n    +          public Resource answer(InvocationOnMock invocationOnMock)\n    +              throws Throwable {\n    +            Resource response = Resource.newInstance(0, 0);\n    +            while (!Resources.isNone(request) &&\n    +                !Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +              RMContainer container = createContainer(request, appAttemptId);\n    +              schedulerNode.allocateContainer(container);\n    +              Resources.addTo(response, container.getAllocatedResource());\n    +              Resources.subtractFrom(request,\n    +                  container.getAllocatedResource());\n    +            }\n    +            return response;\n    +          }\n    +        });\n    +    when(starvingApp.getPendingDemand()).thenReturn(request);\n    +    return starvingApp;\n    +  }\n    +\n    +  private void finalValidation(FSSchedulerNode schedulerNode) {\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    assertTrue(\"No containers should be reserved for preemption\",\n    +        schedulerNode.containersForPreemption.isEmpty());\n    +    assertTrue(\"No resources should be reserved for preemptees\",\n    +        schedulerNode.resourcesPreemptedForApp.isEmpty());\n    +    assertEquals(\n    +        \"No amount of resource should be reserved for preemptees\",\n    +        Resources.none(),\n    +        schedulerNode.getTotalReserved());\n    +  }\n    +\n    +  private void allocateContainers(FSSchedulerNode schedulerNode) {\n    +    FairScheduler.assignPreemptedContainers(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimpleAllocation() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    assertEquals(\"Container should be allocated\",\n    +        containers.get(0).getContainer().getResource(),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +\n    +    // Check that we are error prone\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release three containers with launch.\n    +   */\n    +  @Test\n    +  public void testMultipleAllocations() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    schedulerNode.containerStarted(containers.get(0).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(1));\n    +    schedulerNode.containerStarted(containers.get(1).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(2));\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(), 3.0),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(1).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(2).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimplePreemption() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    // Launch containers and saturate the cluster\n    +    saturateCluster(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(),\n    +            containerNum),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Request preemption\n    +    FSAppAttempt starvingApp = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(1024, 1));\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(0)), starvingApp);\n    +    assertEquals(\n    +        \"No resource amount should be reserved for preemptees\",\n    +        containers.get(0).getAllocatedResource(),\n    +        schedulerNode.getTotalReserved());\n    +\n    +    // Preemption occurs\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    allocateContainers(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        schedulerNode.getTotalResource(),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Release all containers\n    +    for (int i = 1; i < containerNum; ++i) {\n    +      schedulerNode.releaseContainer(containers.get(i).getContainerId(), true);\n    --- End diff --\n    \n    Can't you go through the container list for this? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:22.304+0000","updated":"2017-03-25T01:05:22.304+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941438","id":"15941438","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020976\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    +    Iterator<FSAppAttempt> iterator =\n    +        resourcesPreemptedForApp.keySet().iterator();\n    +    while (iterator.hasNext()) {\n    +      FSAppAttempt app = iterator.next();\n    +      boolean removeApp = false;\n    +      if (app.isStopped() || Resources.equals(\n    +          app.getPendingDemand(), Resources.none())) {\n    +        // App does not need more resources\n    +        Resources.subtractFrom(totalResourcesPreempted,\n    +            resourcesPreemptedForApp.get(app));\n    +        iterator.remove();\n    +      }\n    +    }\n    +  }\n    +\n    +  /**\n        * Mark {@code containers} as being considered for preemption so they are\n        * not considered again. A call to this requires a corresponding call to\n    -   * {@link #removeContainerForPreemption} to ensure we do not mark a\n    +   * removeContainer for preemption to ensure we do not mark a\n    --- End diff --\n    \n    Needs javadoc fixing.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:22.316+0000","updated":"2017-03-25T01:05:22.316+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941439","id":"15941439","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020913\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    +    Iterator<FSAppAttempt> iterator =\n    +        resourcesPreemptedForApp.keySet().iterator();\n    +    while (iterator.hasNext()) {\n    +      FSAppAttempt app = iterator.next();\n    +      boolean removeApp = false;\n    +      if (app.isStopped() || Resources.equals(\n    --- End diff --\n    \n    Use Resources.isNone instead.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:22.338+0000","updated":"2017-03-25T01:05:22.338+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941440","id":"15941440","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023588\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    +      schedulerNode.containerStarted(containers.get((int)containerNum - 1).\n    +          getContainerId());\n    +    }\n    +  }\n    +\n    +  private FSAppAttempt createStarvingApp(FSSchedulerNode schedulerNode,\n    +                                         Resource request) {\n    +    FSAppAttempt starvingApp = mock(FSAppAttempt.class);\n    +    ApplicationAttemptId appAttemptId =\n    +        mock(ApplicationAttemptId.class);\n    +    when(starvingApp.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(starvingApp.assignContainer(schedulerNode)).thenAnswer(\n    +        new Answer<Resource>() {\n    +          @Override\n    +          public Resource answer(InvocationOnMock invocationOnMock)\n    +              throws Throwable {\n    +            Resource response = Resource.newInstance(0, 0);\n    +            while (!Resources.isNone(request) &&\n    +                !Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +              RMContainer container = createContainer(request, appAttemptId);\n    +              schedulerNode.allocateContainer(container);\n    +              Resources.addTo(response, container.getAllocatedResource());\n    +              Resources.subtractFrom(request,\n    +                  container.getAllocatedResource());\n    +            }\n    +            return response;\n    +          }\n    +        });\n    +    when(starvingApp.getPendingDemand()).thenReturn(request);\n    +    return starvingApp;\n    +  }\n    +\n    +  private void finalValidation(FSSchedulerNode schedulerNode) {\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    assertTrue(\"No containers should be reserved for preemption\",\n    +        schedulerNode.containersForPreemption.isEmpty());\n    +    assertTrue(\"No resources should be reserved for preemptees\",\n    +        schedulerNode.resourcesPreemptedForApp.isEmpty());\n    +    assertEquals(\n    +        \"No amount of resource should be reserved for preemptees\",\n    +        Resources.none(),\n    +        schedulerNode.getTotalReserved());\n    +  }\n    +\n    +  private void allocateContainers(FSSchedulerNode schedulerNode) {\n    +    FairScheduler.assignPreemptedContainers(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimpleAllocation() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    assertEquals(\"Container should be allocated\",\n    +        containers.get(0).getContainer().getResource(),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +\n    +    // Check that we are error prone\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release three containers with launch.\n    +   */\n    +  @Test\n    +  public void testMultipleAllocations() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    schedulerNode.containerStarted(containers.get(0).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(1));\n    +    schedulerNode.containerStarted(containers.get(1).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(2));\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(), 3.0),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(1).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(2).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimplePreemption() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    // Launch containers and saturate the cluster\n    +    saturateCluster(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(),\n    +            containerNum),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Request preemption\n    +    FSAppAttempt starvingApp = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(1024, 1));\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(0)), starvingApp);\n    +    assertEquals(\n    +        \"No resource amount should be reserved for preemptees\",\n    +        containers.get(0).getAllocatedResource(),\n    +        schedulerNode.getTotalReserved());\n    +\n    +    // Preemption occurs\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    allocateContainers(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        schedulerNode.getTotalResource(),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Release all containers\n    +    for (int i = 1; i < containerNum; ++i) {\n    +      schedulerNode.releaseContainer(containers.get(i).getContainerId(), true);\n    --- End diff --\n    \n    And, shouldn't you start i with 0? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:23.312+0000","updated":"2017-03-25T01:05:23.312+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941441","id":"15941441","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020673\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -38,15 +47,45 @@\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores list of containers still to be preempted\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores amount of respources preempted and reserved for each app\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedForApp = new LinkedHashMap<>();\n    +  // Sum of resourcesPreemptedForApp values, total resources that are\n    +  // slated for preemption\n    +  Resource totalResourcesPreempted = Resource.newInstance(0, 0);\n     \n       public FSSchedulerNode(RMNode node, boolean usePortForNodeName) {\n         super(node, usePortForNodeName);\n       }\n     \n    +  /**\n    +   * Total amount of reserved resources including reservations and preempted\n    +   * containers.\n    +   * @return total resources reserved\n    +   */\n    +  Resource getTotalReserved() {\n    +    Resource totalReserved = getReservedContainer() != null\n    +        ? Resources.clone(getReservedContainer().getAllocatedResource())\n    +        : Resource.newInstance(0, 0);\n    --- End diff --\n    \n    One of the reasons I feel cloning none is better is when we add more resources (for example through ResourceTypes). \n    \n    An alternative would be to actually add a newInstance method that doesn't take any arguments and initializes all resources (including future ones) to zero. This could be done in a later JIRA.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:23.343+0000","updated":"2017-03-25T01:05:23.343+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941442","id":"15941442","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023192\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    --- End diff --\n    \n    For this test, do you really need a long? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:23.386+0000","updated":"2017-03-25T01:05:23.386+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941443","id":"15941443","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108020845\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    --- End diff --\n    \n    This method should be private. Offline, you mentioned this is called in tests. I would also see if that can be avoided. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:23.393+0000","updated":"2017-03-25T01:05:23.393+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941444","id":"15941444","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023660\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairSchedulerPreemption.java ---\n    @@ -294,11 +294,29 @@ private void verifyPreemption(int numStarvedAppContainers)\n             8 - 2 * numStarvedAppContainers,\n             greedyApp.getQueue().getMetrics().getAggregatePreemptedContainers());\n     \n    +    // Verify the node is reserved for the starvingApp\n    +    for (RMNode rmNode : rmNodes) {\n    +      FSSchedulerNode node = (FSSchedulerNode)\n    +          scheduler.getNodeTracker().getNode(rmNode.getNodeID());\n    +      if (node.getContainersForPreemption().size() > 0) {\n    +        assertTrue(node.getPreemptionList().keySet().contains(starvingApp));\n    +      }\n    +    }\n    +\n         sendEnoughNodeUpdatesToAssignFully();\n     \n         // Verify the preempted containers are assigned to starvingApp\n         assertEquals(\"Starved app is not assigned the right # of containers\",\n             numStarvedAppContainers, starvingApp.getLiveContainers().size());\n    +\n    +    // Verify the node is not reserved for the starvingApp anymore\n    +    for (RMNode rmNode : rmNodes) {\n    +      FSSchedulerNode node = (FSSchedulerNode)\n    +          scheduler.getNodeTracker().getNode(rmNode.getNodeID());\n    +      if (node.getContainersForPreemption().size() > 0) {\n    +        assertTrue(!node.getPreemptionList().keySet().contains(starvingApp));\n    --- End diff --\n    \n    assert message. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:23.402+0000","updated":"2017-03-25T01:05:23.402+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941445","id":"15941445","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108023213\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    --- End diff --\n    \n    Should the arraylist be final? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:05:23.464+0000","updated":"2017-03-25T01:05:23.464+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941447","id":"15941447","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024058\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -131,10 +203,58 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n     \n       /**\n        * Remove container from the set of containers marked for preemption.\n    +   * Reserve the preempted resources for the app that requested\n    +   * the preemption.\n        *\n        * @param container container to remove\n        */\n       void removeContainerForPreemption(RMContainer container) {\n         containersForPreemption.remove(container);\n       }\n    +\n    +  /**\n    +   * The Scheduler has allocated containers on this node to the given\n    +   * application.\n    +   * @param rmContainer Allocated container\n    +   * @param launchedOnNode True if the container has been launched\n    +   */\n    +  @Override\n    +  protected synchronized void allocateContainer(RMContainer rmContainer,\n    +                                                boolean launchedOnNode) {\n    +    super.allocateContainer(rmContainer, launchedOnNode);\n    +    Resource allocated = rmContainer.getAllocatedResource();\n    +    if (!Resources.isNone(allocated)) {\n    +      for (FSAppAttempt app: resourcesPreemptedPerApp.keySet()) {\n    --- End diff --\n    \n    All right. Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:16:26.181+0000","updated":"2017-03-25T01:16:26.181+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941450","id":"15941450","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024135\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -38,15 +47,45 @@\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:18:42.973+0000","updated":"2017-03-25T01:18:42.973+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941451","id":"15941451","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024138\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -18,18 +18,27 @@\n     \n     package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n     \n    +import com.google.common.annotations.VisibleForTesting;\n     import org.apache.commons.logging.Log;\n     import org.apache.commons.logging.LogFactory;\n     import org.apache.hadoop.classification.InterfaceAudience.Private;\n     import org.apache.hadoop.classification.InterfaceStability.Unstable;\n     import org.apache.hadoop.yarn.api.records.ApplicationAttemptId;\n    +import org.apache.hadoop.yarn.api.records.ContainerId;\n    +import org.apache.hadoop.yarn.api.records.Resource;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n     import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt;\n     import org.apache.hadoop.yarn.server.scheduler.SchedulerRequestKey;\n     import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n     \n     import java.util.Collection;\n    +import java.util.Comparator;\n    +import java.util.Iterator;\n    +import java.util.LinkedHashMap;\n    +import java.util.LinkedHashSet;\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:18:47.493+0000","updated":"2017-03-25T01:18:47.493+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941465","id":"15941465","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024599\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -38,15 +47,45 @@\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores list of containers still to be preempted\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores amount of respources preempted and reserved for each app\n    --- End diff --\n    \n    Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:34:11.428+0000","updated":"2017-03-25T01:34:11.428+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941467","id":"15941467","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024673\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -38,15 +47,45 @@\n     public class FSSchedulerNode extends SchedulerNode {\n     \n       private static final Log LOG = LogFactory.getLog(FSSchedulerNode.class);\n    +  private static final Comparator<RMContainer> comparator =\n    +      new Comparator<RMContainer>() {\n    +    @Override\n    +    public int compare(RMContainer o1, RMContainer o2) {\n    +      return Long.compare(o1.getContainerId().getContainerId(),\n    +          o2.getContainerId().getContainerId());\n    +    }\n    +  };\n     \n       private FSAppAttempt reservedAppSchedulable;\n    -  private final Set<RMContainer> containersForPreemption =\n    -      new ConcurrentSkipListSet<>();\n    +  // Stores list of containers still to be preempted\n    +  @VisibleForTesting\n    +  final Set<RMContainer> containersForPreemption =\n    +      new ConcurrentSkipListSet<>(comparator);\n    +  // Stores amount of respources preempted and reserved for each app\n    +  @VisibleForTesting\n    +  final Map<FSAppAttempt, Resource>\n    +      resourcesPreemptedForApp = new LinkedHashMap<>();\n    +  // Sum of resourcesPreemptedForApp values, total resources that are\n    +  // slated for preemption\n    +  Resource totalResourcesPreempted = Resource.newInstance(0, 0);\n     \n       public FSSchedulerNode(RMNode node, boolean usePortForNodeName) {\n         super(node, usePortForNodeName);\n       }\n     \n    +  /**\n    +   * Total amount of reserved resources including reservations and preempted\n    +   * containers.\n    +   * @return total resources reserved\n    +   */\n    +  Resource getTotalReserved() {\n    +    Resource totalReserved = getReservedContainer() != null\n    +        ? Resources.clone(getReservedContainer().getAllocatedResource())\n    +        : Resource.newInstance(0, 0);\n    --- End diff --\n    \n    Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:36:21.126+0000","updated":"2017-03-25T01:36:21.126+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941468","id":"15941468","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024698\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    --- End diff --\n    \n    Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:37:15.104+0000","updated":"2017-03-25T01:37:15.104+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941469","id":"15941469","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024703\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:37:23.385+0000","updated":"2017-03-25T01:37:23.385+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941470","id":"15941470","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024707\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    +    Iterator<FSAppAttempt> iterator =\n    +        resourcesPreemptedForApp.keySet().iterator();\n    +    while (iterator.hasNext()) {\n    +      FSAppAttempt app = iterator.next();\n    +      boolean removeApp = false;\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:37:32.491+0000","updated":"2017-03-25T01:37:32.491+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941472","id":"15941472","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024723\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    +    Iterator<FSAppAttempt> iterator =\n    +        resourcesPreemptedForApp.keySet().iterator();\n    +    while (iterator.hasNext()) {\n    +      FSAppAttempt app = iterator.next();\n    +      boolean removeApp = false;\n    +      if (app.isStopped() || Resources.equals(\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:38:08.030+0000","updated":"2017-03-25T01:38:08.030+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941474","id":"15941474","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024779\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +149,57 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * It is a good practice to call {@link #cleanupPreemptionList()}\n    +   * after this call\n    +   * @return if any resources were allocated\n    +   */\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  synchronized void cleanupPreemptionList() {\n    +    Iterator<FSAppAttempt> iterator =\n    +        resourcesPreemptedForApp.keySet().iterator();\n    +    while (iterator.hasNext()) {\n    +      FSAppAttempt app = iterator.next();\n    +      boolean removeApp = false;\n    +      if (app.isStopped() || Resources.equals(\n    +          app.getPendingDemand(), Resources.none())) {\n    +        // App does not need more resources\n    +        Resources.subtractFrom(totalResourcesPreempted,\n    +            resourcesPreemptedForApp.get(app));\n    +        iterator.remove();\n    +      }\n    +    }\n    +  }\n    +\n    +  /**\n        * Mark {@code containers} as being considered for preemption so they are\n        * not considered again. A call to this requires a corresponding call to\n    -   * {@link #removeContainerForPreemption} to ensure we do not mark a\n    +   * removeContainer for preemption to ensure we do not mark a\n    --- End diff --\n    \n    Fixed.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:39:23.157+0000","updated":"2017-03-25T01:39:23.157+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941477","id":"15941477","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024812\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -968,6 +966,32 @@ private boolean shouldContinueAssigning(int containers,\n         }\n       }\n     \n    +  /**\n    +   * Assign preempted containers to the applications that have reserved\n    +   * resources for preempted containers.\n    +   * @param node Node to check\n    +   * @return assignment has occurred\n    +   */\n    +  static boolean assignPreemptedContainers(FSSchedulerNode node ) {\n    +    boolean assignedAny = false;\n    +    node.cleanupPreemptionList();\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:40:21.592+0000","updated":"2017-03-25T01:40:21.592+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941479","id":"15941479","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024815\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -968,6 +966,32 @@ private boolean shouldContinueAssigning(int containers,\n         }\n       }\n     \n    +  /**\n    +   * Assign preempted containers to the applications that have reserved\n    +   * resources for preempted containers.\n    +   * @param node Node to check\n    +   * @return assignment has occurred\n    +   */\n    +  static boolean assignPreemptedContainers(FSSchedulerNode node ) {\n    +    boolean assignedAny = false;\n    +    node.cleanupPreemptionList();\n    +    for (Entry<FSAppAttempt, Resource> entry :\n    +        node.getPreemptionList().entrySet()) {\n    +      FSAppAttempt app = entry.getKey();\n    +      Resource reserved = Resources.clone(entry.getValue());\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:40:34.357+0000","updated":"2017-03-25T01:40:34.357+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941480","id":"15941480","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024823\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -968,6 +966,32 @@ private boolean shouldContinueAssigning(int containers,\n         }\n       }\n     \n    +  /**\n    +   * Assign preempted containers to the applications that have reserved\n    +   * resources for preempted containers.\n    +   * @param node Node to check\n    +   * @return assignment has occurred\n    +   */\n    +  static boolean assignPreemptedContainers(FSSchedulerNode node ) {\n    +    boolean assignedAny = false;\n    +    node.cleanupPreemptionList();\n    +    for (Entry<FSAppAttempt, Resource> entry :\n    +        node.getPreemptionList().entrySet()) {\n    +      FSAppAttempt app = entry.getKey();\n    +      Resource reserved = Resources.clone(entry.getValue());\n    +      while (!app.isStopped() && !Resources.isNone(reserved)) {\n    +        Resource assigned = app.assignContainer(node);\n    +        if (Resources.isNone(assigned)) {\n    +          break;\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:40:45.673+0000","updated":"2017-03-25T01:40:45.673+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941481","id":"15941481","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024837\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -968,6 +966,32 @@ private boolean shouldContinueAssigning(int containers,\n         }\n       }\n     \n    +  /**\n    +   * Assign preempted containers to the applications that have reserved\n    +   * resources for preempted containers.\n    +   * @param node Node to check\n    +   * @return assignment has occurred\n    +   */\n    +  static boolean assignPreemptedContainers(FSSchedulerNode node ) {\n    +    boolean assignedAny = false;\n    +    node.cleanupPreemptionList();\n    +    for (Entry<FSAppAttempt, Resource> entry :\n    +        node.getPreemptionList().entrySet()) {\n    +      FSAppAttempt app = entry.getKey();\n    +      Resource reserved = Resources.clone(entry.getValue());\n    +      while (!app.isStopped() && !Resources.isNone(reserved)) {\n    +        Resource assigned = app.assignContainer(node);\n    +        if (Resources.isNone(assigned)) {\n    +          break;\n    +        }\n    +        assignedAny = true;\n    +        Resources.subtractFromNonNegative(reserved, assigned);\n    +      }\n    +    }\n    +    node.cleanupPreemptionList();\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:41:25.401+0000","updated":"2017-03-25T01:41:25.401+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941483","id":"15941483","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108024844\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java ---\n    @@ -646,7 +646,6 @@ private Container createContainer(FSSchedulerNode node, Resource capability,\n       private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n           Container reservedContainer, NodeType type,\n           SchedulerRequestKey schedulerKey) {\n    -\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:41:34.885+0000","updated":"2017-03-25T01:41:34.885+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941491","id":"15941491","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025184\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:54:54.784+0000","updated":"2017-03-25T01:54:54.784+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941495","id":"15941495","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025201\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:55:59.634+0000","updated":"2017-03-25T01:55:59.634+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941497","id":"15941497","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025247\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    --- End diff --\n    \n    That is for the inner class. Sorry, what do you mean? When?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:57:54.646+0000","updated":"2017-03-25T01:57:54.646+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941498","id":"15941498","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025251\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    --- End diff --\n    \n    I do have a when in all these cases.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:58:14.970+0000","updated":"2017-03-25T01:58:14.970+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941499","id":"15941499","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025258\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    --- End diff --\n    \n    I changed to int.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T01:58:29.574+0000","updated":"2017-03-25T01:58:29.574+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941501","id":"15941501","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025333\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    +      schedulerNode.containerStarted(containers.get((int)containerNum - 1).\n    +          getContainerId());\n    +    }\n    +  }\n    +\n    +  private FSAppAttempt createStarvingApp(FSSchedulerNode schedulerNode,\n    +                                         Resource request) {\n    +    FSAppAttempt starvingApp = mock(FSAppAttempt.class);\n    +    ApplicationAttemptId appAttemptId =\n    +        mock(ApplicationAttemptId.class);\n    +    when(starvingApp.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(starvingApp.assignContainer(schedulerNode)).thenAnswer(\n    +        new Answer<Resource>() {\n    +          @Override\n    +          public Resource answer(InvocationOnMock invocationOnMock)\n    +              throws Throwable {\n    +            Resource response = Resource.newInstance(0, 0);\n    +            while (!Resources.isNone(request) &&\n    +                !Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +              RMContainer container = createContainer(request, appAttemptId);\n    +              schedulerNode.allocateContainer(container);\n    +              Resources.addTo(response, container.getAllocatedResource());\n    +              Resources.subtractFrom(request,\n    +                  container.getAllocatedResource());\n    +            }\n    +            return response;\n    +          }\n    +        });\n    +    when(starvingApp.getPendingDemand()).thenReturn(request);\n    +    return starvingApp;\n    +  }\n    +\n    +  private void finalValidation(FSSchedulerNode schedulerNode) {\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    assertTrue(\"No containers should be reserved for preemption\",\n    +        schedulerNode.containersForPreemption.isEmpty());\n    +    assertTrue(\"No resources should be reserved for preemptees\",\n    +        schedulerNode.resourcesPreemptedForApp.isEmpty());\n    +    assertEquals(\n    +        \"No amount of resource should be reserved for preemptees\",\n    +        Resources.none(),\n    +        schedulerNode.getTotalReserved());\n    +  }\n    +\n    +  private void allocateContainers(FSSchedulerNode schedulerNode) {\n    +    FairScheduler.assignPreemptedContainers(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimpleAllocation() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    assertEquals(\"Container should be allocated\",\n    +        containers.get(0).getContainer().getResource(),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +\n    +    // Check that we are error prone\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release three containers with launch.\n    +   */\n    +  @Test\n    +  public void testMultipleAllocations() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    schedulerNode.containerStarted(containers.get(0).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(1));\n    +    schedulerNode.containerStarted(containers.get(1).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(2));\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(), 3.0),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(1).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(2).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimplePreemption() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    // Launch containers and saturate the cluster\n    +    saturateCluster(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(),\n    +            containerNum),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Request preemption\n    +    FSAppAttempt starvingApp = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(1024, 1));\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(0)), starvingApp);\n    +    assertEquals(\n    +        \"No resource amount should be reserved for preemptees\",\n    +        containers.get(0).getAllocatedResource(),\n    +        schedulerNode.getTotalReserved());\n    +\n    +    // Preemption occurs\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    allocateContainers(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        schedulerNode.getTotalResource(),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Release all containers\n    +    for (int i = 1; i < containerNum; ++i) {\n    +      schedulerNode.releaseContainer(containers.get(i).getContainerId(), true);\n    --- End diff --\n    \n    It is not 0 because I release the rest of the containers that were not preempted. That is, I would like to see the actual schedulerNode.releaseContainer call next to the preemption in the same function to see what is actually happening. Another function would hide the ability to see all releases together.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T02:00:58.804+0000","updated":"2017-03-25T02:00:58.804+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941502","id":"15941502","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025337\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFSSchedulerNode.java ---\n    @@ -0,0 +1,376 @@\n    +package org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair;\n    +\n    +import org.apache.hadoop.yarn.api.records.*;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer;\n    +import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode;\n    +import org.apache.hadoop.yarn.util.resource.Resources;\n    +import org.junit.Test;\n    +import org.mockito.invocation.InvocationOnMock;\n    +import org.mockito.stubbing.Answer;\n    +\n    +import java.util.ArrayList;\n    +import java.util.Collections;\n    +import java.util.Map;\n    +\n    +import static org.junit.Assert.assertEquals;\n    +import static org.junit.Assert.assertNotEquals;\n    +import static org.junit.Assert.assertTrue;\n    +import static org.mockito.Mockito.mock;\n    +import static org.mockito.Mockito.when;\n    +\n    +/**\n    + * Test scheduler node, especially preemption reservations.\n    + */\n    +public class TestFSSchedulerNode {\n    +  private long containerNum = 0;\n    +  private ArrayList<RMContainer> containers = new ArrayList<>();\n    +\n    +  private RMNode createNode() {\n    +    RMNode node = mock(RMNode.class);\n    +    when(node.getTotalCapability()).thenReturn(Resource.newInstance(8192, 8));\n    +    when(node.getHostName()).thenReturn(\"host.domain.com\");\n    +    return node;\n    +  }\n    +\n    +  private RMContainer createDefaultContainer() {\n    +    return createContainer(Resource.newInstance(1024, 1), null);\n    +  }\n    +\n    +  private RMContainer createContainer(\n    +      Resource request, ApplicationAttemptId appAttemptId) {\n    +    RMContainer container = mock(RMContainer.class);\n    +    Container containerInner = mock(Container.class);\n    +    ContainerId id = mock(ContainerId.class);\n    +    when(id.getContainerId()).thenReturn(containerNum);\n    +    when(containerInner.getResource()).\n    +        thenReturn(Resources.clone(request));\n    +    when(containerInner.getId()).thenReturn(id);\n    +    when(containerInner.getExecutionType()).\n    +        thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(container.getContainerId()).thenReturn(id);\n    +    when(container.getContainer()).thenReturn(containerInner);\n    +    when(container.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);\n    +    when(container.getAllocatedResource()).\n    +        thenReturn(Resources.clone(request));\n    +    containers.add(container);\n    +    containerNum++;\n    +    return container;\n    +  }\n    +\n    +  private void saturateCluster(FSSchedulerNode schedulerNode) {\n    +    while (!Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +      createDefaultContainer();\n    +      schedulerNode.allocateContainer(containers.get((int)containerNum - 1));\n    +      schedulerNode.containerStarted(containers.get((int)containerNum - 1).\n    +          getContainerId());\n    +    }\n    +  }\n    +\n    +  private FSAppAttempt createStarvingApp(FSSchedulerNode schedulerNode,\n    +                                         Resource request) {\n    +    FSAppAttempt starvingApp = mock(FSAppAttempt.class);\n    +    ApplicationAttemptId appAttemptId =\n    +        mock(ApplicationAttemptId.class);\n    +    when(starvingApp.getApplicationAttemptId()).thenReturn(appAttemptId);\n    +    when(starvingApp.assignContainer(schedulerNode)).thenAnswer(\n    +        new Answer<Resource>() {\n    +          @Override\n    +          public Resource answer(InvocationOnMock invocationOnMock)\n    +              throws Throwable {\n    +            Resource response = Resource.newInstance(0, 0);\n    +            while (!Resources.isNone(request) &&\n    +                !Resources.isNone(schedulerNode.getUnallocatedResource())) {\n    +              RMContainer container = createContainer(request, appAttemptId);\n    +              schedulerNode.allocateContainer(container);\n    +              Resources.addTo(response, container.getAllocatedResource());\n    +              Resources.subtractFrom(request,\n    +                  container.getAllocatedResource());\n    +            }\n    +            return response;\n    +          }\n    +        });\n    +    when(starvingApp.getPendingDemand()).thenReturn(request);\n    +    return starvingApp;\n    +  }\n    +\n    +  private void finalValidation(FSSchedulerNode schedulerNode) {\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    assertTrue(\"No containers should be reserved for preemption\",\n    +        schedulerNode.containersForPreemption.isEmpty());\n    +    assertTrue(\"No resources should be reserved for preemptees\",\n    +        schedulerNode.resourcesPreemptedForApp.isEmpty());\n    +    assertEquals(\n    +        \"No amount of resource should be reserved for preemptees\",\n    +        Resources.none(),\n    +        schedulerNode.getTotalReserved());\n    +  }\n    +\n    +  private void allocateContainers(FSSchedulerNode schedulerNode) {\n    +    FairScheduler.assignPreemptedContainers(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimpleAllocation() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    assertEquals(\"Container should be allocated\",\n    +        containers.get(0).getContainer().getResource(),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    assertEquals(\"Everything should have been released\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +\n    +    // Check that we are error prone\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release three containers with launch.\n    +   */\n    +  @Test\n    +  public void testMultipleAllocations() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    createDefaultContainer();\n    +    assertEquals(\"Nothing should have been allocated, yet\",\n    +        Resources.none(), schedulerNode.getAllocatedResource());\n    +    schedulerNode.allocateContainer(containers.get(0));\n    +    schedulerNode.containerStarted(containers.get(0).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(1));\n    +    schedulerNode.containerStarted(containers.get(1).getContainerId());\n    +    schedulerNode.allocateContainer(containers.get(2));\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(), 3.0),\n    +        schedulerNode.getAllocatedResource());\n    +    schedulerNode.releaseContainer(containers.get(1).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(2).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release a single container.\n    +   */\n    +  @Test\n    +  public void testSimplePreemption() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    // Launch containers and saturate the cluster\n    +    saturateCluster(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(),\n    +            containerNum),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Request preemption\n    +    FSAppAttempt starvingApp = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(1024, 1));\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(0)), starvingApp);\n    +    assertEquals(\n    +        \"No resource amount should be reserved for preemptees\",\n    +        containers.get(0).getAllocatedResource(),\n    +        schedulerNode.getTotalReserved());\n    +\n    +    // Preemption occurs\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    allocateContainers(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        schedulerNode.getTotalResource(),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Release all containers\n    +    for (int i = 1; i < containerNum; ++i) {\n    +      schedulerNode.releaseContainer(containers.get(i).getContainerId(), true);\n    +    }\n    +    finalValidation(schedulerNode);\n    +  }\n    +\n    +  /**\n    +   * Allocate and release three containers requested by two apps.\n    +   */\n    +  @Test\n    +  public void testComplexPreemption() {\n    +    RMNode node = createNode();\n    +    FSSchedulerNode schedulerNode = new FSSchedulerNode(node, false);\n    +\n    +    // Launch containers and saturate the cluster\n    +    saturateCluster(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        Resources.multiply(containers.get(0).getContainer().getResource(),\n    +            containerNum),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Preempt a container\n    +    FSAppAttempt starvingApp1 = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(2048, 2));\n    +    FSAppAttempt starvingApp2 = createStarvingApp(schedulerNode,\n    +        Resource.newInstance(1024, 1));\n    +\n    +    // Preemption thread kicks in\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(0)), starvingApp1);\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(1)), starvingApp1);\n    +    schedulerNode.addContainersForPreemption(\n    +        Collections.singletonList(containers.get(2)), starvingApp2);\n    +\n    +    // Preemption happens\n    +    schedulerNode.releaseContainer(containers.get(0).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(2).getContainerId(), true);\n    +    schedulerNode.releaseContainer(containers.get(1).getContainerId(), true);\n    +\n    +    allocateContainers(schedulerNode);\n    +    assertEquals(\"Container should be allocated\",\n    +        schedulerNode.getTotalResource(),\n    +        schedulerNode.getAllocatedResource());\n    +\n    +    // Release all containers\n    +    for (int i = 3; i < containerNum; ++i) {\n    +      schedulerNode.releaseContainer(containers.get(i).getContainerId(), true);\n    --- End diff --\n    \n    Same response :-)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T02:01:11.916+0000","updated":"2017-03-25T02:01:11.916+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941503","id":"15941503","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025370\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairSchedulerPreemption.java ---\n    @@ -294,11 +294,29 @@ private void verifyPreemption(int numStarvedAppContainers)\n             8 - 2 * numStarvedAppContainers,\n             greedyApp.getQueue().getMetrics().getAggregatePreemptedContainers());\n     \n    +    // Verify the node is reserved for the starvingApp\n    +    for (RMNode rmNode : rmNodes) {\n    +      FSSchedulerNode node = (FSSchedulerNode)\n    +          scheduler.getNodeTracker().getNode(rmNode.getNodeID());\n    +      if (node.getContainersForPreemption().size() > 0) {\n    +        assertTrue(node.getPreemptionList().keySet().contains(starvingApp));\n    --- End diff --\n    \n    Done.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T02:02:47.820+0000","updated":"2017-03-25T02:02:47.820+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15941504","id":"15941504","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108025378\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairSchedulerPreemption.java ---\n    @@ -294,11 +294,29 @@ private void verifyPreemption(int numStarvedAppContainers)\n             8 - 2 * numStarvedAppContainers,\n             greedyApp.getQueue().getMetrics().getAggregatePreemptedContainers());\n     \n    +    // Verify the node is reserved for the starvingApp\n    +    for (RMNode rmNode : rmNodes) {\n    +      FSSchedulerNode node = (FSSchedulerNode)\n    +          scheduler.getNodeTracker().getNode(rmNode.getNodeID());\n    +      if (node.getContainersForPreemption().size() > 0) {\n    +        assertTrue(node.getPreemptionList().keySet().contains(starvingApp));\n    +      }\n    +    }\n    +\n         sendEnoughNodeUpdatesToAssignFully();\n     \n         // Verify the preempted containers are assigned to starvingApp\n         assertEquals(\"Starved app is not assigned the right # of containers\",\n             numStarvedAppContainers, starvingApp.getLiveContainers().size());\n    +\n    +    // Verify the node is not reserved for the starvingApp anymore\n    +    for (RMNode rmNode : rmNodes) {\n    +      FSSchedulerNode node = (FSSchedulerNode)\n    +          scheduler.getNodeTracker().getNode(rmNode.getNodeID());\n    +      if (node.getContainersForPreemption().size() > 0) {\n    +        assertTrue(!node.getPreemptionList().keySet().contains(starvingApp));\n    --- End diff --\n    \n    Done.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-25T02:02:57.579+0000","updated":"2017-03-25T02:02:57.579+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15945819","id":"15945819","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108520022\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -130,11 +200,47 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n       }\n     \n       /**\n    -   * Remove container from the set of containers marked for preemption.\n    -   *\n    -   * @param container container to remove\n    +   * The Scheduler has allocated containers on this node to the given\n    +   * application.\n    +   * @param rmContainer Allocated container\n    +   * @param launchedOnNode True if the container has been launched\n    +   */\n    +  @Override\n    +  protected synchronized void allocateContainer(RMContainer rmContainer,\n    +                                                boolean launchedOnNode) {\n    +    super.allocateContainer(rmContainer, launchedOnNode);\n    +    Resource allocated = rmContainer.getAllocatedResource();\n    +    if (!Resources.isNone(allocated)) {\n    +      FSAppAttempt app =\n    +          appIdToAppMap.get(rmContainer.getApplicationAttemptId());\n    +      if (app != null) {\n    --- End diff --\n    \n    For readability, can we can add a comment either before/after the null check or in the else block. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-28T19:56:06.707+0000","updated":"2017-03-28T19:56:06.707+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15945820","id":"15945820","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108521170\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -987,12 +1010,18 @@ void attemptScheduling(FSSchedulerNode node) {\n           }\n     \n           // Assign new containers...\n    -      // 1. Check for reserved applications\n    -      // 2. Schedule if there are no reservations\n    -\n    -      boolean validReservation = false;\n    +      // 1. Ensure containers are assigned to the apps that preempted\n    +      // 2. Check for reserved applications\n    +      // 3. Schedule if there are no reservations\n    +\n    +      // Apps may wait for preempted containers\n    +      // We have to satisfy these first to avoid cases, when we preempt\n    +      // a container for A from B and C gets the preempted containers,\n    +      // when C does not qualify for preemption itself.\n    +      boolean validReservation;\n    +      validReservation = assignPreemptedContainers(node);\n           FSAppAttempt reservedAppSchedulable = node.getReservedAppSchedulable();\n    -      if (reservedAppSchedulable != null) {\n    +      if (!validReservation && reservedAppSchedulable != null) {\n    --- End diff --\n    \n    In lieu of future changes around assigning as many containers as directed by assign-multiple settings, can we not gate further allocations on the result of assignPreemptedContainers. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-28T19:56:06.754+0000","updated":"2017-03-28T19:56:06.754+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15945821","id":"15945821","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108518561\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -110,16 +140,56 @@ synchronized FSAppAttempt getReservedAppSchedulable() {\n       }\n     \n       /**\n    +   * List reserved resources after preemption and assign them to the\n    +   * appropriate applications in a FIFO order.\n    +   * @return if any resources were allocated\n    +   */\n    +  @VisibleForTesting\n    +  synchronized LinkedHashMap<FSAppAttempt, Resource> getPreemptionList() {\n    +    cleanupPreemptionList();\n    +    return new LinkedHashMap<>(resourcesPreemptedForApp);\n    +  }\n    +\n    +  /**\n    +   * Remove apps that have their preemption requests fulfilled\n    +   */\n    +  private synchronized void cleanupPreemptionList() {\n    +    Iterator<FSAppAttempt> iterator =\n    +        resourcesPreemptedForApp.keySet().iterator();\n    +    while (iterator.hasNext()) {\n    +      FSAppAttempt app = iterator.next();\n    +      if (app.isStopped() || !app.isStarved()) {\n    +        // App does not need more resources\n    +        Resources.subtractFrom(totalResourcesPreempted,\n    +            resourcesPreemptedForApp.get(app));\n    +        appIdToAppMap.remove(app.getApplicationAttemptId());\n    +        iterator.remove();\n    +      }\n    +    }\n    +  }\n    +\n    +  /**\n        * Mark {@code containers} as being considered for preemption so they are\n        * not considered again. A call to this requires a corresponding call to\n    -   * {@link #removeContainerForPreemption} to ensure we do not mark a\n    +   * {@code releaseContainer} for preemption to ensure we do not mark a\n    --- End diff --\n    \n    Should we drop \"for preemption\" altogether? \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-28T19:56:06.782+0000","updated":"2017-03-28T19:56:06.782+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15945822","id":"15945822","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108518121\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmcontainer/RMContainer.java ---\n    @@ -42,7 +42,8 @@\n      * when resources are being reserved to fill space for a future container \n      * allocation.\n      */\n    -public interface RMContainer extends EventHandler<RMContainerEvent> {\n    +public interface RMContainer extends EventHandler<RMContainerEvent>,\n    --- End diff --\n    \n    We need a corresponding change in RMContainerImpl. It should suffice to implement only RMContainer now. .\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-28T19:56:06.879+0000","updated":"2017-03-28T19:56:06.879+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15945823","id":"15945823","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r108519744\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSSchedulerNode.java ---\n    @@ -130,11 +200,47 @@ void addContainersForPreemption(Collection<RMContainer> containers) {\n       }\n     \n       /**\n    -   * Remove container from the set of containers marked for preemption.\n    -   *\n    -   * @param container container to remove\n    +   * The Scheduler has allocated containers on this node to the given\n    +   * application.\n    +   * @param rmContainer Allocated container\n    +   * @param launchedOnNode True if the container has been launched\n    +   */\n    +  @Override\n    +  protected synchronized void allocateContainer(RMContainer rmContainer,\n    +                                                boolean launchedOnNode) {\n    +    super.allocateContainer(rmContainer, launchedOnNode);\n    +    Resource allocated = rmContainer.getAllocatedResource();\n    +    if (!Resources.isNone(allocated)) {\n    --- End diff --\n    \n    Will we have an empty allocation? If not, should we log an error when we do. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-28T19:56:06.888+0000","updated":"2017-03-28T19:56:06.888+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15950134","id":"15950134","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r109071718\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java ---\n    @@ -987,10 +1010,16 @@ void attemptScheduling(FSSchedulerNode node) {\n           }\n     \n           // Assign new containers...\n    -      // 1. Check for reserved applications\n    -      // 2. Schedule if there are no reservations\n    -\n    +      // 1. Ensure containers are assigned to the apps that preempted\n    +      // 2. Check for reserved applications\n    +      // 3. Schedule if there are no reservations\n    +\n    +      // Apps may wait for preempted containers\n    +      // We have to satisfy these first to avoid cases, when we preempt\n    +      // a container for A from B and C gets the preempted containers,\n    +      // when C does not qualify for preemption itself.\n           boolean validReservation = false;\n    +      assignPreemptedContainers(node);\n    --- End diff --\n    \n    Call to assignPreemptedContainers should go before declaring validReservation. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-31T01:16:44.801+0000","updated":"2017-03-31T01:16:44.801+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15950135","id":"15950135","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user kambatla commented on a diff in the pull request:\n\n    https://github.com/apache/hadoop/pull/201#discussion_r109071512\n  \n    --- Diff: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java ---\n    @@ -647,7 +647,12 @@ private boolean reserve(Resource perAllocationResource, FSSchedulerNode node,\n           Container reservedContainer, NodeType type,\n           SchedulerRequestKey schedulerKey) {\n     \n    -    if (!reservationExceedsThreshold(node, type)) {\n    +    RMContainer nodeReservedContainer = node.getReservedContainer();\n    +    boolean reservableForThisApp = nodeReservedContainer == null ||\n    +        nodeReservedContainer.getApplicationAttemptId()\n    +            .equals(getApplicationAttemptId());\n    +    if (!reservationExceedsThreshold(node, type) &&\n    +        reservableForThisApp) {\n    --- End diff --\n    \n    Let us flip the order here, because reservableForThisApp is cheaper to check. \n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-03-31T01:16:44.806+0000","updated":"2017-03-31T01:16:44.806+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15951936","id":"15951936","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 29s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 2 new or modified test files. {color} |\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  1m 47s{color} | {color:blue} Maven dependency ordering for branch {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 33s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 15m  9s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m 39s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 20s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 41s{color} | {color:green} trunk passed {color} |\n| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hadoop-project {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 56s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m  2s{color} | {color:green} trunk passed {color} |\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 14s{color} | {color:blue} Maven dependency ordering for patch {color} |\n| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red}  0m 19s{color} | {color:red} hadoop-yarn-common in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} compile {color} | {color:red}  2m 39s{color} | {color:red} root in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} javac {color} | {color:red}  2m 39s{color} | {color:red} root in the patch failed. {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  1m 39s{color} | {color:orange} root: The patch generated 13 new + 94 unchanged - 3 fixed = 107 total (was 97) {color} |\n| {color:red}-1{color} | {color:red} mvnsite {color} | {color:red}  0m 19s{color} | {color:red} hadoop-yarn-common in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  3s{color} | {color:green} The patch has no ill-formed XML file. {color} |\n| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hadoop-project {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  0m 19s{color} | {color:red} hadoop-yarn-common in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} javadoc {color} | {color:red}  0m 27s{color} | {color:red} hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common generated 4 new + 4575 unchanged - 0 fixed = 4579 total (was 4575) {color} |\n| {color:green}+1{color} | {color:green} unit {color} | {color:green}  0m 10s{color} | {color:green} hadoop-project in the patch passed. {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red}  0m 20s{color} | {color:red} hadoop-yarn-common in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red} 39m 17s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} asflicense {color} | {color:red}  0m 21s{color} | {color:red} The patch generated 1 ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black}110m  2s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| Failed junit tests | hadoop.yarn.server.resourcemanager.TestRMRestart |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5829 |\n| GITHUB PR | https://github.com/apache/hadoop/pull/201 |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  xml  findbugs  checkstyle  |\n| uname | Linux bce91ad714f7 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 73835c7 |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.0.0 |\n| mvninstall | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/patch-mvninstall-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| compile | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/patch-compile-root.txt |\n| javac | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/patch-compile-root.txt |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/diff-checkstyle-root.txt |\n| mvnsite | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/patch-mvnsite-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| findbugs | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/patch-findbugs-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| javadoc | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/diff-javadoc-javadoc-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15465/testReport/ |\n| asflicense | https://builds.apache.org/job/PreCommit-YARN-Build/15465/artifact/patchprocess/patch-asflicense-problems.txt |\n| modules | C: hadoop-project hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: . |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15465/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-04-01T02:09:20.991+0000","updated":"2017-04-01T02:09:20.991+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15953800","id":"15953800","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"body":"I think Jenkins got confused on the pull request. The patch does not even contain a TotalResourceMapDecorator class.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-04-03T16:52:02.353+0000","updated":"2017-04-03T16:52:02.353+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15953805","id":"15953805","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"body":"Retrying the same patch. Hopefully it gets selected this time.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=miklos.szegedi%40cloudera.com","name":"miklos.szegedi@cloudera.com","key":"miklos.szegedi@cloudera.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=miklos.szegedi%40cloudera.com&avatarId=32342"},"displayName":"Miklos Szegedi","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-04-03T16:54:02.306+0000","updated":"2017-04-03T16:54:02.306+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15954000","id":"15954000","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 20s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 2 new or modified test files. {color} |\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  1m 48s{color} | {color:blue} Maven dependency ordering for branch {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m  2s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green} 16m  2s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m 59s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 45s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 56s{color} | {color:green} trunk passed {color} |\n| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hadoop-project {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m 12s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 23s{color} | {color:green} trunk passed {color} |\n| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 16s{color} | {color:blue} Maven dependency ordering for patch {color} |\n| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red}  0m 20s{color} | {color:red} hadoop-yarn-common in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} compile {color} | {color:red}  2m 37s{color} | {color:red} root in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} javac {color} | {color:red}  2m 37s{color} | {color:red} root in the patch failed. {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  1m 52s{color} | {color:orange} root: The patch generated 13 new + 94 unchanged - 3 fixed = 107 total (was 97) {color} |\n| {color:red}-1{color} | {color:red} mvnsite {color} | {color:red}  0m 23s{color} | {color:red} hadoop-yarn-common in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 44s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  3s{color} | {color:green} The patch has no ill-formed XML file. {color} |\n| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hadoop-project {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  0m 22s{color} | {color:red} hadoop-yarn-common in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} javadoc {color} | {color:red}  0m 33s{color} | {color:red} hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common generated 4 new + 4575 unchanged - 0 fixed = 4579 total (was 4575) {color} |\n| {color:green}+1{color} | {color:green} unit {color} | {color:green}  0m 14s{color} | {color:green} hadoop-project in the patch passed. {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red}  0m 23s{color} | {color:red} hadoop-yarn-common in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} unit {color} | {color:green} 39m 18s{color} | {color:green} hadoop-yarn-server-resourcemanager in the patch passed. {color} |\n| {color:red}-1{color} | {color:red} asflicense {color} | {color:red}  0m 27s{color} | {color:red} The patch generated 1 ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black}115m 33s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5829 |\n| GITHUB PR | https://github.com/apache/hadoop/pull/201 |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  xml  findbugs  checkstyle  |\n| uname | Linux d5b13b8efe35 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / bbd6847 |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.0.0 |\n| mvninstall | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/patch-mvninstall-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| compile | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/patch-compile-root.txt |\n| javac | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/patch-compile-root.txt |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/diff-checkstyle-root.txt |\n| mvnsite | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/patch-mvnsite-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| findbugs | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/patch-findbugs-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| javadoc | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/diff-javadoc-javadoc-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-common.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15489/testReport/ |\n| asflicense | https://builds.apache.org/job/PreCommit-YARN-Build/15489/artifact/patchprocess/patch-asflicense-problems.txt |\n| modules | C: hadoop-project hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: . |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15489/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-04-03T18:54:03.909+0000","updated":"2017-04-03T18:54:03.909+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15954213","id":"15954213","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"body":"Github user szegedim closed the pull request at:\n\n    https://github.com/apache/hadoop/pull/201\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=githubbot","name":"githubbot","key":"githubbot","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"ASF GitHub Bot","active":true,"timeZone":"Etc/UTC"},"created":"2017-04-03T21:58:11.252+0000","updated":"2017-04-03T21:58:11.252+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13017808/comment/15955505","id":"15955505","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kasha","name":"kasha","key":"kasha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Karthik Kambatla","active":true,"timeZone":"America/Los_Angeles"},"body":"Looks like Miklos created YARN-6432 to have Jenkins run against the patch instead of the pull request. \n\nClosing this as a duplicate. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kasha","name":"kasha","key":"kasha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Karthik Kambatla","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-04-04T17:51:43.501+0000","updated":"2017-04-04T17:51:43.501+0000"}],"maxResults":121,"total":121,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/YARN-5829/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i35ttr:"}}