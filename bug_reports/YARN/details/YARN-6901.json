{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13090913","self":"https://issues.apache.org/jira/rest/api/2/issue/13090913","key":"YARN-6901","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12313722","id":"12313722","key":"YARN","name":"Hadoop YARN","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12313722&avatarId=15135","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12313722&avatarId=15135","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12313722&avatarId=15135","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12313722&avatarId=15135"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2017-07-29T01:40:16.985+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Fri Aug 25 20:59:50 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/YARN-6901/watchers","watchCount":7,"isWatching":false},"created":"2017-07-28T22:36:48.802+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"1.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12329059","id":"12329059","description":"2.8.0 release","name":"2.8.0","archived":false,"released":true,"releaseDate":"2017-03-22"}],"issuelinks":[{"id":"12510867","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12510867","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"13091547","key":"YARN-6917","self":"https://issues.apache.org/jira/rest/api/2/issue/13091547","fields":{"summary":"Queue path is recomputed from scratch on every allocation","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/4","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/minor.svg","name":"Minor","id":"4"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-08-25T20:59:50.086+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/10002","description":"A patch for this issue has been uploaded to JIRA by a contributor.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/document.png","name":"Patch Available","id":"10002","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/4","id":4,"key":"indeterminate","colorName":"yellow","name":"In Progress"}},"components":[],"timeoriginalestimate":null,"description":"Stacktrace:\n\n{code}\nThread 22068: (state = BLOCKED)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.AbstractCSQueue.getParent() @bci=0, line=185 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.LeafQueue.getQueuePath() @bci=8, line=262 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.allocator.AbstractContainerAllocator.getCSAssignmentFromAllocateResult(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.allocator.ContainerAllocation, org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer) @bci=183, line=80 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.allocator.RegularContainerAllocator.assignContainers(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerNode, org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.SchedulingMode, org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceLimits, org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer) @bci=204, line=747 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.allocator.ContainerAllocator.assignContainers(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerNode, org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.SchedulingMode, org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceLimits, org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer) @bci=16, line=49 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerApp.assignContainers(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerNode, org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceLimits, org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.SchedulingMode, org.apache.hadoop.yarn.server.resourcemanager.rmcontainer.RMContainer) @bci=61, line=468 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.LeafQueue.assignContainers(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerNode, org.apache.hadoop.yarn.server.resourcemanager.scheduler.ResourceLimits, org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.SchedulingMode) @bci=148, line=876 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler.allocateContainersToNode(org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerNode) @bci=157, line=1149 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler.handle(org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.SchedulerEvent) @bci=266, line=1277 (Compiled frame)\n\n================\n\n Thread 22124: (state = BLOCKED)\n - org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt.getReservedContainers() @bci=0, line=336 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.FifoCandidatesSelector.preemptFrom(org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerApp, org.apache.hadoop.yarn.api.records.Resource, java.util.Map, java.util.List, org.apache.hadoop.yarn.api.records.Resource, java.util.Map, org.apache.hadoop.yarn.api.records.Resource) @bci=61, line=277 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.FifoCandidatesSelector.selectCandidates(java.util.Map, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource) @bci=374, line=138 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.ProportionalCapacityPreemptionPolicy.containerBasedPreemptOrKill(org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CSQueue, org.apache.hadoop.yarn.api.records.Resource) @bci=264, line=342 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.ProportionalCapacityPreemptionPolicy.editSchedule() @bci=34, line=202 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.monitor.SchedulingMonitor.invokePolicy() @bci=4, line=81 (Compiled frame)\n - org.apache.hadoop.yarn.server.resourcemanager.monitor.SchedulingMonitor$PreemptionChecker.run() @bci=23, line=92 (Interpreted frame)\n - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)\n{code} ","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12341064","id":"12341064","name":"2.8.3","archived":false,"released":true,"releaseDate":"2017-12-12"}],"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12879447","id":"12879447","filename":"YARN-6901.branch-2.8.001.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-07-28T22:37:19.122+0000","size":2944,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12879447/YARN-6901.branch-2.8.001.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"A CapacityScheduler app->LeafQueue deadlock found in branch-2.8 ","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16105809","id":"16105809","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Attached ver.001 patch for branch-2.8.\n\n[~sunilg], could you help to take a look? [~jlowe]/[~eepayne], I'm not sure if this is found in your 2.8 environment, this looks like a easy-to-hit issue.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-07-28T22:39:32.049+0000","updated":"2017-07-28T22:39:32.049+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16105970","id":"16105970","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 20s{color} | {color:blue} Docker mode activated. {color} |\n|| || || || {color:brown} Prechecks {color} ||\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |\n|| || || || {color:brown} branch-2.8 Compile Tests {color} ||\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  6m 48s{color} | {color:green} branch-2.8 passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 31s{color} | {color:green} branch-2.8 passed with JDK v1.8.0_131 {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 31s{color} | {color:green} branch-2.8 passed with JDK v1.7.0_131 {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 19s{color} | {color:green} branch-2.8 passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 36s{color} | {color:green} branch-2.8 passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 10s{color} | {color:green} branch-2.8 passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 24s{color} | {color:green} branch-2.8 passed with JDK v1.8.0_131 {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 23s{color} | {color:green} branch-2.8 passed with JDK v1.7.0_131 {color} |\n|| || || || {color:brown} Patch Compile Tests {color} ||\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 27s{color} | {color:green} the patch passed with JDK v1.8.0_131 {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 27s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} the patch passed with JDK v1.7.0_131 {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 18s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 1 new + 88 unchanged - 1 fixed = 89 total (was 89) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 35s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  1m 24s{color} | {color:red} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 21s{color} | {color:green} the patch passed with JDK v1.8.0_131 {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 23s{color} | {color:green} the patch passed with JDK v1.7.0_131 {color} |\n|| || || || {color:brown} Other Tests {color} ||\n| {color:red}-1{color} | {color:red} unit {color} | {color:red} 78m 12s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed with JDK v1.7.0_131. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 17s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black}171m 38s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| FindBugs | module:hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n|  |  org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.AbstractCSQueue.getParent() is unsynchronized, org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.AbstractCSQueue.setParent(CSQueue) is synchronized  At AbstractCSQueue.java:synchronized  At AbstractCSQueue.java:[line 186] |\n| JDK v1.8.0_131 Failed junit tests | hadoop.yarn.server.resourcemanager.TestAMAuthorization |\n|   | hadoop.yarn.server.resourcemanager.TestClientRMTokens |\n| JDK v1.7.0_131 Failed junit tests | hadoop.yarn.server.resourcemanager.TestAMAuthorization |\n|   | hadoop.yarn.server.resourcemanager.TestRMRestart |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacitySchedulerSurgicalPreemption |\n|   | hadoop.yarn.server.resourcemanager.TestClientRMTokens |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:d946387 |\n| JIRA Issue | YARN-6901 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12879447/YARN-6901.branch-2.8.001.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux 993f8195d1f9 3.13.0-119-generic #166-Ubuntu SMP Wed May 3 12:18:55 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | branch-2.8 / a168287 |\n| Default Java | 1.7.0_131 |\n| Multi-JDK versions |  /usr/lib/jvm/java-8-oracle:1.8.0_131 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_131 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/16603/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| findbugs | https://builds.apache.org/job/PreCommit-YARN-Build/16603/artifact/patchprocess/new-findbugs-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.html |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/16603/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager-jdk1.7.0_131.txt |\n| JDK v1.7.0_131  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/16603/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/16603/console |\n| Powered by | Apache Yetus 0.6.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-29T01:40:16.985+0000","updated":"2017-07-29T01:40:16.985+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16107386","id":"16107386","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Thanks for the report and patch!  We have not seen this in practice on our 2.8 builds yet, and I have yet to verify it is susceptible to this deadlock given we have pulled back a few features from 2.9 that may have indirectly solved this.\n\nHowever after a quick look at the proposed fix I'm wondering if [this comment|https://issues.apache.org/jira/browse/YARN-3137?focusedCommentId=14306040&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14306040] in YARN-3137 applies here.  I proposed to get rid of a lock in a similar manner but there was concern that the queue hierarchy could change during refreshQueues and end up having children that don't point back to their parents, etc.  As I commented in that other JIRA I'm not fully convinced it's a real issue, but I never got a complete answer to my questions there.  Seems like those same concerns people had could happen here with the proposed patch.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-07-31T14:55:04.366+0000","updated":"2017-07-31T14:55:04.366+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16107433","id":"16107433","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"[~leftnoteasy], thanks for the heads-up on this issue.\nbq. I have yet to verify it is susceptible to this deadlock\nI have compared and analyzed the code bases and I believe that we are still susceptible to this.\n\nFrom the stack traces provided in the *Description* section, it looks like the deadlock would be between the assigncontainers thread and the preemption thread. We would definitely have noticed this if it were occurring, so, as [~jlowe] pointed out, I'm pretty sure that we have not seen this in practice (yet).\n\nSince the deadlock involves the preemption thread, I do have a concern about the above unit test failure for {{TestCapacitySchedulerSurgicalPreemption}}. Can you comment?\n{noformat}\njava.lang.AssertionError: null\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.fail(Assert.java:95)\n\tat org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacitySchedulerPreemptionTestBase.waitNumberOfLiveContainersFromApp(CapacitySchedulerPreemptionTestBase.java:110)\n\tat org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacitySchedulerSurgicalPreemption.testSimpleSurgicalPreemption(TestCapacitySchedulerSurgicalPreemption.java:143)\n{noformat}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-31T15:30:14.403+0000","updated":"2017-07-31T15:30:14.403+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16107522","id":"16107522","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"I suspect the test failure is a recurring one: YARN-5973","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-31T16:17:29.384+0000","updated":"2017-07-31T16:17:29.384+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16107524","id":"16107524","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~eepayne]/[~jlowe], \n\nI think the parent queue lock is to prevent move a sub queue to different hierarchy. However I think it is not allowed today:\n\nCapacitySchedulerQueueManager.java:\n{code}\nif (!oldQueue.getQueuePath().equals(newQueue.getQueuePath())) {\n          //Queue's cannot be moved from one hierarchy to other\n          throw new IOException(queueName + \" is moved from:\"\n              + oldQueue.getQueuePath() + \" to:\" + newQueue.getQueuePath()\n              + \" after refresh, which is not allowed.\");\n{code}\n\nWe should have this logic in branch-2.8 as well, since moving queue hierarchy causes many other issues. So add volatile to parent ref should be a simple fix we can do for now.\n\nI haven't checked the preemption test failure yet, I can check it offline. The biggest issue I can see is, we should never do a reverse lock (e.g. lock app first, and before release app lock, lock leaf queue again). Currently preemption thread lock hierarchy in normal order (lock leaf queue then lock app), so we need to fix main scheduler logic accordingly.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-07-31T16:18:44.393+0000","updated":"2017-07-31T16:18:44.393+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16108126","id":"16108126","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"As I understand the stacktraces, we have the preemption monitor thread who has locked a leaf queue and is in the process of trying to lock the application within the queue.  Then we have the scheduling thread which is calling LeafQueue's assignContainers and ultimately locks an application then tries to lock the leaf queue for that application.  Is that correct?  If so I'm wondering how we're deadlocking since the thread calling LeafQueue#assignContainers should already have the lock on the leaf queue.  Maybe I missed a spot since I couldn't line up the line numbers in the stack trace with branch-2.8 source, but everywhere I saw LeafQueue's assignContainers calling the application's assignContainers method it was within the context of a {{synchronized(this)}} block.\n\nNow I'm wondering how we did _not_ have the lock when trying to get the leaf queue path.  Are we somehow trying to examine an allocation for some other queue, or does the queue think this application is part of this queue but the app thinks it is part of some other queue?  I'm probably missing something basic, but I'm not sure why we don't already have the leaf queue locked when FiCaSchedulerApp#assignContainers is called.\n\nOn a related note, I found it odd that LeafQueue#assignContainers explicitly locks the app before callling assignContainers on it when it is trying to assign a reserved container but I didn't see a similar lock on the application before calling assignContainers for the non-reserved case.  Seems like we're either missing a lock we need or grabbing a lock unnecessarily.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-07-31T23:00:57.599+0000","updated":"2017-07-31T23:00:57.599+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16108146","id":"16108146","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~jlowe],\n\nbq. Now I'm wondering how we did not have the lock when trying to get the leaf queue path...\nThis may not be possible, ideally moving an app from one queue to another need to lock queue, and assign container need to lock queue as well. It should be safe.\n\nbq. On a related note, I found it odd that LeafQueue#assignContainers explicitly locks the app before callling assignContainers.\nI just checked the code, assignContainers in app grabs synchronized lock, so I think we can remove the synchronize(app) from LeafQueue safely.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-07-31T23:20:51.152+0000","updated":"2017-07-31T23:20:51.152+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16108904","id":"16108904","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"bq. This may not be possible, ideally moving an app from one queue to another need to lock queue, and assign container need to lock queue as well. It should be safe.\n\nI'm not sure I understand.  Could you elaborate on how the deadlock is happening?  Looking at the branch-2.8 code, I don't see how LeafQueue is calling assignContainers on the app without holding a lock on the queue.  Therefore I'm confused why the app's assignContainers is blocking on a queue lock it should already have.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-08-01T13:39:34.267+0000","updated":"2017-08-01T13:39:34.267+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16109445","id":"16109445","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"[~jlowe],\n\nYou're right, I checked the code of the problematic cluster, it is a little bit different from branch-2.8. When it allocates reserve container, leafqueue's synchronized lock isn't acquired properly. So I think the deadlock should not be existed in branch-2.8. \n\nHowever, I think the fix attached in the JIRA should be get into branch-2.8 in any case, since it fixes bad pattern which acquires lock of upper-level component while holding lock of lower-level component, this could likely cause deadlock in the future.\n\nDowngrade priority to critical since this is more like a preventing fix.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-08-01T18:14:29.639+0000","updated":"2017-08-01T18:14:29.639+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16109637","id":"16109637","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"bq. I checked the code of the problematic cluster, it is a little bit different from branch-2.8.\n\nOK, that explains why I couldn't line up the stacktrace with branch-2.8 code or recent ancestors to it and also why we've never seen this in practice.\n\nI agree it would be nice if getQueuePath were lockless, although long-term I think something like YARN-6917 would be preferable to a volatile approach.  I'm OK with volatile in the short-term.\n\nWhy does the patch change the synchronization around the ordering policy?  That does not seem to have anything to do with reaching up the hierarchy.  It also looks like it introduces a bug if two threads try to call setOrderingPolicy at the same time, e.g.:\n# Thread 1 notices the old ordering policy, policy A, is not null and begins to copy the old contents into its new policy, policy B\n# Thread 2 notices the old ordering policy, policy A, is not null and begins to copy the old contents into its new policy, policy C\n# Thread 1 sets the policy to policy B\n# Thread 2 sets the policy to policy C\n\nNow we are left with a policy that contains the entities from policy A and C and have lost the original entities from B, whereas the old code would result in a policy containing the entities of policy A, B, and C regardless of which thread won the race for the lock.  I think we can get rid of the lock on the getter, but I think it is necessary on the setter or we need to do CAS-like logic and loop back around if someone has swapped out the policy while we were copying the old one.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-08-01T19:56:23.859+0000","updated":"2017-08-01T19:56:23.859+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16109972","id":"16109972","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"bq. I agree it would be nice if getQueuePath were lockless, although long-term I think something like YARN-6917 would be preferable to a volatile approach. I'm OK with volatile in the short-term.\nIf there's no existing issue we can find, I agree to delay the fix to YARN-6917. \n\nbq. That does not seem to have anything to do with reaching up the hierarchy.\nInside AbstractContainerAllocator:\n{code}\n        application\n            .getCSLeafQueue()\n            .getOrderingPolicy()\n{code}\nTo me grabbing lock of leaf queue while holding lock of app is also not a good practice. \n\nbq. It also looks like it introduces a bug if two threads try to call setOrderingPolicy at the same time \nActually orderingPolicy can be set only when queue do reinitialize (which protected by queue's synchronize lock). Do you think does it still have the issue in the case?  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-08-01T23:08:43.176+0000","updated":"2017-08-01T23:08:43.176+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16111020","id":"16111020","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"bq. If there's no existing issue we can find, I agree to delay the fix to YARN-6917.\n\nIf we're going to change the ordering policy locking then we should also change the getQueuePath locking here.  YARN-6917 may not get any traction in the short-term unless someone picks it up (unfortunately I probably won't get to it soon), and getQueuePath locking behavior is the cause of the deadlock on that 2.8-ish cluster.  I was simply pointing it out to raise awareness since that approach solves the same locking issue and also reduces the load of every allocate.  Totally agree we can defer to YARN-6917 if that is going in soon, but I also agree with your earlier assessment that we should address this sooner than later in case someone tries to call these app methods without holding the queue lock.\n\nbq. Actually orderingPolicy can be set only when queue do reinitialize (which protected by queue's synchronize lock). Do you think does it still have the issue in the case? \n\nYes because the way this is called may change in the future,  just like the non-issue we are fixing here.  ;-)  If setting the ordering policy is not a common occurrence then adding a lock there shouldn't be an issue, and it will always do something sane.  The important part is to keep it lock free on the getter.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-08-02T14:37:35.135+0000","updated":"2017-08-02T14:37:35.135+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16111863","id":"16111863","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"[~jlowe], make sense to me.\n\nSo just repeat my understanding:for this JIRA, we can do following two things:\n1) Remove getParent synchronized lock and add volatile to parent ref.\n2) Remove getOrderingPolicy synchronized lock and add volatile to orderingPolicy ref. \nIn addition, keep synchronized lock for setOrderingPolicy. \n\nPlease let me know if it is also your expectation.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-08-02T22:40:29.601+0000","updated":"2017-08-02T22:40:29.601+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16112850","id":"16112850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Yep, that sounds good to me.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-08-03T14:47:45.315+0000","updated":"2017-08-03T14:47:45.315+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16142169","id":"16142169","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Doing an audit of 2.8.2 Blockers and Criticals.  Do we still feel that we need this for 2.8.2 or should we move it out?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2017-08-25T20:50:25.216+0000","updated":"2017-08-25T20:50:25.216+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13090913/comment/16142188","id":"16142188","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"[~jlowe], Since this is a preventive fix, I just downgraded priority and moved it out.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-08-25T20:59:50.086+0000","updated":"2017-08-25T20:59:50.086+0000"}],"maxResults":17,"total":17,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/YARN-6901/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i3i5nr:"}}