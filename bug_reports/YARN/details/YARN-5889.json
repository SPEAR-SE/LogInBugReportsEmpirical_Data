{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"13021186","self":"https://issues.apache.org/jira/rest/api/2/issue/13021186","key":"YARN-5889","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12313722","id":"12313722","key":"YARN","name":"Hadoop YARN","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12313722&avatarId=15135","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12313722&avatarId=15135","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12313722&avatarId=15135","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12313722&avatarId=15135"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12334216","id":"12334216","description":"2.9.0 release","name":"2.9.0","archived":false,"released":true,"releaseDate":"2017-11-17"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12339182","id":"12339182","name":"3.0.0-alpha4","archived":false,"released":true,"releaseDate":"2017-07-07"}],"aggregatetimespent":null,"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12310220":"2016-11-16T19:41:17.009+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Wed Jul 12 15:26:36 UTC 2017","customfield_12310420":"9223372036854775807","customfield_12312320":null,"customfield_12310222":"1_*:*_1_*:*_4301887543_*|*_3_*:*_1_*:*_690995065_*|*_4_*:*_1_*:*_19501_*|*_5_*:*_2_*:*_6147200334_*|*_10002_*:*_1_*:*_2356122993","customfield_12312321":null,"resolutiondate":"2017-04-21T22:01:20.690+0000","workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/YARN-5889/watchers","watchCount":7,"isWatching":false},"created":"2016-11-16T17:04:15.295+0000","customfield_12310192":null,"customfield_12310191":[{"self":"https://issues.apache.org/jira/rest/api/2/customFieldOption/10343","value":"Reviewed","id":"10343"}],"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"14.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[],"issuelinks":[{"id":"12486949","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12486949","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"13021256","key":"YARN-5892","self":"https://issues.apache.org/jira/rest/api/2/issue/13021256","fields":{"summary":"Support user-specific minimum user limit percentage in Capacity Scheduler","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2017-07-12T15:26:36.616+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12327621","id":"12327621","name":"capacity scheduler"}],"timeoriginalestimate":null,"description":"Currently user-limit is computed during every heartbeat allocation cycle with a write lock. To improve performance, this tickets is focussing on moving user-limit calculation out of heartbeat allocation flow.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12845781","id":"12845781","filename":"YARN-5889.0001.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-05T12:00:36.995+0000","size":25140,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12845781/YARN-5889.0001.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12846191","id":"12846191","filename":"YARN-5889.0001.suggested.patchnotes","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-07T17:23:15.511+0000","size":5998,"mimeType":"application/octet-stream","content":"https://issues.apache.org/jira/secure/attachment/12846191/YARN-5889.0001.suggested.patchnotes"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12846570","id":"12846570","filename":"YARN-5889.0002.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-10T11:30:28.922+0000","size":58168,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12846570/YARN-5889.0002.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12847315","id":"12847315","filename":"YARN-5889.0003.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-13T11:58:46.591+0000","size":64358,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12847315/YARN-5889.0003.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12847642","id":"12847642","filename":"YARN-5889.0004.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-16T15:30:11.599+0000","size":78786,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12847642/YARN-5889.0004.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12847786","id":"12847786","filename":"YARN-5889.0005.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-17T11:53:52.168+0000","size":83239,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12847786/YARN-5889.0005.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12849666","id":"12849666","filename":"YARN-5889.0006.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-27T10:44:22.509+0000","size":135122,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12849666/YARN-5889.0006.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12849957","id":"12849957","filename":"YARN-5889.0007.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-30T13:14:12.738+0000","size":141189,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12849957/YARN-5889.0007.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12850466","id":"12850466","filename":"YARN-5889.0008.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-01T19:31:45.863+0000","size":141344,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12850466/YARN-5889.0008.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12850622","id":"12850622","filename":"YARN-5889.0009.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-02T11:13:42.435+0000","size":140333,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12850622/YARN-5889.0009.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12850780","id":"12850780","filename":"YARN-5889.0010.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-03T06:58:12.799+0000","size":140223,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12850780/YARN-5889.0010.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12839203","id":"12839203","filename":"YARN-5889.v0.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-11-16T17:34:42.605+0000","size":24021,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12839203/YARN-5889.v0.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12840003","id":"12840003","filename":"YARN-5889.v1.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-11-22T10:50:58.154+0000","size":24903,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12840003/YARN-5889.v1.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12840566","id":"12840566","filename":"YARN-5889.v2.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-11-26T16:18:58.586+0000","size":24461,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12840566/YARN-5889.v2.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"summary":"Improve and refactor user-limit calculation in capacity scheduler","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15671000","id":"15671000","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Attaching v0 patch for review. cc/[~leftnoteasy]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-11-16T17:07:46.963+0000","updated":"2016-11-16T17:07:46.963+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15671084","id":"15671084","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Sorry, earlier patch was having an error. Re-attaching correct patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-11-16T17:35:13.922+0000","updated":"2016-11-16T17:35:13.922+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15671396","id":"15671396","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~sunilg],\n\nHaven't look at all the details, a little bit background for why this is required: This is majorly for intra-queue user-limit preemption, today's user-limit is designed for allocation instead of preemption. Because it only calculate a same limit for all the users in the queue, which is not correct. So we need to calculate per-queue limit (because some users may not need more resource, and some users may need more), this value will be used to do allocation and preemption. The goal is to make the behavior same to today's user limit as much as possible. But it is still possible that some minor behavior change could happen, this is why we want an option to enable it. \n\n+ [~eepayne].","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-11-16T19:41:17.009+0000","updated":"2016-11-16T19:41:17.009+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15674342","id":"15674342","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"Thanks [~sunilg] and [~leftnoteasy] for the heads up. I will look at this in the next few days.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-17T17:46:44.385+0000","updated":"2016-11-17T17:46:44.385+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15686372","id":"15686372","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Updating v1 patch addressing few init issues. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-11-22T10:50:58.158+0000","updated":"2016-11-22T10:50:58.158+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15687948","id":"15687948","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"Thanks [~sunilg] for working on this refactoring. Here are my comments for {{YARN-5889.v1.patch}}\n\n\n- CapacitySchedulerConfiguration.java: \n-- {{getUserLimitAynschronously}} should be {{getUserLimitAsynchronously}}\n\n- {{CapacitySchedule#serviceStart}}: Shouldn't this check before dereferencing {{computeUserLimitAsyncThread}}:\n{code}\n   public void serviceStart() throws Exception {\n     startSchedulerThreads();\n    computeUserLimitAsyncThread.start();\n     super.serviceStart();\n   }\n{code}\n\n- {{CapacitySchedule#ComputeUserLimitAsyncThread#run}}:\n{code}\nThread.sleep(1);\n{code}\nIt seems like this should be longer than 1 ms. Isn't the default scheduling interval 5 seconds? That may be too long, but I think it should be at least a second.\n\n- {{CapacitySchedule#ComputeUserLimitAsyncThread#run}}:\nThis is just a very small nit, but it seems to me like {{getAllLeafQueues()}} should return a list of {{LeafQueue}}'s instead of a list of {{CSQueue}}'s.\n{code}\nList<CSQueue> leafQueues = cs.getAllLeafQueues();\n{code}\n\n- LeafQueue.java:\nAnother tiny nit, but since {{computeUserLimit}} and {{getComputedUserLimit}} have the same arguments, can the arguments to {{getComputedUserLimit}} be in the same order as those for {{computeUserLimit}}?\n\n- {{LeafQueue#getComputedUserLimit}}\nI don't think we want to always return {{Resources.unbounded()}} when {{userLimitPerSchedulingMode}} is null. If computing user limit the legacy way, the return value of the {{computeUserLimit}} method should be returned.\n\n- ActiveUsersManager.java: Is the import of FiCaSchedulerApp needed?\n{code}\nimport org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica.FiCaSchedulerApp;\n{code}\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-22T21:27:44.014+0000","updated":"2016-11-22T21:27:44.014+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15698155","id":"15698155","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~eepayne]. Addressed most of the comments.\n\nbq.It seems like this should be longer than 1 ms. Isn't the default scheduling interval 5 seconds? That may be too long, but I think it should be at least a second.\nI could slightly explain here. I think 1msec is also smaller. It could be possible that containers are released and created very fast in a big cluster. Each such change in resource will have an impact on user-limit calculation. Earlier it was not affecting this problem since we were calculating user-limit in every allocation cycle. So we could try with this small timeout, and can do some SLS tests to see the trend. I will post some results very soon.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-11-26T16:18:58.596+0000","updated":"2016-11-26T16:18:58.596+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15709832","id":"15709832","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"{quote}\nbq. It seems like this should be longer than 1 ms.\nIt could be possible that containers are released and created very fast in a big cluster.\n{quote}\n\n[~sunilg], I now realize that with this design, the {{preComputedUserLimit}} cache will become out of date very quickly if the {{ComputeUserLimitAsyncThread}} thread is not run in a very tight loop. Even with that, {{preComputedUserLimit}} could still be out of date at the moment the scheduler needs to fill a large request.\n\nOn the other hand, with this design the user limit resource is being calculated a lot more often than it is currently. Currently, it is only being calculated during the scheduler loop, and only then for apps that are asking for resources. However, this design calculates it twice every millisecond (once with partition exclusivity and once without). If a cluster is not full and has mostly apps with long-running containers, then this is being calculated thousands of times when it doesn't need to be.\n\nInstead could we add a boolean flag to {{UserToPartitionRecord}}? This flag would be set when a container is allocated or releaseed for an app from that user. Then, whenever {{getComputedUserLimit}} is called, if the flag is set, it calls {{computeUserLimit}} and clears the flag. What do you think?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2016-11-30T21:28:39.264+0000","updated":"2016-11-30T21:28:39.264+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15711647","id":"15711647","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~eepayne]\n\nYes. for scheduler, 1ms is also smaller. It was a tradeoff to see the performance gain and its impact. With SLS test, i could be see good improvement   in allocation speed.\n\nNow to bridge the gap, there are 2 cases\n- How to make sure that every allocation gets correct and accurate user-limit value given computation happens at 1ms?\n- In a lousy cluster, how can we save CPU cycles to prevent too much of unnecessary computations?\n\nYes, an ideal way is as suggested by you.\n- Any change in resource (allocation and release of container  etc) for a given user could set a state variable. This will set off by the computation thread if next cycle falls immediate.\n- Its not ideal to ask allocation thread to hold till computation. So by seeing this state variable, we might need to compute user-limit in same allocation thread. \n\nI was looking in second step to see how much impact it can cause if user-limit is slightly older. We may over allocate or we may under allocate. I think under-allocate scenario is fine as we will allocate more from next milli second. However overallocate scenario may be a worry. Still we have preemptions/opportunistic ways to handle this.\n\nIdeally we were looking to avoid user-limit computation from same allocation thread. So after step 1), we can force the user-allocate thread to push for an immediate computation. Still there could some exceptionally rare case where user-limit thread is doing computation as per release/allocate demand. But another allocation thread (heartbeat) may also go in same time frame. If this is fine, I could update my patch to handle this case.\n\nThoughts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-12-01T10:56:04.164+0000","updated":"2016-12-01T10:56:04.164+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15712097","id":"15712097","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"bq. Any change in resource (allocation and release of container etc) for a given user could set a state variable. This will set off by the computation thread if next cycle falls immediate.\nJust so we're on the same page and what I'm suggesting is more clear.\n\nI'm suggesting that we remove the computation thread ({{ComputeUserLimitAsyncThread}}), and when {{LeafQueue#assignContainers}} or {{LeafQueue#releaseResource}} is called, we can set the flag in {{UserToPartitionRecord}}. This flag should also be set when queues are refreshed. {{getComputedUserLimit}} would then be called as it is in your patch, and compute user limit resource if the flag is set.\n\nbq. Its not ideal to ask allocation thread to hold till computation. So by seeing this state variable, we might need to compute user-limit in same allocation thread.\nI recognize that my suggested approach does the calculation during the allocation thread. My assertion would be that\n# this calculation is being done currently in the allocation thread\n# my suggested approach is an optimization that would decrease (sometimes greatly) the number of times the calculation happens\n# my suggested approach would be more accurate than with a separate computation thread.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-01T14:28:09.983+0000","updated":"2016-12-01T14:29:20.400+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15714764","id":"15714764","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Yes [~eepayne], I understood your view here.\n\nHowever in ideal cases, we might need to compute user limit in allocation thread if there are more allocations happened in prior heartbeat or some release container happened between two heartbeats. This means that we will be doing same as what we do earlier too with some minor improvements in a busy cluster (I agree that normal clusters, we can see some improvement). Ideally when we tested with SLS, user-compute-limit was done under writelock and was consuming good amount of time.\n\nIf we are taking user-limit computation out of allocation thread, we have some good advantages:\n- Unblocking allocation from computing user-limit\n- Giving a read-only user-limit for other modules such as preemption (user-limit/priority etc)\n- Such a user thread running from a user manager will be easier to maintain.\n- Still this is configuration driven, hence user can know the minor limitations and choose to get more performance.\n\nAs I see now, there is only one case by which scheduler may get an older limit. \n- Container release/allocation happened\n- CS placed a push-to-recompute-user-limit flag to ComputeUserLimitAsyncThread or Manager.\n- ComputeUserLimitAsyncThread is computing the limit and is in that process. Yet to publish\n- At same time, another allocation thread used old data to do one allocation.\n\nI will now do some SLS tests with and without allocation thread and the suggested improvements. So we can also see the performance improvements over both.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-12-02T10:44:26.982+0000","updated":"2016-12-02T10:44:26.982+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15715215","id":"15715215","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"bq. This means that we will be doing same as what we do earlier too with some minor improvements in a busy cluster\n\nIt shouldn't take a busy cluster to see the improvement.  If a user is running many applications that are all asking for resources but the user has hit the user limit, today it will redundantly recompute the user limit for each application on each heartbeat.  The lazy-compute-when-dirty approach will not compute it at all unless a container has been allocated or released for that user in that queue.  I would argue that's much more than a minor improvement, and users hitting their limits is a common case on our clusters even when they're not completely full.\n\nThe asynchronous approach is very concerning to me.  We are essentially trading correctness for performance, and that seems to me like a reckless pursuit when there are still ways to improve performance without adding new race conditions and constraint violations.  Obviously moving the calculation outside of the allocate thread will show significant improvements in benchmarks, but those results don't show the cost of the scheduler violating its constraints.  IMHO that's a misleading result.\n\nI also question the logic of relying on preemption and opportunistic containers to \"solve\" the constraint violation problems.  Both of those features aren't free.  Preemption loses work, and opportunistic containers aren't guaranteed to be allocated in a timely manner (or could in turn be preempted).  In theory this should eventually converge to a more correct constraint value, but I would argue at a cost of allocation latency and lost work.\n\nThis feature is blocking user-limit-based in-queue preemptions which we are very eager to see.  I propose we go with a simple approach that is easy to implement and simple to prove correctness.  Adding something that can violate the schedulers constraints doesn't seem necessary to unblock the in-queue preemption work.  Let's get that work unblocked and we can continue to discuss asynchronous constraint violation approaches in parallel.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2016-12-02T14:07:51.623+0000","updated":"2016-12-02T14:07:51.623+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15715566","id":"15715566","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~jlowe] for pitching in.\n\nYes, I understood the concern here. So I will improve this in line with the discussion with [~eepayne] done earlier and will explore more on asynchronous line once the preemption is done related to this.\n\nAs asynchronous way has more gaps as of now, i think i will spin off that discussion in another ticket and i will update a patch here so that  preemption work will go faster.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-12-02T16:31:29.675+0000","updated":"2016-12-02T16:31:29.675+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15730055","id":"15730055","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~sunilg] for working on the patch and suggestions from [~jlowe], [~eepayne]. \n\nPersonally I think the title and desc are a little confusing.\n\nFirst of all, I think the most important target of this JIRA is not improving performance. It is to make user-limit preemption correct. Currently we compute an unique user-limit value for each leaf queue, this is enough for allocation but not enough for preemption. Here is an example.\n\nA queue has cap=max-cap=100, min-user-limit-percent=50, user-limit-factor=1, at time T, there're 2 users using resources:\n{code}\nu1.used = 75, u2.used = 25\n{code}\nOnly u2 is active user,\n\nAccording to existing user limit computation:\n{code}\nuser_limit =\n  round_up(\n    min(\n        max(current_capacity / #active_user,\n             current_capacity * user_limit_percent),\n        queue_capacity * user_limit_factor)),\n    minimum_allocation)\n{code} \nComputed user-limit=100, more than any user's usage, so there's nothing will be preempted.\n\nWe can give many other examples like:\n{code}\nminimum-user-limit-percent = 33\n3 users:\nu1.used = 50, u2.used = 20, u3.used = 30\nu2/u3 are active users \n{code}\nThe computed user-limit = 50, which makes preemption cannot kick in.\n\nThis problem could happen when #active-user < #total-user. The problem is, at the allocation stage, we only need check active users. But in preemption, we need to preempt resource from non-active users.\n\nTo solve the problem, we need to compute user limit considering non-active users. If a non-active user uses less than minimum-user-limit, we can continue distribute its available quotas to other active users; in the other hand, if a non-active user uses more than minimum-user-limit, we could also get resource from the user. This computation is more expensive, it should be O(N), N is number of applications in the queue.\n\nThat is why we need an async thread to do all these stuffs: we cannot put a computation which is O(N) to allocation thread. To me, the common things between computation of (actual) user-limit and fair share (FS) are: \n- They're all too expensive to do when checking every application.\n- They're all instant limit, no user should understand the computed instant limit. The instant limit and usage could keep changing, but it will converge to a balance over a period of time.\n\nI haven't checked patch implantation yet. Please let us know your thoughts about the overall points. I don't want to make this change to block user-limit preemption effort too, so it will be more helpful if you could share ideas about how we can achieve user-limit preemption without the async thread approach.\n\nThanks,","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-07T21:59:57.638+0000","updated":"2016-12-07T21:59:57.638+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15732320","id":"15732320","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"Thanks [~leftnoteasy]. I am still absorbing your previous comment, but I have couple of thoughts.\n\nbq. That is why we need an async thread to do all these stuffs: we cannot put a computation which is O(N) to allocation thread.\nIf all apps are asking for resources, then the current algorithm already does this calculation in the allocation thread.\n\nbq. This computation is more expensive, it should be O(N), N is number of applications in the queue.\nI believe that N is the number of users, not applications. So, theoretically, the calculations could be based on each user's {{used}} value. Is that accurate?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-08T14:15:43.547+0000","updated":"2016-12-08T14:15:43.547+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15732988","id":"15732988","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"bq. If all apps are asking for resources, then the current algorithm already does this calculation in the allocation thread.\nIt may not be true if users uses / asks different resources, and order of application matters as well.\n\nbq. I believe that N is the number of users, not applications. So, theoretically, the calculations could be based on each user's used value. Is that accurate?\nMaybe not, as I mentioned above, order of application matters. Per my understanding, we have to iterate all apps according to FIFO order and calculate UL.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-08T18:26:32.722+0000","updated":"2016-12-08T18:26:32.722+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15745552","id":"15745552","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"bq. To solve the problem, we need to compute user limit considering non-active users. If a non-active user uses less than minimum-user-limit, we can continue distribute its available quotas to other active users; in the other hand, if a non-active user uses more than minimum-user-limit, we could also get resource from the user.\n\nAs I understand it, for allocation purposes we need to compute the user limit where the number of users is the number of users who have at least one application that is requesting resources.  For preemption purposes, we need to compute the user limit where the number of users is the total number of users who have at least one app in the queue (whether they have apps that are requesting or not).\n\nbq. This computation is more expensive, it should be O(N), N is number of applications in the queue.\n\nI don't see how this is related to the number of applications.  If you look at how the user limit is calculated, there are no terms in that calculation that have anything to do with how many apps the user has.  Am I missing something?  If so, maybe an example where number of applications or order of applications would help clarify.\n\nI still think a simple flag to indicate a user limit needs to be recomputed would go a long way here.  We are already tracking total resources associated with each user in each queue in the User structure and caching the user limit there as well.  We could add a flag to indicate the cached user limit needs to be recalculated, and when we go to get the cached value it can on-the-fly recalculate it if it is dirty.  The calculation would only become dirty if one of the following events occur:\n- An allocation is assigned to one of the user's apps\n- A container associated with one of the user's apps completes\n- A user becomes active in the queue (i.e.: now has apps requesting resources)\n- A user becomes inactive in the queue (i.e.: no longer has apps requesting resources)\n- The queue capacity changes (e.g.: nodes added/removed)\n- The queue settings are refreshed\n\nWe can speed up the last four by having a queue-level sequence number that is incremented when active users or queue changes.  The User structure can cache the sequence number used when the user limit is recalculated and compare with the queue sequence number to know a user's limit needs recalculating.  This can also become the user-level flag when containers are allocated/completed by setting the cached sequence number in the User structure to the queue's sequence number minus one, which will force the sequence numbers to mismatch and cause a recalculation when the user limit is requested.\n\nThe idea here is that we will only calculate the user limit lazily and only when absolutely necessary.  This will be much faster than what we do today and not require asynchronous computation that breaks the constraints of the scheduler.  For purposes of doing preemptions, we can have the same concept used for a separate cached user limit, one that considers all users instead of only active ones.\n\nWhen it comes time to calculate preemptions (which are only necessary when the queue cannot get more resources), we can sort the users by how far they are beyond their all-users user limit (either in absolute terms or by percentage).  This may or may not require a computation depending upon whether the cached value is out of date.  Then we can walk down the list starting with the user most past their limit.  We can stop traversing when we either preempt enough resources or we get to a user that is below their limit.\n\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2016-12-13T16:27:08.118+0000","updated":"2016-12-13T16:27:08.118+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15747056","id":"15747056","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~jlowe] for such detailed suggestions, after look at existing logic and your solution, I finally understand why we have different proposals:\n\nThe first thing we need to decide is, what the semantic of minimum-user-limit-percent (MULP) should be.\nFrom the doc: https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/CapacityScheduler.html,\nThe MULP is not a \"minimum guarantee\" at all, it is actually upper limit of users (which of course will be capped by user-limit-factor and queue-maximum-capacity):\nbq. \"... If a third user submits an application, no single user can use more than 33% of the queue resources ...\"\n\nThis semantic is clear enough when #users <= (100 / MULP), but it is unclear when when #users > (100 / MULP). For example:\n\n{code}\nLet's say we have 5 apps belong to 5 users:\n\nApp: a1, a2, a3, a4, a5 \nUsr: u1, u2, u3, u4, u5\n\nMULP set to 25.\nAt the time=T, resource usage: a1=25,a2=20,a3=30,a4=20,a5=5 \n\nAssume now a4/a5 are active application, which one should get the next available resource?\n{code}\n\nI believe it should be u4, but how about next example:\n{code}\nLet's say we have 6 apps belong to 5 users:\n\nApp: a1, a2, a3, a4, a5, a6\nUsr: u1, u2, u3, u4, u5, u4\n\nMULP set to 25.\nAt the time=T, resource usage: a1=25,a2=20,a3=30,a4=15,a5=5,a6=5\n\nAssume now a5/a6 are active application, which one should get the next available resource?\n{code}\n\nExisting behavior in scheduler is a5 get resource first. But with this, we cannot have guaranteed capacity of user any more. Since we have MULP set to 25, but the user u5 get new resource before u4 reaches configured MULP.\n\nIf we all agree this behavior (FIFO order comes before user limit), we can use approach from Jason. In the other hand, if we want the first (100/MULP) users have guaranteed (100/MULP) capacity, the order of application mattters.\n\n_TL;DR_\n\nNow I change my mind, it's better to make the behavior consistent :). So we don't have to make user limit calculated in a separated thread. As proposed by Jason, we can calculate two user limits:\n\n1) Active user limit for allocation: We will use resource-used-by-active-users and #active-users to calculate active user limit.\n\n{code}\nactive-user-limit = min(\n        max(resource-used-by-active-users, \n            queue-configured-resource - resource-used-by-non-active-users)\n             / min(#active-users, 100 / MULP),\n        queue-configured-resource * ULP)\n{code}\n\nThis looks very similar to how we compute user limit today, the only difference is it uses resource-used-by-active-users instead of total-resource because we should fairly divide available resource among active users in the queue.\n\n2) User limit for preemption:\n\nWhen we doing preemption, what we will do is:\n\n{code}\nall-user-limit = min(\n        max(resource-used-by-all-users, \n            queue-configured-resource) / min(#users, 100 / MULP),\n        queue-configured-resource * ULP)\n{code}\n\nThoughts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-14T03:04:52.193+0000","updated":"2016-12-14T03:04:52.193+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15748766","id":"15748766","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"+1 for keeping the user limit behavior consistent with what it does today.  Resources will still be offered to apps in priority order (typically FIFO unless overridden by the app's priority), and any user under the minimum limit should still be able to receive that resource.  As such I'm not sure I agree with the proposal for active user limits.  It appears that limit can go below the configured minimum if a lot of users are all asking for the available resources.  That would change the behavior and affect app priorities beyond what the user limit does today.  For purposes of unblocking the user limit preemption work, I'd like to preserve the current computation so adding the preemption feature doesn't affect the behavior of the scheduler even when the feature isn't used.\n\nSpeaking of preemption, we will need to be careful on how the two limits are applied to prevent oscillations.  If resources are available then the active user limit should be applied as it is today.  However if resources are not available then the preemption limit should be applied not only to the user being targeted for preemption but also to the user who is requesting the resource to trigger the preemption.  If we mix the two limits then preemption can oscillate between two users because the active limit can be larger than the preemption limit.\n\nFor calculating the preemption all-user-limit, I think the equation can be simplified to absolute queue capacity * MULP.  I personally do not want preemptions to give users resources beyond the minimum.  For example if the MULP is configured to 25% and there are two users in the queue, A at 70% usage and B at 30%, I'd rather not lose work by shooting A's containers to give B resources beyond the configured minimum limit.  Preemptions can be very costly to an application, so I don't think this should be completely fair (that's the job of FairScheduler).  We should only preempt work to get users up to the minimum limit and only if others are above the minimum limit. Thoughts on this?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2016-12-14T16:26:55.105+0000","updated":"2016-12-14T16:26:55.105+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15748894","id":"15748894","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"bq. If we all agree this behavior (FIFO order comes before user limit), we can use approach from Jason.\nI agree with this statement. I think this is the current scheduler's behavior.\n\n{quote}\nI personally do not want preemptions to give users resources beyond the minimum. For example if the MULP is configured to 25% and there are two users in the queue, A at 70% usage and B at 30%, I'd rather not lose work by shooting A's containers to give B resources beyond the configured minimum limit. Preemptions can be very costly to an application, so I don't think this should be completely fair (that's the job of FairScheduler). We should only preempt work to get users up to the minimum limit and only if others are above the minimum limit. Thoughts on this?\n{quote}\nI agree. I recognize that if A gives up resources, the current behavior of the scheduler is to give those to B. But preempting A's resources under these circumstances is not what we want because the cost of lost work is high.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-14T17:16:49.926+0000","updated":"2016-12-14T17:16:49.926+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15749129","id":"15749129","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~jlowe], [~eepayne].\n\nbq. As such I'm not sure I agree with the proposal for active user limits. It appears that limit can go below the configured minimum if a lot of users are all asking for the available resources. That would change the behavior and affect app priorities beyond what the user limit does today.\n\nI still think we may need to change the behavior a little bit, today's behavior allow first user go beyond user limit a lot.\nFor example:\n{code} \n5 users, 5 apps, MULP=20, queue-configured-resource=100\nApp: a1, a2, a3, a4, a5 \nUsr: u1, u2, u3, u4, u5\n\nAt the time=T, resource usage: a1=25,a2=20,a3=30,a4=20,a5=5; a4/a5 are active user\n{code}\nToday's logic will get user-limit = 100 / 2 = 50, so if there's more available resource, a4 can get up to 50 resource, and a5 will be starved.\n\nThis causes oscillations if we preempt when user's usage beyond {{queue-capacity * MULP}}, a4 will get available resource, and soon it will be preempted because it above {{queue-capacity * MULP}}. \n\nSo my proposal is to have a new user limit calculation for active users, it should be:\n\n{code}\nactive-user-limit = max(\n   resource-used-by-active-users / #active-users,\n   queue-capacity * MULP\n)\n{code}\n\nThis should addressed your point:\nbq. limit can go below the configured minimum if a lot of users are all asking for the available resources \nSince it make sure each user can get at least queue-capacity * MULP, and it avoid one user dominate all queue's available resource like today. \n\n\n\nbq. For calculating the preemption all-user-limit, I think the equation can be simplified to absolute queue capacity * MULP.\nGenerally agree, we can discuss more when implementing preemption logic.\n\nbq. We should only preempt work to get users up to the minimum limit and only if others are above the minimum limit. Thoughts on this?\nTotally agree.\n\nThoughts? [~sunilg].","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-14T18:53:55.652+0000","updated":"2016-12-14T18:53:55.652+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15749453","id":"15749453","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"I think I can get behind a proposal that preserves the FIFO/priority behavior at least up through usage < MULP and then becomes fair once a user is beyond MULP.  We need to be careful that active users are still allowed to grow to fill the queue (e.g.: a single user in the queue doesn't get capped at MULP).  Also note that a cached active user limit calculation will become out-of-date more often than before, since resource-used-by-active-users changes a lot more often than queue-capacity does.  Essentially any resource change for an active user invalidates the user limit cache for all active users.  I'm not too worried about that, just pointing out that it will get computed more often with the new proposal.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2016-12-14T20:54:35.474+0000","updated":"2016-12-14T20:54:35.474+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15749484","id":"15749484","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"We should be able to make resource-used-by-active-users always up-to-date, if there's any changes on active user set or used resource from active users, we can update the field, it should not have significant impact on performance.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-14T21:05:51.870+0000","updated":"2016-12-14T21:06:54.218+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15755070","id":"15755070","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Generally I am also agreeing with the direction at which we are going towards.\n\nFew points from end:\n- For preemption calculation, one of the main problem could have been about the *free resources* in the queue even when some users are over-utilizing its resource quota (these users could become active/non-active). Because preemption module will be handling {free_resources + to_be_preempted_resources} and need to think more like scheduler.\n- Above point will play a big factor to decide when preemption need to kick in. It could be when free/used become very smaller OR it could also be when there is a lot of violation from few users which holds resource more than MULP but became non-active users.\n\nAs far as I understood, we will still have pre-computed user-limit model. But this cache will be computed based on any event change on resource changes for non-active users. I think in a busier and short-living app's cluster, we may recalculate more. But I think preemption module will have a better accuracy.\n\nOn this note, could I update a patch with approach mentioned above. I think free resource also need to be part to trigger preemption. But for user-limit calculation, I will be making changes in {{ActiveUserManager}} to track of non-active-users as well with a state to reflect changes in resource.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-12-16T17:53:38.449+0000","updated":"2016-12-16T17:53:38.449+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15755181","id":"15755181","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"bq.  I think in a busier and short-living app's cluster, we may recalculate more.\nThis is probably true for the active-user limit. For the preemption limit, my thinking is that it only needs to be calculated during a preemption cycle. Thoughts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2016-12-16T18:32:47.314+0000","updated":"2016-12-16T18:32:47.314+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15755304","id":"15755304","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"bq. For preemption calculation, one of the main problem could have been about the free resources\nI think so, but I think the *minimum* preemption threshold is we should not preempt res from user if used of the user < queue-capacity * MULP. The higher threshold is, the safer of the preemption. \n\nbq. I think in a busier and short-living app's cluster, we may recalculate more.\nI agree with [~eepayne], we should be able to make preemption / allocation UL calculation independent (or at least it's better to not allocation UL has dependency on preemption UL). [~sunilg] could you add some details here?\n\nbq. On this note, could I update a patch with approach mentioned above.\nPlease go ahead when you get chance :). We should generally agree the approach, there are some debatable details, but starting prototype can help us understand the scope.\n\nThoughts?\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2016-12-16T19:29:19.088+0000","updated":"2016-12-16T19:29:19.088+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15764890","id":"15764890","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~leftnoteasy] for the clarification.\nI will update a patch soon.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2016-12-20T18:32:56.254+0000","updated":"2016-12-20T18:32:56.254+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15795678","id":"15795678","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Sorry for the slight delay here. I will put up a patch later today as per discussion.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-03T18:03:38.636+0000","updated":"2017-01-03T18:03:38.636+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15801180","id":"15801180","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Attaching an initial version of patch as per discussion.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-05T12:00:37.011+0000","updated":"2017-01-05T12:00:37.011+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15807846","id":"15807846","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"Thanks [~sunilg] for providing this work.\n\nI am concerned about the way in which {{LeafQueue#getComputedUserLimit}} and {{LeafQueue#getComputedActiveUserLimit}} are deciding when to recompute user limits.\n  - In the case of {{getComputedActiveUserLimit}}, if number of active users has increased or decreased, all active users in {{preComputedActiveUserLimit}} are invalided, and not just the one that was activated/deactivated. This requires recalculation for other users when it is not necessary.\n  - In the case of {{getComputedUserLimit}}, comparing a cached {{lastUserCount}} with {{users.size()}} could miss occasions when recomputation would be necessary.\n\nMy understanding of [~jlowe]'s [comment (above)|https://issues.apache.org/jira/browse/YARN-5889?focusedCommentId=15745552&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15745552] is that the {{LeafQueue}} would increment a change counter which would be cached in each {{User}}'s object and then would be used to determine when recalculation of user limit should occur.\n\nRather than document each occurrence, I have uploaded a patch with my suggestions. {{YARN-5889.0001.suggested.patchnotes}} is the diff between {{YARN-5889.0001.patch}} and my suggestions.\n\nI haven't tested all of the scenarios yet (I'll complete that soon), but I think this covers my concerns about the current patch, and I think it is more efficient. Please have a look and let me know your thoughts.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-07T17:23:15.516+0000","updated":"2017-01-07T17:23:15.516+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15811817","id":"15811817","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~eepayne] for the detailed explanation.\n\nI was also having similar thought. Jus one point to clarify here, \nbq. if number of active users has increased or decreased, all active users in preComputedActiveUserLimit are invalided, and not just the one that was activated/deactivated. This requires recalculation for other users when it is not necessary.\n\nSince number of active users are changed, we need to recalculate all active users limits, correct?. Because we divide total-resource-used-byactive-user with active-user count. In the proposed changed patch also, cached limit will be different with actual user count when we query user-limit for that user.\nIn my patch, i cleared all map because of that. could you please help to elaborate a little more.\n\nI also feel cachedLimit make code more simpler, hence no issue in making change. However I need to have 2 cacheLimit in user data structure (one for active user and another for all users). Is my thinking in line with yours. pls help to clarify. Thank You.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-09T13:46:20.194+0000","updated":"2017-01-09T13:46:20.194+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15812128","id":"15812128","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"bq. Since number of active users are changed, we need to recalculate all active users limits, correct?\nCorrect. Comparing each user's \"cached recompute count\" value against the the queue's value should trigger that to happen when {{getComputedActiveUserLimit}} or {{getComputedUserLimit}} is called for each specific user.\n\nbq. I need to have 2 cacheLimit in user data structure (one for active user and another for all users).\nAre you asking if we need two versions of {{cachedRecalcULCount}} in the {{User}} class? If that's the question, then, no, I don't think so. The queue value will change for all of the conditions outlined in [~jlowe]'s [comment (above)|https://issues.apache.org/jira/browse/YARN-5889?focusedCommentId=15745552&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15745552], and that will trigger the recalculation.\n\nHowever, I do think {{reComputeUserLimits}} needs to be modified to update {{preComputedUserLimit.get}} when recomputing user limits. That is not done anywhare in the current patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-09T16:11:37.939+0000","updated":"2017-01-09T16:11:37.939+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15812187","id":"15812187","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~sunilg] for providing the patch and reviews from [~eepayne].\n\nQuickly scanned the patch,\n\nIf everybody agrees with approach in my comment: https://issues.apache.org/jira/browse/YARN-5889?focusedCommentId=15749129&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15749129\n\n{code} \nactive-user-limit = max(\n   resource-used-by-active-users / #active-users,\n   queue-capacity * MULP\n)\n{code} \n\nWe can:\n1) Update {{resource-used-by-active-users}} when any user enters/exits set of active users.\n2) Update #active-users (using approaches like ActiveUsersManager approach)\n\nBoth of #1/#2 can be done within the same thread, and since we will have an identical UL for all the active users, I think this can be done without adding a new thread. Please correct me if I'm wrong.\n\nIt looks like Sunil and Eric have different implementation suggestions, I have looked at details of the two approaches. However I think the goals are:\na. Can always get up-to-date UL\nb. Avoid re-computation of UL as much as possible.\nAny approach can achieve above goals is good to me.\n\nAnd in addition, we can add a UsersManager to LQ to manager all user-related information, such as user-limit / active-user-limit / #active-users. \nIdeally, LQ/PCPP should get activeUserLimit / userLimit from UsersManager\n\nAnd for last, we can look at logics for #active-users per partition, now we have an identical #active-users for all partition, which causes some problems. Since we will make a major changes to logics around this, it could be a good chance to fix the problem as well.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-09T16:38:11.784+0000","updated":"2017-01-09T16:38:11.784+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15812251","id":"15812251","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"Thanks [~leftnoteasy] for your review and comments.\n\nbq. If everybody agrees with approach in my comment\nI agree. I think [~jlowe] summed it up well when he said your \"... proposal ... preserves the FIFO/priority behavior at least up through usage < MULP and then becomes fair once a user is beyond MULP.\"\n\n{quote}\nAnd in addition, we can add a UsersManager to LQ\n...\nAnd for last, we can look at logics for #active-users per partition, now we have an identical #active-users for all partition\n{quote}\nLet's please do these as separate JIRAs. We are extremely anxious to move this JIRA forward since it is blocking YARN-2113 (user limit-based intra-queue preemption).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-09T17:02:09.798+0000","updated":"2017-01-09T17:02:09.798+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15812451","id":"15812451","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"bq. Let's please do these as separate JIRAs. We are extremely anxious to move this JIRA forward since it is blocking YARN-2113 (user limit-based intra-queue preemption).\nI understand, however I prefer to do the refactoring together with the patch, If we don't actively do refactoring to make a clean code structure with major behavior changes, it will cause a lot of trouble to maintain the code and add new functionalities. I'm OK with moving other changes like partition-related changes to a separate JIRA if it needs considerable effort. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-09T18:19:25.686+0000","updated":"2017-01-09T18:19:25.686+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15812737","id":"15812737","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"[~sunilg],\nbq. However, I do think {{reComputeUserLimits}} needs to be modified to update {{preComputedUserLimit}} when recomputing user limits. That is not done anywhare in the current patch.\nActually, we may want to have separate methods for {{reComputeUserLimits}} and {{reComputeActiveUserLimits}}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-09T20:19:22.805+0000","updated":"2017-01-09T20:19:22.805+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15813705","id":"15813705","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thank You Eric. Yes. I missed this. Will update in next patch.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-10T03:23:30.776+0000","updated":"2017-01-10T03:23:30.776+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15814719","id":"15814719","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~leftnoteasy] and [~eepayne]\n\nAttached patch has below changes\n- Used cahcedLimit model suggested by [~jlowe] and [~eepayne] to invalidate computed user-limits\n- In the attached notes patch from Eric, {{recalcULCount}} is changed in {{LQ#reinitialize}}. But I am already changing it in {{updateClusterResource}}. This will be invoked when node is added/removed, or queue s reinitialized. So we can skip it from {{reinitialize}}, correct?\n- I created a class named {{UsersManager}} and moved all user-limit computation etc to that class. This class also will have activeUsersManager instance as well. Its a refactoring majorly.\n\nPlease share your thoughts, and I will do some more tests with same and update feedback.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-10T11:30:28.955+0000","updated":"2017-01-10T11:30:28.955+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15815917","id":"15815917","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~sunilg],\n\nFollowing are my comments for overall code structure and call flow:\n\n1) LeafQueue:\n- Several unused members, could you check? \n- Can we move the users map to UsersManager? Ideally all operations on users should be redirected to UsersManager (UM)\n- recalculateULCount is implementation details of user limit calculation, better to be moved to UM.\n- Move all user-limit related configurations parameter (like ULF) to UM? Ideally UM should be more self-contained to make less dependencies and risk of deadlock.\n\n2) UsersManager\n- Better to move to cpaacity package, since it handles CS-only functionalities like user limit.\n- Add a method like {{userLimitNeedsRecompute}} to handle the original logics of LQ#recalculateULCount\n- User#setCachedCount, should we invalidateUL for the user who allocates/releases containers, or we should invalidate all user limit? I think the latter one is more safe to me. If you agree, I suggest LQ to call UM#userLimitNeedsRecompute to notify UM. \n\n3) UM, logics to compute UL\nFirst, the UL is classified by user-name, active state, scheduling-mode, partition. However I think we don't need user-name. Existing UL will be identical for users in active set and users in all-set.\nSecond, existing logic automatically computes all schedulingMode, which may not necessary. The ignore-exclusivity is not common used, we can compute it only when necessary.\n\nIf you agree above, we can simplify API a little bit, we only need userName (to get if it's an activeUser), clusterResource, partition. ResourceCalculator can be stored inside UM, we don't need to pass it as parameter everytime.\n\nAnd the call flow may look like:\n{code}\nUM#getActiveUserLimit(userName, clusterResource, partition, schedulingMode) {\n\tif (needRecompute) {\n\t\treturn recompute(userName, clusterResource, partition, schedulingMode)\n\t}\n\treturn getCachedActiveUserLimit(userName, clusterResource, partition, schedulingMode);\n}\n{code}\n\n4) ActiveUserManager\n- I think we don't need to use the class in CS. Adding {{Set<ApplicationId>}} of UM#User, and add other fields to UM. It could have some duplicated code, but the code structure will be more clean.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-10T19:24:10.049+0000","updated":"2017-01-10T19:24:10.049+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15819482","id":"15819482","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"[~sunilg],\n- Shoule {{resetUserAddedOrRemoved}} just be {{setUserAddedOrRemoved}}\n- {{LeafQueue}}: I think {{totalUserConsumedRatio}} should be removed, since it'\ns not used.\n- {{LeafQueue#recalculateULCount}} / {{UsersManager#User#cachedULCount}}: I know I came up with the name originally, but I think a better name would be {{recalculateUL}}\n- {{getComputedActiveUserLimit}} / {{getComputedUserLimit}}: User's {{cachedULCount}} needs to be updated when the UL is recomputed or else it will always be out of sync and will always be recomputed:\n{code}\n    if (userLimitPerSchedulingMode == null\n        || user.getCachedULCount() != lQueue.getRecalculateULCount()) {\n      userLimitPerSchedulingMode = reComputeUserLimits(rc, userName,\n          nodePartition, clusterResource, false);\n      user.setCachedULCount(lQueue.getRecalculateULCount());\n    }\n{code}\n\n[~leftnoteasy],\nbq. User#setCachedCount, should we invalidateUL for the user who allocates/releases containers, or we should invalidate all user limit? I think the latter one is more safe to me.\nYes, unfortunately, I think that once the queue goes above its guarantee, the ratio will change when containers are allocated or released. We may be able to do an optimization to only reset the specific user's count when the queue is under its guarantee and all users when it is over, but that may not be worth the added complexity.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-11T23:12:39.848+0000","updated":"2017-01-11T23:12:39.848+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15821043","id":"15821043","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks for comments. Generally makes sense. I ll update a patch in a shortwhile.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-12T13:52:28.757+0000","updated":"2017-01-12T13:52:28.757+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15821696","id":"15821696","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~leftnoteasy] and [~eepayne] for the valuable comments.\n\nbq.We may be able to do an optimization to only reset the specific user's count when the queue is under its guarantee and all users when it is over, but that may not be worth the added complexity.\nI agree. We can validate all userlimit when a container is allocated or released. Earlier we were invalidating user limit for respective user. Now we will invalidate all. Correct?\n\nbq.I think we don't need to use the class in CS. Adding Set<ApplicationId> of UM#User, and add other fields to UM. It could have some duplicated code, but the code structure will be more clean.\nI would like to do this in separate jira. {{LQ#getActiveUserManager}} is reference from various classes as well as around 7 test class. Since we still have the functionality in tact, I will removed the use of activeUserManager from UM in another ticket.\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-13T11:58:46.597+0000","updated":"2017-01-13T11:58:46.597+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15822457","id":"15822457","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks for update the patch, my comments for ver.3 patch.\n\n1) LQ:\n- getUserAndAddIfAbsent could be move to UM\n- addUser/removeUser could be private method of UM\n- getUsers -> getUsersInfo, and move implemenation to UM\n- getComputedActiveUserLimit -> getComputedResourceLimitForActiveUsers (or shorter name)\n- getComputedUserLimit -> getComputedResourceLimitForAllUsers (mostly for more consistency naming to above, and more acurate and less ambiguous)\n- Add more description to above two methods.\n- Is it better to move recalculateQueueUsageRatio/calculateUserUsageRatio into UM, and recalculateQueueUsageRatio can be renamed to \"clusterResourceUpdated\"\n- inc/decUsedResource, keep User reference to avoid hit hashMap twice.\n- Not caused by your patch: could you add a desc to UsageRatios?\n\n2) UM:\n- UM#userCountToRecalculateUserlimit could be AtomicLong to avoid writelock and less frequently wrapped to MIN_VALUE. Rename it to latestVersion.\n- rename UM#getUserCountToRecalculateUserlimit -> getLatestVersion and readlock is not required. \n- A potential race condition:\n{code} \n ....\n    // In allocation thread, cross check whether user became active or not.\n    // Such a change needs recomputation for all user-limits.\n    if (activeUsersManager.isUserAddedOrRemoved()) {  // 1\n      // Clear computed user-limits and ask for recomputation. \n      userLimitNeedsRecompute(); // 2\n\n      // reset the flag so that we can further track for active users.\n      activeUsersManager.setUserAddedOrRemoved(false); // 3\n    }\n ....\n{code} \nIf thread#1 at  // 2, and thread #2 calls setUserAddedOrRemoved, the {{isUserAddedOrRemoved}} could be overwritten and cannot properly trigger another update.\nTo simplify interface and avoid the race condition, can we change {{isUserAddedOrRemoved}} to use an AtomicBoolean, invokes getAndSet(false) to do the \"flip\" operation.\n- Renaming {{userCountToRecalculateUserlimit}} to {{localVersion}}?\n- Similiarily,\n{code}\n    if (isRecomputeNeeded(user, userLimitPerSchedulingMode)) {\n      // recompute\n      userLimitPerSchedulingMode = reComputeUserLimits(rc, userName,\n          nodePartition, clusterResource, schedulingMode, false);\n\n      // update user count to cache so that we can avoid recompute if no major\n      // changes.\n      user.setUserCountToRecalculateUserlimit(\n          getUserCountToRecalculateUserlimit());\n    }\n{code}\nTo avoid race condition, is it better to save value of \"latestVersion\" and set it to \"local\" version, pesudo code like:\n{code}\n   int latestVersion = UM#getLatestVersion\n   if (getLocalVersion != latestVersion) {\n       // recompute ...\n       setLocalVersion(latestVersion);\n   }\n{code}\n- {{getComputedUserLimit}} / {{getComputedActiveUserLimit}}: I'm wondering if the UserToPartitionRecord is required, since existing computation doesn't need the \"user\" field.\n- Does existing logic handle following scenario? Assume userLimitPerSchedulingMode is null and no new changes to user-limit, will NPE happen if we get a RESPECT_EXCLUSIVITY first and then get a IGNORE_EXCLUSIVITY?\n- Inside {{computeUserLimit}}, it calls {{user.setUserResourceLimit(userLimitResource);}}, I think we need to file a separate JIRA to make sure REST API / web UI can get expected UL.\n- TODO, after you update the patch, need to double check locks of UM.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-13T22:31:39.425+0000","updated":"2017-01-13T22:31:39.425+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15824152","id":"15824152","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~leftnoteasy] for the detailed comments.\n\nbq.I'm wondering if the UserToPartitionRecord is required, since existing computation doesn't need the \"user\" field.\nWe still update {{user.setUserResourceLimit(userLimitResource);}} while computing user limit.\n\nYes. I will also take one more look regarding lock. Also will raise another ticket for REST api.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-16T15:30:11.606+0000","updated":"2017-01-16T15:30:11.606+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15824310","id":"15824310","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 17s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 3 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 54s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 27s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 17s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 59s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 25s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 31 new + 499 unchanged - 8 fixed = 530 total (was 507) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 14s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} whitespace {color} | {color:red}  0m  0s{color} | {color:red} The patch has 4 line(s) that end in whitespace. Use git apply --whitespace=fix <<patch_file>>. Refer https://git-scm.com/docs/git-apply {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  1m  5s{color} | {color:red} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager generated 7 new + 0 unchanged - 0 fixed = 7 total (was 0) {color} |\n| {color:red}-1{color} | {color:red} javadoc {color} | {color:red}  0m 18s{color} | {color:red} hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager generated 2 new + 913 unchanged - 0 fixed = 915 total (was 913) {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red} 38m 54s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 20s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 60m 24s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| FindBugs | module:hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n|  |  Comparison of String objects using == or != in org.apache.hadoop.yarn.server.resourcemanager.UserToPartitionRecord.equals(Object)   At UserToPartitionRecord.java:== or != in org.apache.hadoop.yarn.server.resourcemanager.UserToPartitionRecord.equals(Object)   At UserToPartitionRecord.java:[line 72] |\n|  |  Comparison of String objects using == or != in org.apache.hadoop.yarn.server.resourcemanager.UserToPartitionRecord.equals(Object)   At UserToPartitionRecord.java:== or != in org.apache.hadoop.yarn.server.resourcemanager.UserToPartitionRecord.equals(Object)   At UserToPartitionRecord.java:[line 71] |\n|  |  Increment of volatile field org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.activeApplications in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.activateApplication()  At UsersManager.java:in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.activateApplication()  At UsersManager.java:[line 204] |\n|  |  Increment of volatile field org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.pendingApplications in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.activateApplication()  At UsersManager.java:in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.activateApplication()  At UsersManager.java:[line 203] |\n|  |  Increment of volatile field org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.activeApplications in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.finishApplication(boolean)  At UsersManager.java:in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.finishApplication(boolean)  At UsersManager.java:[line 214] |\n|  |  Increment of volatile field org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.pendingApplications in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.finishApplication(boolean)  At UsersManager.java:in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.finishApplication(boolean)  At UsersManager.java:[line 216] |\n|  |  Increment of volatile field org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.pendingApplications in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.submitApplication()  At UsersManager.java:in org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.UsersManager$User.submitApplication()  At UsersManager.java:[line 194] |\n| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestNodeLabelContainerAllocation |\n|   | hadoop.yarn.server.resourcemanager.monitor.capacity.TestProportionalCapacityPreemptionPolicyMockFramework |\n|   | hadoop.yarn.server.resourcemanager.monitor.capacity.TestProportionalCapacityPreemptionPolicyIntraQueue |\n|   | hadoop.yarn.server.resourcemanager.monitor.capacity.TestProportionalCapacityPreemptionPolicyForReservedContainers |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacitySchedulerNodeLabelUpdate |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestLeafQueue |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestApplicationLimits |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestApplicationLimitsByPartition |\n|   | hadoop.yarn.server.resourcemanager.monitor.capacity.TestProportionalCapacityPreemptionPolicyForNodePartitions |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5889 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12847642/YARN-5889.0004.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux 28a675b13d26 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 2f8e9b7 |\n| Default Java | 1.8.0_111 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/14661/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| whitespace | https://builds.apache.org/job/PreCommit-YARN-Build/14661/artifact/patchprocess/whitespace-eol.txt |\n| findbugs | https://builds.apache.org/job/PreCommit-YARN-Build/14661/artifact/patchprocess/new-findbugs-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.html |\n| javadoc | https://builds.apache.org/job/PreCommit-YARN-Build/14661/artifact/patchprocess/diff-javadoc-javadoc-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/14661/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/14661/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/14661/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-16T17:13:28.440+0000","updated":"2017-01-16T17:13:28.440+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15824364","id":"15824364","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"There are few findbugs errors and test failures. I think I ll wait for comments on latest patch and will fix these along with that.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-16T17:49:14.522+0000","updated":"2017-01-16T17:49:14.522+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15824442","id":"15824442","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~sunilg] for updating the patch.\n\nSome minor comments:\n\n1) I made a mistake of my previous comment: recalculateQueueUsageRatio should belong to LQ, and it invokes UM#calculateUserUsageRatio.\n\n2) UM#latestVersionOfUserCount is a little bit confusing, since it doesn't only consider user count, how about rename it to latestVersionOfUsersState? (And update comments, getters/setters accordingly). \n\n3) ActiveUM#isUserAddedOrRemoved, parameter is not required since it is always false.\n\n4) Locks of UM:\n- Add writeLock for following code block:\n{code}\n    long latestVersionOfUserCount = getLatestVersionOfUserCount();\n    if (isRecomputeNeeded(user, userLimitPerSchedulingMode,\n        latestVersionOfUserCount, schedulingMode)) {\n      // recompute\n      userLimitPerSchedulingMode = reComputeUserLimits(rc, userName,\n          nodePartition, clusterResource, schedulingMode, true);\n\n      // update user count to cache so that we can avoid recompute if no major\n      // changes.\n      user.setLocalVersionOfUserCount(latestVersionOfUserCount);\n    }\n{code}\nFor getComputedResourceLimitFor*Users.\nThis can make sure update of UL can be sequentially done and version increases while updating UL can always trigger another update.\n\n5) Regarding to UserToPartitionRecord and computeUserLimit: \nMy gut feeling is that we can optimize/simplify this part a little bit, let's revisit it after this patch: This patch could lead to wrong REST UL computation (returns all user limit instead of active user limit), and it recomputes UL for every user instead of every partition.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-16T19:04:50.771+0000","updated":"2017-01-16T19:04:50.771+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15825934","id":"15825934","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~leftnoteasy]\nAttaching new patch addressing the comments.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-17T11:53:52.175+0000","updated":"2017-01-17T11:53:52.175+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15826046","id":"15826046","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 20s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 3 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 16m 27s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 38s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 28s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 40s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 17s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  5s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 22s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 26s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 21 new + 496 unchanged - 11 fixed = 517 total (was 507) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 35s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 15s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} whitespace {color} | {color:red}  0m  0s{color} | {color:red} The patch has 3 line(s) that end in whitespace. Use git apply --whitespace=fix <<patch_file>>. Refer https://git-scm.com/docs/git-apply {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 11s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red} 41m 20s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 19s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 67m 15s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestNodeLabelContainerAllocation |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacitySchedulerNodeLabelUpdate |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestLeafQueue |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestApplicationLimits |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestApplicationLimitsByPartition |\n|   | hadoop.yarn.server.resourcemanager.monitor.capacity.TestProportionalCapacityPreemptionPolicyIntraQueue |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5889 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12847786/YARN-5889.0005.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux bfa3dfd5f0fc 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 7ee8be1 |\n| Default Java | 1.8.0_111 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/14673/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| whitespace | https://builds.apache.org/job/PreCommit-YARN-Build/14673/artifact/patchprocess/whitespace-eol.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/14673/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/14673/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/14673/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-17T13:26:50.216+0000","updated":"2017-01-17T13:26:50.216+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15829005","id":"15829005","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"[~leftnoteasy] and [~sunilg], I'm sorry for coming back to this point, but I just now realized the full consequences.\n{code: title=UsersManager#computeUserLimit}\nactive-user-limit = max(\n   resource-used-by-active-users / #active-users,\n   queue-capacity * MULP\n)\n{code}\nWith the above algorithm, {{active-user-limit}} never goes above {{resource-used-by-active-users / #active-users}} if MULP is less than 100%. I think this is because {{consumed}} is never greater than {{queue-capacity}} in that case.\n\nThat is to say:\n- {{queue-capacity}} = {{partitionResource * queueAbsCapPerPartition}}\n- {{queue-capacity}} = {{(consumed < queue-capacity) ? queue-capacity : (consumed + minAllocation)}}\n\nSince {{consumed}} never gets over {{queue-capacity}} when MULP is less than 100%, {{queue-capacity}} will never equal {{consumed + minAllocation}}.\n\nI have tested this to verify.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-18T23:54:31.404+0000","updated":"2017-01-18T23:54:31.404+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15829331","id":"15829331","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"[~eepayne], just want to clarify, since UL is a {{>}} check instead of {{>=}}, it should be able to increase until queue's max capacity, correct? I may not fully understand the problem you mentioned.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-19T05:15:41.513+0000","updated":"2017-01-19T05:15:41.513+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15830149","id":"15830149","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"[~leftnoteasy], the crux of the problem is that if MULP is less than 100% (for example 20%), the user limit resource is never calculated to be more than {{resource-used-by-active-users / #active-users}}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-19T16:01:47.941+0000","updated":"2017-01-19T16:01:47.941+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15830384","id":"15830384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"bq. the user limit resource is never calculated to be more than resource-used-by-active-users / #active-users\nSorry, I meant to say that it never gets above {{queue-capacity * MULP}}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-19T18:39:15.541+0000","updated":"2017-01-19T18:39:15.541+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15832068","id":"15832068","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"bq. it never gets above {{queue-capacity * MULP}}\n[~sunilg] and [~leftnoteasy], although this statement is true and I correctly stated the symptoms, I misdiagnosed the root cause in my [comments above|https://issues.apache.org/jira/secure/EditComment!default.jspa?id=13021186&commentId=15829005]. Sorry for the confusion.\n\nIt appears that the root cause is that {{UM#User#assignContainer}} is not incrementing {{TotalResUsedByActiveUsers}} for the AM. The first time through {{assignContainer}} for a new app, the user isn't active yet, so the used resources count is not incremented. Consequently, {{resource-used-by-active-users}} is always smaller than the actual value, and never gets bigger than {{queue-capacity * MULP}}:\n{code: title=UsersManager#computeUserLimit}\nactive-user-limit = max(\n   resource-used-by-active-users / #active-users,\n   queue-capacity * MULP\n)\n{code}\n\n[~sunilg], do we need the {{isAnActiveUser}} checks in {{assignContainer}} and {{releaseContainer}}? I removed these checks in my local build and the application is able to use all of the queue and cluster.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-20T16:35:33.989+0000","updated":"2017-01-20T16:35:33.989+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15834233","id":"15834233","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Hi [~eepayne]\nThank you for the detailed comments.\n\nbq.do we need the isAnActiveUser checks in assignContainer and releaseContainer?\nbq.I removed these checks in my local build and the application is able to use all of the queue and cluster.\nIf we remove the active user check, then {{activeUsersManager.getTotalResUsedByActiveUsers}} will be for all users. And hence it works like old. But I agree that the computation is not very correct. For example, *user1* was initially active and whenever a container was allocated for *user1*, we incremented resource to  {{AUM#TotalResUsedByActiveUsers}}. Now this user has become in-active since it doesnot have any more outstanding resource requests. So *user1* resources has to be removed from  {{AUM#TotalResUsedByActiveUsers}} at that time. This is not happening now. Eventhough I fix this, there are some changes in behavior. I can explain.\n\n{noformat}\n    // User limit resource is determined by:\n    // max{resourceUsedForActiveUsers / #activeUsers, queueCapacity *\n    // user-limit-percentage%)\n{noformat}\n\n\nNow here, lets assume 2 cases: ( 1. usedResource < queuCap and 2. usedResource > queueCap)\n\n1. {{resourceUsedForActiveUsers / #activeUsers}} will be much lesser value now as we consider only active-users used cap. In old case, {{total_used/#activeUsers}} will be definitely more. So as per above equation, UL will be {{queueCapacity * userLimit%}} for higher MULP (something like 80~99%). Hence UL will be less than queueCapacity. (If MULP is lesser value, then UL will also be lower)\n2. If {{usedResource > queueCap}}, then the UL can go more than queue cap based on two factors. If #active_users is lesser and active_users resource usage is more than queue cap OR usedResource which is more than queuCap is multiplied with a higher MULP value.\n\nAltogether, first part of the existing UL compute equation will matter only if #active-users is lesser or MULP is very low in cluster. I think its somewhat fine. Please share your thoughts.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-23T10:32:16.280+0000","updated":"2017-01-23T10:32:16.280+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15835089","id":"15835089","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"Thanks [~sunilg] for the explanation.\nbq. first part of the existing UL compute equation will matter only if #active-users is lesser or MULP is very low\nI'm not sure what you may consider to be very low, but we often have large queues with a large number of users, so the MULP can be as low as 1%. So, this calculation needs to be accurate even when MULP is very low.\n\nMy original concern is that in {{YARN-5889.0005.patch}}, {{UM#User#assignContainer}} is not incrementing used resources when a new AM container is assigned, but the size of the AM _is_ being decremented by {{UM#User#releaseContainer}}. This causes the resource usage to be inaccurate, it causes the headroom algorithm to never allow a user to use more than the MULP, and it causes the usage count to go negative when the application is finished.\n\nThis is borne out by the [unit test failures from above|https://builds.apache.org/job/PreCommit-YARN-Build/14673/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt] such as\n{code}\n  TestApplicationLimits.testHeadroom:657 expected:<<memory:163840, vCores:1>> but was:<<memory:81920, vCores:1>>\n{code}\nand \n{code}\n  TestCapacitySchedulerNodeLabelUpdate.testResourceUsageWhenNodeUpdatesPartition:320->checkUserUsedResource:188 expected:<0> but was:<-1024>\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-23T19:25:52.000+0000","updated":"2017-01-23T19:25:52.000+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15836229","id":"15836229","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~eepayne] for the clarification\n\nbq.I'm not sure what you may consider to be very low,\nI think my comment was slightly vague there. Actually i didnt not mean it ll be wrong.\n{noformat}\nactive-user-limit = max(\n   resource-used-by-active-users / #active-users,\n   queue-capacity * MULP\n)\n{noformat}\n\nI was trying to lay down chances of hitting first part above equation since we do a max. \n\nbq.UM#User#assignContainer is not incrementing used resources when a new AM container is assigned, but the size of the AM is being decremented by UM#User#releaseContainer\n{{LQ#allocateResource}} will invoke {{UM#User#assignContainer}}. So all containers including AM will hit here.\n\nNow I am fixing the test failure as mentioned by you. I fixed almost all, but now checking TestApplicationLimitsByPartition and TestLeafQueue. I ll feedback in few time once i fix that.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-24T15:34:19.201+0000","updated":"2017-01-24T15:34:19.201+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15836712","id":"15836712","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"bq. LQ#allocateResource will invoke UM#User#assignContainer. So all containers including AM will hit here.\n[~sunilg], I'm sorry I wasn't clear.\n\nAs you say, {{UM#User#assignContainer}} is called for the AM. However, since {{userName}} is not active at that point, {{incUsed}} is not called and the AM's resources are not incremented:\n{code}\n      if (activeUsersManager.isAnActiveUser(userName)) {\n        activeUsersManager.getTotalResUsedByActiveUsers().incUsed(nodePartition,\n            resource);\n      }\n{code}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-24T21:57:36.075+0000","updated":"2017-01-24T21:57:36.075+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15838124","id":"15838124","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Yes. You are correct. I am revisiting the logic to get total active-users usage. Will update a patch in short-while.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-25T16:59:03.213+0000","updated":"2017-01-25T16:59:03.213+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15842534","id":"15842534","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Uploading a new patch.\n\nChanges:\n1. CS will no longer user ActiveUsersManager (AUM). AbstractUsersManager interface will help in this case. UsersManager has  internally handling what AUM was earlier doing. This helps us to track per user resource as well.\n2. Fixed few test cases. However there  are some more failures. I ll wait for jenkins to make final touch.\n3. Fixed AM container resource issue w.r.t active user along with point 1.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-27T10:44:22.554+0000","updated":"2017-01-27T10:44:22.554+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15842615","id":"15842615","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 13s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 7 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 25s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 15s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  1s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 31s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 18 new + 1027 unchanged - 14 fixed = 1045 total (was 1041) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} whitespace {color} | {color:red}  0m  0s{color} | {color:red} The patch has 12 line(s) that end in whitespace. Use git apply --whitespace=fix <<patch_file>>. Refer https://git-scm.com/docs/git-apply {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  5s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red} 46m 34s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 16s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 67m 45s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.fair.TestContinuousScheduling |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestApplicationLimits |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacityScheduler |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestLeafQueue |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestApplicationLimitsByPartition |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestNodeLabelContainerAllocation |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacitySchedulerAsyncScheduling |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5889 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12849666/YARN-5889.0006.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux 79b87438325e 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 2034315 |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/14768/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| whitespace | https://builds.apache.org/job/PreCommit-YARN-Build/14768/artifact/patchprocess/whitespace-eol.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/14768/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/14768/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/14768/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-27T11:56:19.432+0000","updated":"2017-01-27T11:56:19.432+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15842859","id":"15842859","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Test failures are related. I ll be fixing them now.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-27T13:18:18.178+0000","updated":"2017-01-27T13:18:18.178+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15843343","id":"15843343","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~sunilg] for updating the patch.\n\nSome more comments for the latest refactoring:\n\n1) UsersManager#getComputedResourceLimitForAllUsers and FifoIntraQueuePreemptionPlugin#calculateIdealAssignedResourcePerApp: {{User}} can be removed from parameter list. And calculateIdealAssignedResourcePerApp: partitionBasedResource is not used, is it a mistake or just a unnecessary param?\n\n2) Are changes of {{testQueueMaxCapacitiesWillNotBeHonoredWhenNotRespectingExclusivity}} related to this patch?\n\n3) More comments for the latest UsersManager:\n\n3.1 Better to move following two methods from User to UsersManager:\n\n{code}\n    public void assignContainer(Resource resource, String nodePartition) {\n      userResourceUsage.incUsed(nodePartition, resource);\n\n      usersManager.incResourceUsagePerUser(resource, nodePartition, userName);\n    }\n\n    public void releaseContainer(Resource resource, String nodePartition) {\n      userResourceUsage.decUsed(nodePartition, resource);\n\n      usersManager.decResourceUsagePerUser(resource, nodePartition, userName);\n    }\n{code}\n\nInstead of invoking usersManager from User, it's better to do that in the reverse way. When resource allocated/released, it calls UsersManager#inc/decResourceUsagePerUser, and calls following methods:\n\n{code}\n1. User#incUsed\n2. UM#userLimitNeedsRecompute\n3. UM#updateQueueUsageRatio\n{code}\n\n3.2 For UM#inc/decResourceUsagePerUser, now the logic is a little confusing:\n\nWe already stored user's usage in User#userResourceUsage, I think we don't need a Map<UserName, ResourceUsage> for activeUsersResourceUsage/nonActiveUsersResourceUsage. What we only need is Set<UserName> for active user and non-active user, correct?\n\nSo existing logic of {{UM#inc/decResourceUsagePerUser}} should be changed to:\n\n{code}\nUM#incResourceUsagePerUser() {\n  writelock {\n      /* As mentioend above (3.1), adding following logic\n       * 1. User#incUsed\n\t   * 2. UM#userLimitNeedsRecompute\n\t   * 3. UM#updateQueueUsageRatio\n       */\n\n\t  // ... keep existing logics to updawte total usage\n\n\t  if (active-set.contains(userName)) {\n\t     // increase total-active-usage\n\t  } else if (non-active-set.contains(userName)) {\n\t     // increase total-non-active-usage\n\t  } else {\n\t     // User's neither in active set nor non-active set, is it possible?\n\t     // I think it is not possible if other logics are correct. (@Sunil)\n\t  }\n  }\n}\n{code}\n\nAnd we should keep your logic when user moved between active and non-active state, we will update both of active/non-active usages.\n\n3.3 For activateApplication/deactivateApplication, \n- Use writeLock? And annotation for lock seems outdated, please check all {{@Lock}} inside the class\n- Since {{updatePerUserResourceUsage}} has two duplicated logics -- toActive=false/true, it might be better to have two method: updateUsageForNew(Non)ActiveUser.\n- setUserAddedOrRemoved looks like a duplicated logic of {{userLimitNeedsRecompute}}, I think we can remove the logic and can simplify a little bit for other method like {{getComputedResourceLimitForActiveUsers}}\n\n3.4 Some miscs:\n- Could you make sure all Log.DEBUG is wrapped by isDebugEnabled?\n- Add Log.DEBUG for resource usage update of total/active/non-active? Which can help troubleshooting potential issues a lot.\n- In {{computeUserLimit}}: resourceUsed/usersCount initial value is redundant. And {{//      resourceUsed = currentCapacity;}} is commented intentially or by mistake? \n- getActiveUsersResourceUsage/getActiveUsersResourceUsage are never used by anyone.\n- {{UserToPartitionRecord}} is only consumed by UsersManager, if User is a internal class of UsersManager, I would suggest to convert UserToPartitionRecord to an internal class as well.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-27T19:11:24.551+0000","updated":"2017-01-27T19:11:24.551+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15843350","id":"15843350","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"And one suggestion is, for such major changes to CS, it might be better to run all tests under {{org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity}} before submitting the patch. Which can save you a lot of time to wait for Jenkins come back. That is typically what I do :).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-27T19:13:34.688+0000","updated":"2017-01-27T19:13:34.688+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15845169","id":"15845169","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~leftnoteasy] for the detailed comments. Updating new patch.\n\nFor point 1) related to PCPP, I raised another ticket to do the inspection on the unused parameter.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-30T13:14:12.747+0000","updated":"2017-01-30T13:14:12.747+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15845253","id":"15845253","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 15s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 7 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m 55s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 40s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 37s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 39s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 16s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  9s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 24s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 38s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 36s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 36s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 36s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 21 new + 1027 unchanged - 15 fixed = 1048 total (was 1042) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 14s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} whitespace {color} | {color:red}  0m  0s{color} | {color:red} The patch has 6 line(s) that end in whitespace. Use git apply --whitespace=fix <<patch_file>>. Refer https://git-scm.com/docs/git-apply {color} |\n| {color:red}-1{color} | {color:red} findbugs {color} | {color:red}  1m 14s{color} | {color:red} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) {color} |\n| {color:red}-1{color} | {color:red} javadoc {color} | {color:red}  0m 25s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red} 44m 34s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 19s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 69m 31s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| FindBugs | module:hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n|  |  Unread field:UsersManager.java:[line 112] |\n| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacitySchedulerAsyncScheduling |\n|   | hadoop.yarn.server.resourcemanager.TestRMRestart |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5889 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12849957/YARN-5889.0007.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux 6cbae24b0a7b 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 312b36d |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/14790/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| whitespace | https://builds.apache.org/job/PreCommit-YARN-Build/14790/artifact/patchprocess/whitespace-eol.txt |\n| findbugs | https://builds.apache.org/job/PreCommit-YARN-Build/14790/artifact/patchprocess/new-findbugs-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.html |\n| javadoc | https://builds.apache.org/job/PreCommit-YARN-Build/14790/artifact/patchprocess/patch-javadoc-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/14790/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/14790/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/14790/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-01-30T14:28:05.846+0000","updated":"2017-01-30T14:28:05.846+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15845262","id":"15845262","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"TestCapacitySchedulerAsyncScheduling is passing locally. I ll still check few more times. I ll wait for comments and ll address findbugs etc errors in next  patch. Please review. cc/ [~leftnoteasy] [~eepayne]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-01-30T14:34:08.161+0000","updated":"2017-01-30T14:34:08.161+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15847719","id":"15847719","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Major comments of UsersManager:\n1) Remove UM#incResourceUsagePerUser, instead LQ should use updateUserResourceUsageDuringAllocate to make queue ratio get updated as well.\n\n2) Instead of storing user limit for every user/partition/scheduling-mode, we should only store it for every partition and scheduling-mode since now we have an identical UL for all users in active set and total set. \n\n3) Instead of storing local version inside user, we should store it for every partition/scheduling-mode to make sure we can always get up-to-date UL. And also, I think we may need two maps to store active-user/all-users local version.\n\n4) Headroom of user can be fixed in a separate patch with lower priority: now headroom is set to queue-capacity * MULP, and it will slowly increase with more container allocation.\n\nMinor comments for UsersManager\n5) public to private: updateQueueUsageRatio/getUsers/getLatestVersionOfUsersState\n\n6) Merge implementation of updateUserResourceUsageDuringAllocate/updateUserResourceUsageDuringRelease.\n\n7) resourceCalculator can be stored in UsersManager, which we can avoid passing RC in all parameters.\n\n8) getTotalResourceUsagePerUser, instead of using nested {{? .. : ..}}, suggest to use if..else\n\n9) UM#UsageRatios: not caused by your patch: there're some necessary boxing operation. Better to update inc/setUsageRatio, all new Float is not required.\n\n10) Following method is too simple to be a separated method: removeFromUsersSet/removeFromUsersSet\n\n11) Need writeLock: UM#removeUser, \n\n12) isRecomputeNeeded: if you agree with #3, I think the parameter should be: partition/schedulingMode only. Map<SchedulingMode, Resource> is not required since if partition=x and scheduling-mode=y exists, the value of resource should not null, correct?\n\n13) getComputedResourceLimitForAll/ActiveUsers, I think the logic can be simplified to:\n{code}\nwritelock {\n  if (isRecomputationNeede(...)) {\n      // ...\n  }\n}\nreturn map.get(scheduling_mode, partition); \n{code}\n\n14) {{userLimitPerSchedulingMode.clear()}} can be removed from {{reComputeUserLimits}} if you agree with #12.\n\n15) {{Resource resourceByLabel}} can be removed from parameter list of {{updateUserResourceUsageDuringAllocate}}\n\n16) calculateUserUsageRatio could be removed and all logics can be done inside setUsageRatio which wrapped by writelock. And rename {{setUsageRatio}} to {{updateUsageRatio}}\n\n17) rename updateQueueUsageRatio to incQueueUsageRatio\n\n18) (TODO) Please review all usage of getUserAndAddIfAbsent, I think some of them might not necessary.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-01-31T23:34:56.659+0000","updated":"2017-01-31T23:34:56.659+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15848834","id":"15848834","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~leftnoteasy] for the comments. Updating new patch.\n\nFor points 12/13, {{isRecomputeNeeded}} needs to check {{Map<SchedulingMode, Resource>}} for very first time. And we update this map when one of SchedulingMode is updated. So I guess we need a null check as well. I ll ping offline.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-01T19:31:45.870+0000","updated":"2017-02-01T19:31:45.870+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15848962","id":"15848962","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks [~sunilg] for updating the patch.\n\nLast wave (hopefully :p) of comments for the latest patch\n\n1) updateUserResourceUsage:\n- javadocs parameter need to change\n- remove LOG.info for debug\n\n2) incResourceUsagePerUser/decResourceUsagePerUser are mostly identical, suggest to add the \"allocated\" parameter and rename it to updateResourceUsagePerUser. And writeLock is not necessary\n\n3) getComputedResourceLimitForActiveUsers:\n- Why {{userLimitNeedsRecompute}} is called here? Will it make the following {{isRecomputeNeeded}} to always return true?\nMy guess is, now we have only one localVersionOfUsersState for both of active user and total user. If we have two such map, one for active user and one for total user, it could solve the problem, correct?\n\n4) isRecomputeNeeded:\n- When userLimitPerSchedulingMode gonna be null?\n- I'm still not quite sure about why {{userLimitPerSchedulingMode}} is required for {{isRecomputeNeeded}}:\n{{getLocalVersionOfUsersState}} returns -1 when userLimitPerSchedulingMode doesn't contain schedulingMode, correct?\n- And also, we don't need {{latestVersionOfUserCount}}, instead we should call {{latestVersionOfUsersState.get()}}.\n\n5) So a summary of 3/4: I think we need two maps for local version, and isRecomputeNeed should take 3 parameters: schedulingMode, partition, and {{boolean activeUsers}}. Existing logic looks not correct to me: if version updated to 2 for partition=x, and scheduling_mode=y; then we get user-limit for active-user/total-user; and then version update to 3 for partition=x and scheduling_mode=y; then we get user-limit for active-user/total-user again, the 2nd time UL of total-user will not be updated.\n\n6) getLatestVersionOfUsersState is too simple to be a method, better to remove.\n\n7) userLimitNeedsRecompute:\nNeed to consider value becomes negative, and we use \"-1\" as default value for \"not found\" local version, we should make sure value is always >= 0.\nI think you can do things like:\n{code}\nint x = version.incrementAndGet();\nif (x < 0) {\n    x = version.get();\n\twhile (x < 0 && !version.compareAndSet(x, 0)) {\n\t\tx = version.get();\n\t}\n}\n{code}\n\n8) Possible redundant null checks:\nI'm not sure if they're required, we can keep them to make RM not crash, but highly suggest to print warning:\n- incResourceUsagePerUser/decResourceUsagePerUser: {{totalResourceUsageForUsers}}","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-02-01T21:30:35.984+0000","updated":"2017-02-01T21:30:35.984+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15848977","id":"15848977","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 12s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 7 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m 39s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 15s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 59s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 22s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 30s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 19 new + 1025 unchanged - 18 fixed = 1044 total (was 1043) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} whitespace {color} | {color:red}  0m  0s{color} | {color:red} The patch has 1 line(s) that end in whitespace. Use git apply --whitespace=fix <<patch_file>>. Refer https://git-scm.com/docs/git-apply {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  5s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} javadoc {color} | {color:red}  0m 19s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red} 40m 24s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 18s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 63m 56s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestApplicationPriority |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestIncreaseAllocationExpirer |\n|   | hadoop.yarn.server.resourcemanager.scheduler.TestAbstractYarnScheduler |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacitySchedulerNodeLabelUpdate |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacitySchedulerAsyncScheduling |\n|   | hadoop.yarn.server.resourcemanager.TestRMRestart |\n|   | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacityScheduler |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5889 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12850466/YARN-5889.0008.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux b3f3083ac984 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / b6f290d |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/14805/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| whitespace | https://builds.apache.org/job/PreCommit-YARN-Build/14805/artifact/patchprocess/whitespace-eol.txt |\n| javadoc | https://builds.apache.org/job/PreCommit-YARN-Build/14805/artifact/patchprocess/patch-javadoc-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/14805/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/14805/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/14805/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-01T21:47:52.691+0000","updated":"2017-02-01T21:47:52.691+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15849795","id":"15849795","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~leftnoteasy] for helping to review the patch thoroughly. Updating a new patch\n\nbq.4) isRecomputeNeeded:\nI am slightly confused here. I think we might need null check. I ll help to share detailed view for that.\n\nAssume that there are no precomputed user-limit at the start when RM is started or queue is refreshed. So all cache ill be empty, and we ll do our first computation when a container request comes. \nSo in this case, userLimitPerSchedulingMode will be null. And we ll do a recompute and then userLimitPerSchedulingMode will have some entires. So a null check is needed at the very beginning scenario. I can see whether this check can be done outside or note. Am i missing something here? pls help to share your view.\n\nbq.And also, we don't need latestVersionOfUserCount, instead we should call latestVersionOfUsersState.get().\nuserLimitNeedsRecompute or getLatestVersionOfUsersState are not writeLock protected. Hence in getComputedResourceLimitForAll/ActiveUsers  , it may be possible that latestVersionOfUsersState may change within writeLock block while operating.  Since we save the saved version of latestVersionOfUserCount to update local cache (per partition nd sch mode), even though some other thread changed the real  latestVersionOfUsersState, cache will be invalidate it correctly. Pls pool in your thoughts.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-02T11:13:42.441+0000","updated":"2017-02-02T11:13:42.441+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15850294","id":"15850294","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Sunil,\n\nbq. I am slightly confused here. I think we might need null check. I ll help to share detailed view for that. ...\nI think the latest patch do the correct thing, except one thing:\n\nInstead of doing:\n\n{code}\n    Map<String, Map<SchedulingMode, Resource>> userMap = (isActive)\n        ? preComputedActiveUserLimit\n        : preComputedAllUserLimit;\n\n    return !userMap.containsKey(nodePartition)\n        || (getLocalVersionOfUsersState(nodePartition, schedulingMode,\n            isActive) != latestVersionOfUserCount);\n{code}\n\nI think it should be enough to do:\n\n{code}\nreturn getLocalVersionOfUsersState(nodePartition, schedulingMode,\n            isActive) != latestVersionOfUserCount;\n{code}\n\nThe reason is, getLocalVersionOfUsersState will always return -1 when userMap doesn't contains nodePartition.\nAnd {{reComputeUserLimits}} will insert the map and return.\n\nIs my understand correct?\n\nbq. userLimitNeedsRecompute or getLatestVersionOfUsersState are not writeLock protected ...\n\n{{userLimitNeedsRecompute}} is now writeLock-protected (I think you don't need atomicLong any more but it's fine to keep it as-is). And usage of latestVersionOfUsersState is always under read/writeLock. So latestVersionOfUsersState.get() is always up-to-date value and will not be changed during calculation (it is also fine if it is changed during usage, our goal is to make local cache invalidated).\n\nAnd one additional minor comment:\n1) computeUserLimit:\n- Remove {{User user}} from parameter list, and instead of calling lQueue.getUser, it's better to call this.getUser()\n\n+1 to the latest patch beyond above comments, I think the patch is ready-to-go once Jenkins give a +1. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-02-02T18:41:21.905+0000","updated":"2017-02-02T18:41:21.905+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15850352","id":"15850352","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (/) *{color:green}+1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 13s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 7 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m  7s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 14s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  0s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 30s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 23 new + 1025 unchanged - 18 fixed = 1048 total (was 1043) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  1s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  4s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} unit {color} | {color:green} 39m 44s{color} | {color:green} hadoop-yarn-server-resourcemanager in the patch passed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 19s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 62m 40s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5889 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12850622/YARN-5889.0009.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux 1ea4dce72a65 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 0914fcc |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/14810/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/14810/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/14810/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-02T19:17:45.219+0000","updated":"2017-02-02T19:17:45.219+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15851153","id":"15851153","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Yes [~leftnoteasy]. Makes sense to me. Uploading a patch fixing the comments given. Thank You very much.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-03T06:58:12.806+0000","updated":"2017-02-03T06:58:12.806+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15851228","id":"15851228","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (/) *{color:green}+1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 26s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 7 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m 52s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 14s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  2s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 22s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 32s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 20 new + 1024 unchanged - 19 fixed = 1044 total (was 1043) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  6s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} unit {color} | {color:green} 40m  4s{color} | {color:green} hadoop-yarn-server-resourcemanager in the patch passed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 18s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 64m 10s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5889 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12850780/YARN-5889.0010.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux 6f5d3bd044c8 3.13.0-107-generic #154-Ubuntu SMP Tue Dec 20 09:57:27 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / 0914fcc |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/14821/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/14821/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/14821/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-03T08:39:24.760+0000","updated":"2017-02-03T08:39:24.760+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15851867","id":"15851867","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"+1 to latest patch, will commit it next Monday if no opposite opinions.\n\nThanks [~sunilg]!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-02-03T18:20:58.577+0000","updated":"2017-02-03T18:20:58.577+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15852243","id":"15852243","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"Thanks [~sunilg] and [~leftnoteasy] for your work on this feature. I do have one concern. I think there is a race condition where if a container fails, the freed resources are not recorded for that user about half the time.\n\nUse Case:\n- Queue is 50% of cluster\n- MULP = 50%\n- One app fills the cluster\n- Some containers fail\n-- I simulate this by using {{yarn container -signal container_1486159534159_0004_01_000029  FORCEFUL_SHUTDOWN}}\n- The app is only given new containers about half the time.\n-- That is to say, the app is asking for resources, and the cluster has free space, but the app is not being given those resources.\n\nI'm sorry I can't go into more detail at this time. I just discovered this issue, and I have not had time to investigate further. However, since you are about to complete the work on this JIRA, I felt I should provide the information I have so far.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-03T22:41:14.598+0000","updated":"2017-02-03T22:41:14.598+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15852845","id":"15852845","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"bq. resources are not recorded for that user about half the time.resources are not recorded for that user about half the time.\nAnother symptom is that the app never completes. It stays hung in the RUNNING state. The app attempts that failed are re-tried, but they stay in the 'STARTING\tNEW' state. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-04T16:37:18.449+0000","updated":"2017-02-04T16:37:18.449+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15852849","id":"15852849","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thank you very much [~eepayne] for sharing the scenario. I will dig into details and will share analysis soon.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-04T16:49:06.711+0000","updated":"2017-02-04T16:49:06.711+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15853626","id":"15853626","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"HI [~eepayne]. \nSorry for troubling you again. I ran many similar test cases in my local cluster. I could not get the case mentioned by you, even though i tested for many time today and yesterday. So i thought I might be missing something. \n\nI will try share my test case results here:\n- I used {{YARN-5889.0010.patch}} patch for my tests.\n- One node cluster (8GB).\n- I used sleep job to make sure i have a control on test time and on number of containers.\n- AM and other containers were using 2G containers always.\n\n\n*Test Scenario* (For 3 test cases, same scenario were used, only change is in configuration)\n1) Ran 4 containers including AM. Pending RR is 2Gb for one more container\n2) Killed all non-AM containers 3 times (totally 9 containers were killed using FORCEFUL_SHUTDOWN signal)\n3) Killed AM containers once and job re-ran.\n\n+Scenario 1:+ (One Queue 100%)\nMULP = 100, ULFactor = 1\n\nOutput:\nApplication retook whole cluster always when one/more container were killed.\n\n+Scenario 2:+ (One Queue 100%)\nMULP = 50, ULFactor = 1\n\n\nOutput:\nApplication retook whole cluster always when one/more container were killed. UL was 50%, still it got whole cluster.\n\n\n+Scenario 3:+ (Two Queues 50% each)\nMULP = 50, ULFactor = 2\n\nOutput:\nApplication retook whole cluster always when one/more container were killed. UL was 50%, still it got whole cluster as UL factor was 2. (If its 1, then only 6Gb could be used).\n\nCould you please help to take a look and share me what I might have missed from your test scenario. I ll continue test some more scenarios and will keep posted.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-06T07:34:53.445+0000","updated":"2017-02-06T07:34:53.445+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15854640","id":"15854640","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"[~sunilg], Thanks for running those manual tests. Those were the same tests that I was running.\n\nI discovered that this was not something introduced by this patch, but it happens in trunk as well. Also, I discovered that it doesn't happen for a cluster with 1, 2, or 3 nodemanagers, but when the 4th nodemanager is added, it starts happening.\n\nAt any rate, the good news is that this is not a problem with your patch. I have a couple of more things I want to check out on the patch before my review is complete. I'll get back to you soon.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-06T20:00:23.296+0000","updated":"2017-02-06T20:00:23.296+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15855123","id":"15855123","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"OK. Latest patch looks good.\n\n[~sunilg], [~leftnoteasy], are you planning on backporting to branch-2 / branch-2.8?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-07T01:34:23.682+0000","updated":"2017-02-07T01:34:23.682+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15855144","id":"15855144","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks [~eepayne] for the review.\nYes, I would like to backport this change to branch-2 as well. However I am not very sure whether we can put to branch-2.8 since RC cut is happening. Could you or [~leftnoteasy] confirm whether its safe to go to branch-2.8 since RC cut is on the way.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-07T01:56:21.590+0000","updated":"2017-02-07T01:56:21.590+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15855415","id":"15855415","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Cool, thanks [~eepayne]. I just triggered another Jenkins build to run, if everything goes fine, I will commit the patch tomorrow.\n\nSince we're close to 2.8 release now, let's try to see if this patch can go to 2.8.1 or not after 2.8.0 release.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-02-07T06:23:27.756+0000","updated":"2017-02-07T06:23:27.756+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15855629","id":"15855629","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"| (x) *{color:red}-1 overall{color}* |\n\\\\\n\\\\\n|| Vote || Subsystem || Runtime || Comment ||\n| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 21s{color} | {color:blue} Docker mode activated. {color} |\n| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |\n| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 7 new or modified test files. {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 40s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 15s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  2s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |\n| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |\n| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 31s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 19 new + 1024 unchanged - 19 fixed = 1043 total (was 1043) {color} |\n| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 11s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |\n| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  4s{color} | {color:green} the patch passed {color} |\n| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 19s{color} | {color:green} the patch passed {color} |\n| {color:red}-1{color} | {color:red} unit {color} | {color:red} 40m 42s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |\n| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 18s{color} | {color:green} The patch does not generate ASF License warnings. {color} |\n| {color:black}{color} | {color:black} {color} | {color:black} 63m 19s{color} | {color:black} {color} |\n\\\\\n\\\\\n|| Reason || Tests ||\n| Failed junit tests | hadoop.yarn.server.resourcemanager.TestRMAdminService |\n\\\\\n\\\\\n|| Subsystem || Report/Notes ||\n| Docker |  Image:yetus/hadoop:a9ad5d6 |\n| JIRA Issue | YARN-5889 |\n| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12850780/YARN-5889.0010.patch |\n| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |\n| uname | Linux 0f4409d0750a 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |\n| Build tool | maven |\n| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |\n| git revision | trunk / d88497d |\n| Default Java | 1.8.0_121 |\n| findbugs | v3.0.0 |\n| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/14841/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n| unit | https://builds.apache.org/job/PreCommit-YARN-Build/14841/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |\n|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/14841/testReport/ |\n| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |\n| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/14841/console |\n| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |\n\n\nThis message was automatically generated.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-07T09:23:55.741+0000","updated":"2017-02-07T09:23:55.741+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15855681","id":"15855681","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Test case failure is not related to this patch. It looks like an intermittent issue and is tracked via YARN-5652.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-07T10:08:41.104+0000","updated":"2017-02-07T10:08:41.104+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15856400","id":"15856400","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"[~leftnoteasy]\nbq. Since we're close to 2.8 release now, let's try to see if this patch can go to 2.8.1 or not after 2.8.0 release.\nSince the branch-2.8.0 branch has already been created, wouldn't it be safe to go into branch-2.8(.1)? Or are you concerned that if they need to pull more things into the 2.8.0 branch before the RC, this patch may conflict?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-07T17:46:17.646+0000","updated":"2017-02-07T17:46:17.646+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15856463","id":"15856463","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"We checked with Junping and there are not major changes related to this area which is pending. So we should be good to go for 2.8.1. I ll first give a branch-2 patch which has some conflicts now. After that, 2.8 patch could be backported.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-07T18:15:52.882+0000","updated":"2017-02-07T18:15:52.882+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15856489","id":"15856489","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"[~eepayne], [~sunilg],\n\nI would rather prefer to backport this patch once we have user-limit preemption support. This is just a refactoring patch with minor behavior changes, it should be backport once we get whole feature ready (intra-queue preemption for user limit). We can discuss more once we get that stage. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-02-07T18:21:43.268+0000","updated":"2017-02-07T18:21:43.268+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15859956","id":"15859956","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"body":"Committed to trunk, thanks [~sunilg] and thanks reviews from [~eepayne]/[~jlowe].","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=leftnoteasy","name":"leftnoteasy","key":"leftnoteasy","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=leftnoteasy&avatarId=18647","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=leftnoteasy&avatarId=18647","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=leftnoteasy&avatarId=18647","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=leftnoteasy&avatarId=18647"},"displayName":"Wangda Tan","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-02-09T18:27:40.879+0000","updated":"2017-02-09T18:27:40.879+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15859996","id":"15859996","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"body":"SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11227 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11227/])\nYARN-5889. Improve and refactor user-limit calculation in Capacity (wangda: rev 5fb723bb77722d41df6959eee23e1b0cfeb5584e)\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/dao/CapacitySchedulerLeafQueueInfo.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSParentQueue.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ActiveUsersManager.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestCapacitySchedulerNodeLabelUpdate.java\n* (add) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractUsersManager.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestNodeLabelContainerAllocation.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityHeadroomProvider.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicyMockFramework.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestApplicationLimitsByPartition.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CSQueue.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/Queue.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestApplicationLimits.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/TestSchedulerApplicationAttempt.java\n* (add) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/UsersManager.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java\n* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestLeafQueue.java\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hudson","name":"hudson","key":"hudson","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Hudson","active":true,"timeZone":"Etc/UTC"},"created":"2017-02-09T18:56:29.930+0000","updated":"2017-02-09T18:56:29.930+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15860851","id":"15860851","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"body":"Thanks for thorough reviews and commit [~leftnoteasy] , and thanks for the detailed review from [~eepayne] and [~jlowe]. Really appreciate the same.\nI am working on user-limit preemption poc based on this patch and will shortly upload in preemption jira.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=sunilg","name":"sunilg","key":"sunilg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sunil Govindan","active":true,"timeZone":"Asia/Kolkata"},"created":"2017-02-10T07:08:03.632+0000","updated":"2017-02-10T07:08:03.632+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/15979468","id":"15979468","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"body":"Re-resolving as \"fixed\" rather than \"resolved\" so it shows properly in the release notes.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=andrew.wang","name":"andrew.wang","key":"andrew.wang","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=andrew.wang&avatarId=19230","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andrew.wang&avatarId=19230","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andrew.wang&avatarId=19230","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andrew.wang&avatarId=19230"},"displayName":"Andrew Wang","active":true,"timeZone":"America/Los_Angeles"},"created":"2017-04-21T22:01:20.724+0000","updated":"2017-04-21T22:01:20.724+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/13021186/comment/16084143","id":"16084143","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"body":"I cherry-picked this commit to branch-2 as a prereq for YARN-2113","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=eepayne","name":"eepayne","key":"eepayne","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10444","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10444","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10444","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10444"},"displayName":"Eric Payne","active":true,"timeZone":"Etc/UTC"},"created":"2017-07-12T15:26:36.600+0000","updated":"2017-07-12T15:26:36.600+0000"}],"maxResults":95,"total":95,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/YARN-5889/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i36eof:"}}