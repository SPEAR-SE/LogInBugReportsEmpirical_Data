{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12706637","self":"https://issues.apache.org/jira/rest/api/2/issue/12706637","key":"YARN-1902","fields":{"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12313722","id":"12313722","key":"YARN","name":"Hadoop YARN","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12313722&avatarId=15135","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12313722&avatarId=15135","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12313722&avatarId=15135","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12313722&avatarId=15135"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10292","id":"10292","description":"Scalable Distributed Computing","name":"Hadoop"}},"fixVersions":[],"aggregatetimespent":null,"resolution":null,"customfield_12312322":null,"customfield_12310220":"2014-04-06T16:03:39.011+0000","customfield_12312520":null,"customfield_12312323":null,"customfield_12312521":"Thu May 19 13:44:48 UTC 2016","customfield_12310420":"384960","customfield_12312320":null,"customfield_12310222":null,"customfield_12312321":null,"resolutiondate":null,"workratio":-1,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312923":null,"customfield_12312326":null,"customfield_12312920":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312921":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/YARN-1902/watchers","watchCount":28,"isWatching":false},"created":"2014-04-04T14:51:37.659+0000","customfield_12310192":null,"customfield_12310191":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":["client"],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"3.0","customfield_12312331":null,"customfield_12312332":null,"timeestimate":null,"aggregatetimeoriginalestimate":null,"customfield_12311120":null,"customfield_12312330":null,"versions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12325051","id":"12325051","description":"2.2.0 release","name":"2.2.0","archived":false,"released":true,"releaseDate":"2013-10-15"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12325256","id":"12325256","description":"2.3.0 release","name":"2.3.0","archived":false,"released":true,"releaseDate":"2014-02-20"},{"self":"https://issues.apache.org/jira/rest/api/2/version/12326142","id":"12326142","description":"2.4.0 release","name":"2.4.0","archived":false,"released":true,"releaseDate":"2014-04-07"}],"issuelinks":[{"id":"12467121","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12467121","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"outwardIssue":{"id":"12514293","key":"YARN-110","self":"https://issues.apache.org/jira/rest/api/2/issue/12514293","fields":{"summary":"AM releases too many containers due to the protocol","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133}}}},{"id":"12411661","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12411661","type":{"id":"10030","name":"Reference","inward":"is related to","outward":"relates to","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"},"inwardIssue":{"id":"12785136","key":"SLIDER-829","self":"https://issues.apache.org/jira/rest/api/2/issue/12785136","fields":{"summary":"when containers are allocated, explicitly cancel the request","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/1","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/blocker.svg","name":"Blocker","id":"1"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/7","id":"7","description":"The sub-task of the issue","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype","name":"Sub-task","subtask":true,"avatarId":21146}}}}],"customfield_12312339":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"customfield_12312337":null,"customfield_12312338":null,"updated":"2016-05-20T21:53:05.177+0000","customfield_12312335":null,"customfield_12312336":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/1","description":"The issue is open and ready for the assignee to start work on it.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/open.png","name":"Open","id":"1","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/2","id":2,"key":"new","colorName":"blue-gray","name":"To Do"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12319413","id":"12319413","name":"client"}],"timeoriginalestimate":null,"description":"Regarding AMRMClientImpl\n\nScenario 1:\nGiven a ContainerRequest x with Resource y, when addContainerRequest is called z times with x, allocate is called and at least one of the z allocated containers is started, then if another addContainerRequest call is done and subsequently an allocate call to the RM, (z+1) containers will be allocated, where 1 container is expected.\n\nScenario 2:\nNo containers are started between the allocate calls. \n\nAnalyzing debug logs of the AMRMClientImpl, I have found that indeed a (z+1) are requested in both scenarios, but that only in the second scenario, the correct behavior is observed.\n\nLooking at the implementation I have found that this (z+1) request is caused by the structure of the remoteRequestsTable. The consequence of Map<Resource, ResourceRequestInfo> is that ResourceRequestInfo does not hold any information about whether a request has been sent to the RM yet or not.\n\nThere are workarounds for this, such as releasing the excess containers received.\n\nThe solution implemented is to initialize a new ResourceRequest in ResourceRequestInfo when a request has been successfully sent to the RM.\n\nThe patch includes a test in which scenario one is tested.","customfield_10010":null,"timetracking":{},"customfield_12312026":null,"customfield_12312023":null,"customfield_12310320":null,"customfield_12312024":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12638692","id":"12638692","filename":"YARN-1902.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"created":"2014-04-04T15:23:37.317+0000","size":17303,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12638692/YARN-1902.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12638928","id":"12638928","filename":"YARN-1902.v2.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"created":"2014-04-06T22:04:37.235+0000","size":17259,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12638928/YARN-1902.v2.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12638931","id":"12638931","filename":"YARN-1902.v3.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"created":"2014-04-06T23:51:52.621+0000","size":17604,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12638931/YARN-1902.v3.patch"}],"aggregatetimeestimate":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"385227","customfield_12312823":null,"summary":"Allocation of too many containers when a second request is done with the same resource capability","creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"subtasks":[],"customfield_12310291":null,"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"customfield_12310290":null,"aggregateprogress":{"progress":0,"total":0},"customfield_12311024":null,"environment":null,"customfield_12313520":null,"customfield_12311020":null,"duedate":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/13961449","id":"13961449","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12638692/YARN-1902.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-YARN-Build/3517//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-YARN-Build/3517//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-04-06T16:03:39.011+0000","updated":"2014-04-06T16:03:39.011+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/13961545","id":"13961545","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"body":"removed a comment which was used during debugging.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"created":"2014-04-06T22:04:37.240+0000","updated":"2014-04-06T22:04:37.240+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/13961555","id":"13961555","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12638928/YARN-1902.v2.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-YARN-Build/3519//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-YARN-Build/3519//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-04-06T22:43:48.808+0000","updated":"2014-04-06T22:43:48.808+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/13961574","id":"13961574","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"body":"Moved the managing of administration of resource requests to the critical section before the allocate. This is better because the asks will be retried anyway, and calls to addContainerRequest right after allocate won't be added to the previous request.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"created":"2014-04-06T23:51:52.626+0000","updated":"2014-04-06T23:51:52.626+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/13961588","id":"13961588","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:green}+1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12638931/YARN-1902.v3.patch\n  against trunk revision .\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-YARN-Build/3520//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-YARN-Build/3520//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-04-07T00:33:35.002+0000","updated":"2014-04-07T00:33:35.002+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/13967251","id":"13967251","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"body":"Is this the right way to approach this issue or should there be a more thorough analysis of the current implementation?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"created":"2014-04-11T23:49:32.578+0000","updated":"2014-04-11T23:49:32.578+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14144633","id":"14144633","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ysobale","name":"ysobale","key":"ysobale","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yogesh Sobale","active":true,"timeZone":"Etc/UTC"},"body":"This Fix will be available in 2.5.0 onwards ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ysobale","name":"ysobale","key":"ysobale","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yogesh Sobale","active":true,"timeZone":"Etc/UTC"},"created":"2014-09-23T10:11:41.496+0000","updated":"2014-09-23T10:11:41.496+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14144653","id":"14144653","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12638931/YARN-1902.v3.patch\n  against trunk revision 7aa667e.\n\n    {color:green}+1 @author{color}.  The patch does not contain any @author tags.\n\n    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.\n\n    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.\n\n    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.\n\n    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.\n\n    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.\n\n    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.\n\n    {color:red}-1 core tests{color}.  The following test timeouts occurred in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client:\n\norg.apache.hadoop.yarn.client.TestResourceTrackerOnHA\norg.apache.hadoop.yarn.client.TestApplicationMasterServiceOnHA\norg.apache.hadoop.yarn.client.api.impl.TestAMRMClientOnRMRestart\n\n    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.\n\nTest results: https://builds.apache.org/job/PreCommit-YARN-Build/5083//testReport/\nConsole output: https://builds.apache.org/job/PreCommit-YARN-Build/5083//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-09-23T10:54:04.008+0000","updated":"2014-09-23T10:54:04.008+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14188188","id":"14188188","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ysobale","name":"ysobale","key":"ysobale","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yogesh Sobale","active":true,"timeZone":"Etc/UTC"},"body":"Can some please update ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ysobale","name":"ysobale","key":"ysobale","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yogesh Sobale","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-29T09:50:43.788+0000","updated":"2014-10-29T09:50:43.788+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14188190","id":"14188190","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ysobale","name":"ysobale","key":"ysobale","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yogesh Sobale","active":true,"timeZone":"Etc/UTC"},"body":"Can someone please update ?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=ysobale","name":"ysobale","key":"ysobale","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Yogesh Sobale","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-29T09:51:04.576+0000","updated":"2014-10-29T09:51:04.576+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14188516","id":"14188516","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"body":"bq. Given a ContainerRequest x with Resource y, when addContainerRequest is called z times with x, allocate is called and at least one of the z allocated containers is started, then if another addContainerRequest call is done and subsequently an allocate call to the RM, (z+1) containers will be allocated, where 1 container is expected.\n\nFirstly, I am not sure if the same ContainerRequest object can be passed multiple times in addContainerRequest. It should be different objects each time (even if they point to the same resource). This might have something to do with the internal book-keeping done for matching requests.\n\nSecondly, after z requests are made and 1 allocation is received then z-1 requests remain. If you are using AMRMClientImpl then its your (users) responsibility to call removeContainerRequest() for the request that was matched to this container. The AMRMClient does not know which of your z requests could be assigned to this container. So in the general case, it cannot automatically remove a request from the internal table because it does not know which request to remove. If the javadocs dont clarify these semantics then we can improve the javadocs.\n\nThirdly, the protocol between the AMRMClient and the RM has an inherent race. So if the client had earlier asked for z containers and in the next heartbeat reduces that to z-1, the RM may actually return z containers to it because it had already allocated them to this client before the client updated the RM with the new value.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-29T16:24:04.161+0000","updated":"2014-10-29T16:24:04.161+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14212100","id":"14212100","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"body":"The scenarios are such that ContainerRequest is a separate object with each addContainerRequest call.\n\nThe point is that the user does not want its previous requests to be undone, but to do an additional request, while not yet having received all the 12 containers. \n\nLet's say for Scenario 1 that z = 12\n12 containers are requested, then asynchronously you start an allocated container, after this, 1 extra container is requested. However instead of 1 extra container being requested, 13 containers will be requested. This - as far as I can see - does not necessarily involve the RM and could be solved at the client side's internal bookkeeping of requests, which is what the patch is trying to show.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"created":"2014-11-14T10:35:33.280+0000","updated":"2014-11-14T10:35:33.280+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14228030","id":"14228030","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"body":"If all the requests are for the same location (say star) then the client needs to sends all outstanding requests to the RM. The AM-RM protocol is not a delta protocol. Sending deltas will not work because the RM expects all requests at a given location to be presented for every update. It simply sets that value from the request to its internal book-keeping objects (vs performing an increment for the \"new\" request).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-11-28T01:46:12.082+0000","updated":"2014-11-28T01:46:12.082+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14228780","id":"14228780","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12638931/YARN-1902.v3.patch\n  against trunk revision 1556f86.\n\n    {color:red}-1 patch{color}.  The patch command could not apply the patch.\n\nConsole output: https://builds.apache.org/job/PreCommit-YARN-Build/5951//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2014-11-29T14:50:45.855+0000","updated":"2014-11-29T14:50:45.855+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14377886","id":"14377886","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"body":"{color:red}-1 overall{color}.  Here are the results of testing the latest attachment \n  http://issues.apache.org/jira/secure/attachment/12638931/YARN-1902.v3.patch\n  against trunk revision 3ca5bd1.\n\n    {color:red}-1 patch{color}.  The patch command could not apply the patch.\n\nConsole output: https://builds.apache.org/job/PreCommit-YARN-Build/7090//console\n\nThis message is automatically generated.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hadoopqa","name":"hadoopqa","key":"hadoopqa","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=hadoopqa&avatarId=10393","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=hadoopqa&avatarId=10393","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=hadoopqa&avatarId=10393","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=hadoopqa&avatarId=10393"},"displayName":"Hadoop QA","active":true,"timeZone":"Etc/UTC"},"created":"2015-03-24T13:50:35.054+0000","updated":"2015-03-24T13:50:35.054+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14535164","id":"14535164","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zjshen","name":"zjshen","key":"zjshen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10443","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10443","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10443","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10443"},"displayName":"Zhijie Shen","active":true,"timeZone":"America/Los_Angeles"},"body":"[~stau-tudelft], assigned this jira to you as you've contributed the patch. However, the patch doesn't apply any more. Moreover, would you please take a look at Bikas' latest comment? It seems that the API is not designed for sending the delta, after the container is allocated, you need to remove the request explicitly. Back to your example, your 1st container is allocated, you need to remove one request before next allocate call, to make sure you're going to ask for 11 more containers, but not 12.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zjshen","name":"zjshen","key":"zjshen","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10443","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10443","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10443","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10443"},"displayName":"Zhijie Shen","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-08T18:22:04.523+0000","updated":"2015-05-08T18:22:04.523+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14546209","id":"14546209","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mding","name":"mding","key":"mding","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"MENG DING","active":true,"timeZone":"America/Toronto"},"body":"I was almost going to log the same issue when I saw this thread (and also YARN-3020) :-).\n\nAfter reading all the discussions, and after reading the related code, I still believe this is a bug.\n\nI understand what [~bikassaha] has said that the AM-RM protocol is NOT a delta protocol, and that currently user (i.e., ApplicationMaster) is responsible for calling removeContainerRequest() after receiving an allocation, but consider the follow simple modification to the packaged *distributedshell* application:\n\n{code:title=ApplicationMaster.java|borderStyle=solid}\n--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java\n+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java\n@@ -805,6 +805,8 @@ public void onContainersAllocated(List<Container> allocatedContainers) {\n         // as all containers may not be allocated at one go.\n         launchThreads.add(launchThread);\n         launchThread.start();\n+        ContainerRequest containerAsk = setupContainerAskForRM();\n+        amRMClient.removeContainerRequest(containerAsk);\n       }\n     }\n{code}\n\nThe code simply removes a container request after successfully receiving an allocated container in the ApplicationMaster. When you submit this application by specifying, say, 3 containers on the CLI, you will sometimes get 4 containers allocated (not counting the AM container)! \n\n{code}\nroot@node2:~# hadoop org.apache.hadoop.yarn.applications.distributedshell.Client -jar /usr/local/hadoop/share/hadoop/yarn/hadoop-yarn-applications-distributedshell-3.0.0-SNAPSHOT.jar -shell_command \"sleep 100000\" -num_containers 3 -timeout 200000000\n{code}\n{code}\nroot@node2:~# yarn container -list appattempt_1431531743796_0015_000001\n15/05/15 20:49:01 INFO client.RMProxy: Connecting to ResourceManager at node2/10.211.55.102:8032\n15/05/15 20:49:01 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nTotal number of containers :5\n                  Container-Id            Start Time             Finish Time                   State                    Host       Node Http Address                                 LOG-URL\ncontainer_1431531743796_0015_01_000005  Fri May 15 20:44:12 +0000 2015                   N/A                 RUNNING             node3:50093        http://node3:8042    http://node3:8042/node/containerlogs/container_1431531743796_0015_01_000005/root\ncontainer_1431531743796_0015_01_000001  Fri May 15 20:44:06 +0000 2015                   N/A                 RUNNING             node3:50093        http://node3:8042    http://node3:8042/node/containerlogs/container_1431531743796_0015_01_000001/root\ncontainer_1431531743796_0015_01_000002  Fri May 15 20:44:10 +0000 2015                   N/A                 RUNNING             node3:50093        http://node3:8042    http://node3:8042/node/containerlogs/container_1431531743796_0015_01_000002/root\ncontainer_1431531743796_0015_01_000004  Fri May 15 20:44:11 +0000 2015                   N/A                 RUNNING             node3:50093        http://node3:8042    http://node3:8042/node/containerlogs/container_1431531743796_0015_01_000004/root\ncontainer_1431531743796_0015_01_000003  Fri May 15 20:44:10 +0000 2015                   N/A                 RUNNING             node4:41128        http://node4:8042    http://node4:8042/node/containerlogs/container_1431531743796_0015_01_000003/root\n{code}\n\nThe *fundamental* problem here, I believe, is that the AMRMClient maintains an internal request table *remoteRequestsTable* that keeps track of *total* container requests (i.e., including container requests that have been satisfied, and that are not yet satisfied):\n\n{code:title=AMRMClient.java|borderStyle=solid}\nprotected final \n  Map<Priority, Map<String, TreeMap<Resource, ResourceRequestInfo>>>\n    remoteRequestsTable =\n    new TreeMap<Priority, Map<String, TreeMap<Resource, ResourceRequestInfo>>>();\n{code}\n\nHowever, the corresponding table *requests* at the scheduler side (inside AppSchedulingInfo.java) keeps track of *outstanding* container requests (i.e., container requests that are not yet satisfied):\n\n{code:title=AppSchedulingInfo.java|borderStyle=solid}\n  final Map<Priority, Map<String, ResourceRequest>> requests =\n    new ConcurrentHashMap<Priority, Map<String, ResourceRequest>>();\n{code}\n\nEvery time an allocation is successfully made, the decResourceRequest() or decrementOutstanding() call will update the *requests* table so that it only contains outstanding requests, but unfortunately, every time an ApplicationMaster heartbeat comes, the same *requests* table is updated by the updateResourceRequests() call with the total requests coming from AMRMClient.\n\nThis inconsistent view of total requests from AMRMClient side, and the outstanding requests from the Scheduler side, in my opinion, is very confusing to say the least. \n\nI see that a solution has already been proposed by [~wangda] in YARN-3020, which I think is the correct thing to do:\n{quote}\nmaybe we should add a default implementation to deduct pending resource requests by prioirty/resource-name/capacity of allocated containers automatically (User can disable this default behavior, implement their own logic to deduct pending resource requests.)\n{quote}\n\nThis solution will make *remoteRequestsTable* in AMRMClient only keep track of outstanding container requests, which is then consistent with the *requests* table at the Scheduler side.\n\nAny comments or thoughts? We are currently investigating YARN-1197, and are faced with a similar issue with properly tracking container resource increase requests at both client and server side.\n\nThanks,\nMeng ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mding","name":"mding","key":"mding","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"MENG DING","active":true,"timeZone":"America/Toronto"},"created":"2015-05-15T21:39:20.004+0000","updated":"2015-05-15T21:39:20.004+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14546377","id":"14546377","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"body":"The AMRMClient was not written to automatically remove requests because it does not know which requests will be matched to allocated containers. The explicit contract is for users of AMRMClient to remove requests that have been matched to containers.\n\nIf we change that behavior to automatically remove requests then it may lead to issues where 2 entities are removing requests. 1) user 2) AMRMClient. So that change should only be made in a different version of AMRMClient or else existing users will break.\n\nIn the worst case, if the AMRMClient (automatically) removes the wrong request then the application will hang because the RM will not provide it the container that is needed. Not automatically removing the request has the downside of getting additional containers that need to be released by the application. We chose excess containers over hanging for the original implementation. \n\nExcess containers should happen rarely because the user controls when AMRMClient heartbeats to the RM and can do that after having removed all matched requests, so that the remote request table reflects the current state of outstanding requests. There may still be a race condition on the RM side that gives more containers. Excess containers can happen more often with AMRMClientAsync, because it heartbeats at a regular schedule and can send more requests than really outstanding if the heartbeat goes out before the user has removed the matched requests.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-15T23:29:46.256+0000","updated":"2015-05-15T23:29:46.256+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14546391","id":"14546391","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinodkv","name":"vinodkv","key":"vinodkv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinod Kumar Vavilapalli","active":true,"timeZone":"America/Los_Angeles"},"body":"This was discussed multiple times before.\n\nTwo kinds of races can happen. A resource-table deduction happens when\n # allocated containers are already sitting in the RM (tracked at YARN-110)\n # allocated containers are already sitting in the client library\n\nSeems like this JIRA is talking about both (1) and (2).\n\nThe dist-shell example above sounds like it could be because of (1).\n\nRe (2), as Bikas says, the notion of forcing apps to deduct requests after a successful allocation (using AMRMClient.removeContainerRequest()) was introduced because the library clearly doesn't have an idea of which ResourceRequest to deduct from. [~leftnoteasy] mentioned offline that we could at-least deduct the count against the over-all number (ANY request) for a given priority. /cc [~bikassaha]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinodkv","name":"vinodkv","key":"vinodkv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinod Kumar Vavilapalli","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-15T23:41:35.272+0000","updated":"2015-05-15T23:41:35.272+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14546418","id":"14546418","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinodkv","name":"vinodkv","key":"vinodkv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinod Kumar Vavilapalli","active":true,"timeZone":"America/Los_Angeles"},"body":"bq. Wangda Tan mentioned offline that we could at-least deduct the count against the over-all number (ANY request) for a given priority.\nFurther thought tells me this is not desired in some cases as well.\n\nTake the following example.\n\nUser originally wants: 1 container on H1, 1 container on H2, and 2 containers on R1 (rack). The request table becomes\n|H1|1|\n|H2|1|\n|R1|2|\n|*|4|\n\nNow assuming RM returns a container on R2 (rack), auto-decrementing the request table will make it\n|H1|1|\n|H2|1|\n|R1|2|\n|*|3|\n\nBut user may actually want something like the following. This depends on what the user preferences are w.r.t scheduling.\n|H1|0|\n|H2|1|\n|R1|2|\n|*|3|","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vinodkv","name":"vinodkv","key":"vinodkv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vinod Kumar Vavilapalli","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-16T00:12:26.964+0000","updated":"2015-05-16T00:12:26.964+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14546421","id":"14546421","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"body":"Yes. And then the RM may give a container on H1 which is not useful for the app. If we again auto-decrement and release the container then we end up with 2 outstanding requests and the job will hang because it needs 3 containers.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-16T00:15:18.413+0000","updated":"2015-05-16T00:15:18.413+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14548480","id":"14548480","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mding","name":"mding","key":"mding","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"MENG DING","active":true,"timeZone":"America/Toronto"},"body":"Thanks [~bikassaha] and [~vinodkv] for the education and background info. Really helpful. I can now appreciate that there is not a straightforward solution to this problem.\n\nOriginally I was coming from a pure user experience point of view, where I was thinking that if I ever want to use removeContainerRequest, it should only be because that I need to cancel previous add requests. Yes I may still get the number of containers from the previous requests, but that is understandable. However, I would have never thought that I still need to do removeContainerRequest to remove requests of matched containers in order to make the internal bookkeeping of AMRMClient correct. Why should a user worry about these things?\n\nAfter reading the comments, I start to think that even if we were able to figure out which ResourceRequest to deduct from and automatically deduct it at the Client, it still won't solve race condition 1 (i.e., allocated containers are sitting in RM).\n\nSo rather than changing the client, can we not do something at the RM side? For example, in AppSchedulingInfo:\n1. Maintain a table for total request *only*. The updateResourceRequests() call will update this table to reflect the total requests from the client (matching the client side remoteRequestsTable).\n2. Maintain a table for requests that have been satisfied. Every time a successful allocation is made for this application, this table is updated.\n3. The difference between table 1 and table 2 will be the outstanding resource requests. This table is updated at every updateResourceRequests() and every successful allocation. Of course proper synchronization needs to be taken care of.\n4. The scheduling will be made based on the table 3 (i.e., the outstanding request table). \n\nDo you think if this is something worth considering?\n\nThanks a lot in advance.\nMeng","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mding","name":"mding","key":"mding","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"MENG DING","active":true,"timeZone":"America/Toronto"},"created":"2015-05-18T18:36:35.033+0000","updated":"2015-05-18T18:36:35.033+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14548492","id":"14548492","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"body":"An alternate approach that we tried in Apache Tez is to wrap a TaskScheduler around the AMRMClient that would take request from the application and do the matching internally. Since it would know the matching, it could automatically remove the matched requests also. (Still does not remove the race condition but it cleaner wrt to the user as an API). The TaskScheduler was written to be independent of Tez code so that we could contribute it to YARN as a library, however we did not find time to do so. Now that code has evolved quite a bit but the original, well-tested code could still be extracted from Tez 0.1 branch and contributed to YARN if someone is interested in doing that work.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=bikassaha","name":"bikassaha","key":"bikassaha","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=bikassaha&avatarId=29845","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bikassaha&avatarId=29845","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bikassaha&avatarId=29845","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bikassaha&avatarId=29845"},"displayName":"Bikas Saha","active":true,"timeZone":"America/Los_Angeles"},"created":"2015-05-18T18:49:05.243+0000","updated":"2015-05-18T18:49:05.243+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14550462","id":"14550462","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"body":"All solutions will still be workarounds unless the protocol is revised. \n\nAnother workaround would be to keep track of the requests by counting the number of requested containers and not sending new container requests to RM until the previous batch has been satisfied.\n\nConsider the following scenario in the following order:\n1. addContainerRequest is called n times and at each call the expectedContainers counter is incremented, the container request is added to a list of currentContainerRequests. \n2. allocate is called, a boolean waitingForResponse is set to true when ask.size > 0 which indicates container requests have been made.\n3. addContainerRequest is called m times, since waitingForResponse is true, the request will be added to a list of queuedContainerRequests, the asks will be added to asksQueue and not asks. \n4. allocate is called, n - 1 containers are returned, expectedContainers will be decremented by n - 1.\n5. allocate is called again, 1 container is returned, expectedContainers will be  0, \nwaitingForResponse is set to false, \nfor each currentContainerRequest removeContainerRequest,\ncurrentContainerRequests = queuedContainerRequests, \nasks = asksQueue, \nexpectedContainers = queuedContainerRequests.size\n6. allocate is called and (3) will be submitted. \n\nHere, the satisfied container requests will be correctly removed from the table without user intervention and seems to apply to common use cases, excess containers now will only happen when containerRequest is removed after an allocate. But since there is no guarantee that it will be removed in time at the RM, it doesn't seem to be very significant. \n\nOne problem here is that the expectedContainers will be invalid when you do the following: \nblacklist all the possible nodes, add container request, allocate,  remove blacklist, add container request, allocate.\nThis would make the client wait forever for a response of the first request as it will never be satisfied.\n\nI'm not sure what else can be done by users apart from extending the AMRMClientImpl to fit their use case.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=stau-tudelft","name":"stau-tudelft","key":"stau-tudelft","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sietse T. Au","active":true,"timeZone":"Europe/Amsterdam"},"created":"2015-05-19T13:48:51.736+0000","updated":"2015-05-19T13:48:51.736+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/14552375","id":"14552375","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mding","name":"mding","key":"mding","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"MENG DING","active":true,"timeZone":"America/Toronto"},"body":"I have been experimenting with the idea of changing AppSchedulingInfo to maintain a total request table, a fulfilled allocation table, and then calculate the difference of the two tables as the real outstanding request table used for scheduling. All is fine until I realized that this cannot handle one use case where a AMRMClient, right before sending the allocation heartbeat, removes all container requests, and add new container requests at the same priority and location (possibly with different resource capability).  AppSchedulingInfo does not know about this, and may not treat the newly added container requests as outstanding requests.\n\nI agree that currently I do not see a clean solution without affecting backward compatibility. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mding","name":"mding","key":"mding","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"MENG DING","active":true,"timeZone":"America/Toronto"},"created":"2015-05-20T14:24:24.268+0000","updated":"2015-05-20T14:24:24.268+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12706637/comment/15291103","id":"15291103","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"body":"Sorry for jumping in late, but I'd like to keep moving this forward.  There are a significant number of wasted container allocations as apps adjust their resource requests, and that adds unnecessary load to the RM and reduces cluster efficiency.\n\nIMHO without a protocol overhaul the fix has to come from the RM side if we want to minimize the excess containers.  The inherent problem is that the AM is adjusting its resource request _without_ the knowledge of what the RM has already allocated since the last heartbeat.  Therefore if the RM sees an update to the AM ask during a heartbeat and that same heartbeat's response has containers already allocated it needs to adjust the AM's ask by the containers that are in that response.  For example:\n# AM asks for 5 containers\n# On a subsequent heartbeat the RM responds with 1 container\n# On the next heartbeat the AM adjusts its ask to 4 containers, but the RM has already allocated the remaining 4 containers from the original ask.\n# The RM needs to interpret the new ask not as 4 more containers but as 0 containers since 4 of them are already satisfied in the current heartbeat's response.\n\nIf apps were well behaved, I think we could get most of the benefit by simply adjusting the new total (ANY) ask update by the number of containers in the same heartbeat's response.  It's true that an AM could get containers in that response that don't match its request, but a well-behaved app should realize that any container received counts against the total (ANY) resource request.  Therefore if the app throws away the container but still needs another it must update at least the total container request to ask for a replacement.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jlowe","name":"jlowe","key":"jlowe","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jason Lowe","active":true,"timeZone":"America/Chicago"},"created":"2016-05-19T13:44:48.948+0000","updated":"2016-05-19T13:44:48.948+0000"}],"maxResults":26,"total":26,"startAt":0},"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/YARN-1902/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"customfield_12311820":"0|i1ubhr:"}}