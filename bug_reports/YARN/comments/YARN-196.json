[When NM is started before RM, I think NM gets *YarnRemoteException* (due to network unreachability) while trying to register with RM. 

However when RM goes down, NM tries forever.  I think, NM should retry only *yarn.nm.liveness-monitor.expiry-interval-ms* amount of time, and then it should get shudown, as there is no use of retrying after this amount time.

any comments?, Currently, If NM starts before RM, then NM gets shutdown due to registration failure.  But I *think*, an NM can start before RM, so instead of lettting NM down, it would be better to retry RM, till it is up.
 
The same has been provided as patch.  Please let me know, whether this approach is OK or not.
 
And moreover second case, retrying RM continuously, after RM and NM started and RM's unavailabilty, seems
  correct. , Re-trying for a certain number of times before giving up seems reasonable.,   Thanks Arun for your input.  Is it ok to introduce configuration parameters with default values like
  
  ||Configuration Parameter||Default Value||
  |NM_PREFIX + resourcemanager.retry.count|10|
  |NM_PREFIX + resourcemanager.retry.interval.ms|1000|, Met with the issue today while booting up cdh4b2 in our cluster  ....  :-(, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12568507/YARN-196.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager:

                  org.apache.hadoop.yarn.server.nodemanager.TestNodeStatusUpdater

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/396//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/396//console

This message is automatically generated., Fix the test failure.
testNMShutdownForRegistrationFailure will cover this update, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12568531/YARN-196.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/397//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/397//console

This message is automatically generated., Xuan, some comments:
  - testNMShutdownForRegistrationFailure tests for an explicit command from the RM telling the NM to shut down. 
  - failing within 10 seconds seems too quick. The rpc layer internally retries for a certain time period. From the NM layer, we should probably have a total time length defined - say 15 mins and retry after 30 seconds or so within that time period. 
  - also someone should be able to set the time period to -1 to disable the upper bound and retry forever if needed.
  - use same conventions as used elsewhere when naming variables - rm_Retry_interval_ms does not confirm to the standards defined in the class.
  - "LOG.debug("Fail to connect to RM");" - change to error and log the exception stack trace unless it is being caught elsewhere and being printed. It would also help to log how many retries were attempted before failing out.
  - in the start() function, there is an AvroRuntimeException being thrown - we should replace that with YarnException or an appropriate runtime exception. 
  - isRMStarted var is not needed - a simple break in the loop if the registration is done should suffice. 
  - please remove the space in "rm_Retry_Count --;"
  - the debug log message at the end of the loop should be set to use WARN level. Also, please re-phrase it for more clarity - something along the lines of Retrying connecting to RM, current no. of failed attempts ...
  - the current patch seems to be catching all exceptions. This will cause a problem in the case where the RM explicitly asks the NM to shutdown - maybe it makes sense to move the retry logic into the registerWithRM function?
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12568891/YARN-196.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/401//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/401//console

This message is automatically generated., More comments:
  - Please restrict lines to 80 chars. 
  - boolean waitForEver = (rmWaitMS==-1)? ... could be re-written as "boolean waitForEver = (rmWaitMS == -1);"
  - we could change WAIT_MS and RETRY_INTERVAL_MS to WAIT_SECS and RETRY_PERIOD_SECS as the normal scale used is seconds? 

{quote}
the current patch seems to be catching all exceptions. This will cause a problem in the case where the RM explicitly asks the NM to shutdown - maybe it makes sense to move the retry logic into the registerWithRM function?
{quote}

The above comment for patch-2 does not seem to have been addressed in the latest patch. 

{code}
+          String errorMessage = "\nFailed to Connect to RM, no. of failed attemps is "+rmRetryCount;
+          LOG.error(e+errorMessage);
+          throw new YarnException(e+errorMessage);
{code}

  - Please do not use \n. It is not platform independent. 
  - You can use the LOG.error(message, throwable) api. 
  - Likewise you could use YarnException(String message, Throwable cause)


, Sorry - ran through the patch too quickly. Xuan, please ignore my comment on addressing the moving of code to the 
registerWithRM function. 

, Fix trailing space issues in the patch. There also seem to be tabs in the patch.

Some comments on the test code: 
  - indentation issues in MyNodeStatusUpdater4
  - change code layout to put MyNodeStatusUpdater4 after MyNodeStatusUpdater3
  - fix MyNodeStatusUpdater4 to make waitIntervalMS a final field and passed in via the ctor. 
     - likewise fo waitForEver 
  - MyNodeStatusUpdater4::getRMClient does not use waitIntervalMS
  - could reuse waitIntervalMS var ( and reset to 20 seconds later ) so as to not rely on 30*1000 in the first check. 
  - also, please look at reducing the time values so that the test run does not take too long. Current unit test takes over a minute to complete.

Use "resourcemanager.connect.wait.ms" for NM_RESOURCEMANAGER_WAIT_MS to be more clear.
Likewise for NM_RESOURCEMANAGER_RETRY_INTERVAL_MS, use "resourcemanager.connect.retry_interval.ms" 
Add both these new variables into yarn-default.xml with clear description.

+        LOG.info("Connecting to ResourceManager at " + this.rmAddress);
   - should be also log current attempt counter.

+        RegisterNodeManagerRequest request = recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);
+        request.setHttpPort(this.httpPort);
+        request.setResource(this.totalResource);
+        request.setNodeId(this.nodeId);
   - this object does not need to be created for each loop. Could be created once outside. 

Also, we should check as to what the NM does if the RM dies at an intermediate point i.e registration succeeded but eventually at some point the RM died. Does the NM keep re-trying at this point or die after a certain time interval or after all containers finish? That bit could be looked at in a separate jira if you find any issues in that aspect.
, bq: Also, we should check as to what the NM does if the RM dies at an intermediate point i.e registration succeeded but eventually at some point the RM died. Does the NM keep re-trying at this point or die after a certain time interval or after all containers finish? That bit could be looked at in a separate jira if you find any issues in that aspect.

I do not think so. This block only checks:
  this.resourceTracker = getRMClient();//find resourceTracker
  regResponse = this.resourceTracker.registerNodeManager(request).getRegistrationResponse();//register the NM and get response.
If those are getting correctly(without exceptions), we will get out of the whole loop. Even if RM will die later after we successfully get the NM registration and response, I do not think the NM will retrying it. This code is only for NM register with RM.

, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12569621/YARN-196.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/411//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/411//console

This message is automatically generated., @Xuan, the comment about the RM dying was for a later point in time. i.e. NM starts, connects to RM, does its work and then say 30 mins later, the RM dies.

Thanks for the quick turnaround on the patch comments., Patch still has trailing whitespace issues.

In YarnConfiguration.java:

+  /** Max time to wait for ResourceManger start
+   */
 
Please rephrase to "max time to wait to establish a connection to the ResourceManager when the NodeManager starts"

+  /** Time interval for each NM attempt to connect RM
+   */

Rephrase to "Time interval between each NM attempt to connect to the ResourceManager" 

You can use the same descriptions in yarn-default.xml. Not sure if "After that period of time, NM will throw out exceptions" is valid in yarn-default.xml. A better description could mention that the NM will shutdown if it cannot connect to the RM within the specified max time period. 
Description should also mention how to use -1 to retry forever.

Earlier comment had a point of switching to using SECONDS instead of MS for users to understand more easily.

+      // this.hostName = InetAddress.getLocalHost().getCanonicalHostName();
  - Please remove commented out code if not being used.

Unit test does not really seem to be testing the flow of RESOURCEMANAGER_CONNECT_WAIT_MS being set to -1. waitForEver is being explicitly set to true/false based on the updater's ctor and not really based on the config value. If that flow cannot be tested, it might be better to remove the additional complexity from the test.

Also, patch will need to be updated due to https://issues.apache.org/jira/browse/HADOOP-9112. 













, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12570598/YARN-196.5.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/423//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/423//console

This message is automatically generated., +  public static final int DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS = 
+      15*60*1000;
+  public static final long DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS =
+      30*1000;

Variable says seconds but value is still in milliseconds? 
Likewise for yarn-default.xml 

+    long rmConnectWaitMS =
+        conf.getInt(
+            YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,
+            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS);
+    long rmConnectionRetryIntervalMS =
+        conf.getLong(
+            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,
+            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS);

Above variables could be set using *1000 to keep code clean. Special handling needed for -1. 

, Also, description in yarn-default.xml should mention the value is specified in seconds., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571485/YARN-196.6.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/448//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/448//console

This message is automatically generated., Uploading the new patch to validate the configuration values., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571927/YARN-196.7.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/460//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/460//console

This message is automatically generated., +      throw new YarnException("Invalid Configuration. " +
+              "RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS " +
+              "should not be negative.");

Should replace "RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS " with YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS as a user will not understand anything if the log/exception has a variable name in it - we should use the property name defined in the configs as that provides a more clear explanation to the user. Likewise, fix the exception thrown later in the code as well as the log messages.



, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12571982/YARN-196.8.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/464//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/464//console

This message is automatically generated., @Xuan, the previous comment still does not seem to have been addressed. Latest patch has:

+      throw new YarnException("Invalid Configuration. " +
+          "YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS " +
+          "should not be negative.");
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12572834/YARN-196.9.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/483//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/483//console

This message is automatically generated., Fix format issue, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12572847/YARN-196.10.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/485//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/485//console

This message is automatically generated., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573120/YARN-196.11.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/495//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/495//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573196/YARN-196.12.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/497//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/497//console

This message is automatically generated., @Xuan, latest patch looks good. Addressing a very minor nit and uploading it. Will commit as soon as jenkins does a +1., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573764/YARN-196.12.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 tests included appear to have a timeout.{color}

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/516//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/516//console

This message is automatically generated., Committed to branch-2 and trunk. Thanks Xuan for addressing the numerous review comments and being so patient. I have also filed a related jira regarding similar handling of connection loss after the NM is up. , Integrated in Hadoop-trunk-Commit #3479 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3479/])
    YARN-196. Nodemanager should be more robust in handling connection failure to ResourceManager when a cluster is started. Contributed by Xuan Gong. (Revision 1457038)

     Result = SUCCESS
hitesh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1457038
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/resources/yarn-default.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java
, Integrated in Hadoop-Yarn-trunk #157 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/157/])
    YARN-196. Nodemanager should be more robust in handling connection failure to ResourceManager when a cluster is started. Contributed by Xuan Gong. (Revision 1457038)

     Result = SUCCESS
hitesh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1457038
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/resources/yarn-default.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java
, Integrated in Hadoop-Hdfs-trunk #1346 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1346/])
    YARN-196. Nodemanager should be more robust in handling connection failure to ResourceManager when a cluster is started. Contributed by Xuan Gong. (Revision 1457038)

     Result = FAILURE
hitesh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1457038
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/resources/yarn-default.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java
, Integrated in Hadoop-Mapreduce-trunk #1374 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1374/])
    YARN-196. Nodemanager should be more robust in handling connection failure to ResourceManager when a cluster is started. Contributed by Xuan Gong. (Revision 1457038)

     Result = SUCCESS
hitesh : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1457038
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/resources/yarn-default.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/TestNodeStatusUpdater.java
, here is a finally block which will make the code sleeping for longer than necessary before exiting. this becomes important because admins might kill the NM after waiting for a few seconds for it to exit. In that much time NM has to do a bunch of clean up tasks and this extra sleep does not help.]