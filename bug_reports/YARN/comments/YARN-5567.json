[Thanks [~yufeigu] for your contribution.  This looks like a straightforward fix., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 20s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 6m 51s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 55s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 23s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 51s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 18s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 45s {color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 6m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 6m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 23s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green} 0m 52s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 8m 6s {color} | {color:green} hadoop-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 21s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 37m 49s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:9560f25 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12825732/YARN-5567.001.patch |
| JIRA Issue | YARN-5567 |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 8a585aedcbae 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 19c743c |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/12911/testReport/ |
| modules | C: hadoop-common-project/hadoop-common U: hadoop-common-project/hadoop-common |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/12911/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.

, +1 LGTM, Seems to be a bug since a long time..., +1 for me as well.  Will commit this soon., Committed to trunk, branch-2, and branch-2.8.

Thanks [~yufeigu] for the contribution! Thanks [~Naganarasimha] for reviewing!
, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #10371 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/10371/])
YARN-5567. Fix script exit code checking in (rchiang: rev 05ede003868871addc30162e9707c3dc14ed6b7a)
* (edit) hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestNodeHealthScriptRunner.java
* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NodeHealthScriptRunner.java
, Thanks [~rchiang] for the review and commit! Thanks [~Naganarasimha] for the review!, The script handling had a lot of comments in it why the exit code was ignored and an exit code that is not zero should not change the health status:
{code}
144     * The node is marked unhealthy if
145     * <ol>
146     * <li>The node health script times out</li>
147     * <li>The node health scripts output has a line which begins with ERROR</li>
148     * <li>An exception is thrown while executing the script</li>
149     * </ol>
150     * If the script throws {@link IOException} or {@link ExitCodeException} the
151     * output is ignored and node is left remaining healthy, as script might
152     * have syntax error.
{code}

What we have just done is break all of this. We now do not ignore the exit code and mark the node as unhealthy. I assume this was originally done for a reason and we could have just introduced a backwards incompatible behavioural change.

Looking at the underlying ShellCommandExecutor and tracing back to the {{Shell.runCommnad()}} method: all non zero exit codes will throw a {{ExitCodeException}}.

If we are going to change the behaviour that is documented we should not do it in release 2.8.1 and also update all related documentation., Thanks for pointing it out [~wilfreds], but it was not completely overlooked by me. My thoughts behind going ahead with this issue is, if the script has syntax error then there is possibility that the script might not execute properly and detect any issues with the node's health (if any). So i felt warning to the user that the script has error(or returning a error code) is better than just passing the evaluation as successful. 
bq. If we are going to change the behaviour that is documented we should not do it in release 2.8.1 and also update all related documentation.
Agree that required documentation and comments needs to be modified/upgrade (which we missed in the patch). But not to do in 2.8.1 release is a debatable topic which can be further discussed upon. Few points in favor of doing it is, 
# we are doing the change in minor version than the major version. (2.8.0 is not yet released and if possible we can incorporate in it too)
# As mentioned above if there is issue in the script better to flag it as an error rather than silently passing it as success, so better to flag an error if any script issues even for existing cluster too.

Thoughts ? would also like to see others input too
, Thanks [~wilfreds] for that.  For incompatible changes, I'd prefer to leave it in trunk, pull it out of branch-2.8 and debate about branch-2 (effectively 2.9).
, One point of clarification.  While this *is* an incompatible change, I was debating about the "hardness" of it.  It will break on broken health checking scripts (assuming anyone is even using the feature).  If we want to treat this as a hard incompatibility, then I'd go with my earlier suggestion.  In general, I prefer being conservative along these lines.

If others are of the mind that this is a "softer" incompatibility, we could keep it in branch-2.8.

Either way, I agree the documentation and Javadoc need to be updated to match.  I've filed YARN-5595 as a follow up.
, Thanks [~wilfreds] for pointing out. Nice catch. My bad to miss the part of the Java doc. Thanks [~Naganarasimha] and [~rchiang]'s comments. I prefer to revert it in branch-2.8 and branch-2 for compatibility reason,  and keep it in trunk with updating of documentation. Thanks [~rchiang] for filing the follow up JIRA.
, So, that's two votes for trunk only.  [~wilfreds] or [~Naganarasimha], are both of you okay with that?, I would be OK with the change in trunk. It does make the behaviour clearer.
We do need the additional changes on the comments and the javadoc on top of what we have now., Well i would have liked to port it to 2.9 atleast as in my view its better to flag scrit syntax error as an error rather than silently passing it as success, but i am go in taking less riskier approach too!
bq. I would be OK with the change in trunk. It does make the behaviour clearer.
Well the catch again here is 3.0.0-alpha1 is seperate branch from trunk, so you guys plan to push it to 3.0.0-alpha1 branch too right ?, I think we should push it 3.0.0-alpha1, otherwise there will be a incompatibility in Hadoop 3. , I think they've already started the vote on alpha-1 RC0.  I believe it will show up in alpha2 automatically.

[~andrew.wang], let me know how to handle this situation.  Thanks.
, Looking at git log, it looks like this will also be included in alpha1. I rebranched right before sending the RC, and we picked up this JIRA as part of that.

So, I think we're good?, Thanks [~andrew.wang] for the info.  Thanks to [~wilfreds] for bringing up the issue and thanks again to [~yufeigu] and [~Naganarasimha] for your comments.

Reverted from branch-2.8 and branch-2.  Marked as incompatible., -1  Please revert this change.

The exit code getting ignored is *intentional*.  We don't want to bring the nodemanager down in case the script has a syntax error in it.  Such a condition would bring down *entire clusters* at once, instantaneously.

, I've reverted this change., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #10411 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/10411/])
Revert "YARN-5567. Fix script exit code checking in (aw: rev cae331186da266eea1b0a6fc2c82604907ab0153)
* (edit) hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/NodeHealthScriptRunner.java
* (edit) hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/util/TestNodeHealthScriptRunner.java
, I'm going to mark this as fixed so that the release notes for alpha1 reflect that this change is present in it.  I've opened and closed YARN-5635 so that alpha2's release notes reflect this change being reverted., [~aw], I understand that with typo in the health check script can bring down the whole cluster hence we need to revert this, but at the same time with erroneous script there could be possibility that the script missed to detect some health check failures on the node ?
Should we think of some other state which could warn the admin about this(which is captured in webui/Rest) ?, bq. Should we think of some other state which could warn the admin about this(which is captured in webui/Rest)?

Probably. The key problem is going to be putting it some place that admins will actually notice it. (Hint: most folks in ops that I know don't actually look at the web UIs...)

If folks want to pursue that, they'll need to do it in another JIRA since this one has been in a release. :(, [~aw], would you prefer this be a config setting to choose the behavior?  Alternatively, would you be okay with standardizing on a specific error code for "detected bad Node" vs "bad script"?, bq. would you prefer this be a config setting to choose the behavior?

The history of the health check script is interesting, but long.  But not trusting the exit code was one of the key learnings by the ops team from the HOD experience. It fails a lot more often than people realize, mainly due to users doing crazy things, especially on insecure systems.

This is one of those times where it's going to be extremely difficult to convince me otherwise.  I can't think of a reason to ever trust the exit code enough to bring down the NodeManager.   In this particular environment, the number of conditions that the script can fail for reasons which may be temporary/pointless are many.  

Now it could be argued that those temporary failures should cause the NM to come down, but then you get into a race condition between heartbeats and actual issues.  HDFS worked around it by basically saying "it has to fail for X long". Ignoring the exit code avoids that problem because one can be sure that "ERROR -" really did come from the script.

bq. Alternatively, would you be okay with standardizing on a specific error code for "detected bad Node" vs "bad script"?

If by error code you specifically mean the value the NM reports back to the RM, yes that makes sense.  It just can't fail the node.  , bq. standardizing on a specific error code for "detected bad Node" vs "bad script"
I was thinking something in the same lines when i mentioned earlier ??"Should we think of some other state which could warn the admin about this(which is captured in webui/Rest)"?? 
If NM can inform Healthy/UnHealthy/HealthValidationError, And this can be sent across Heartbeat to RM and RM can capture the state of this NM to be other than Running and UnHealthy (a New state).  This can be displayed in the WebUI and also in the can be queried using {{./yarn node -list -state}}, It needs to be available via metrics2, otherwise it's invisible to most large scale ops teams.

Someone open a new JIRA or rework  YARN-5635 for this discussion.  This JIRA is effectively dead for any new development. :(, reopened YARN-5635, put some comments there for further discussion ...]