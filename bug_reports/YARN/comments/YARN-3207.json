[[~pramachandran], thanks for reporting the issue. I think it makes sense. The record without secondary filter info shouldn't be qualified for the query filter too., Hi [~zjshen],
Also can there be a possibility that a given secondary filter key is present in both other info and primary filters, but value is present only in primary filters ?
In that case below code returns false.
{code}
            Object v = entity.getOtherInfo().get(filter.getName());
            if (v == null) {
              Set<Object> vs = entity.getPrimaryFilters()
                  .get(filter.getName());
              if (vs != null && !vs.contains(filter.getValue())) {
                filterPassed = false;
                break;
              }
            } else if (!v.equals(filter.getValue())) {
              filterPassed = false;
              break;
            }
{code}

Willing to work on this if you have not already started ., Varun, thanks for reassign it back to me. I'm currently working on this issue. 

bq. Also can there be a possibility that a given secondary filter key is present in both other info and primary filters,

Practically, if the user put some info in primary filter, it should be put into other info of the entity again. "primary filter" is somehow a special info, but will be used as the index.

If the user put the same info in both primary filter and other info, and make the value null, it will return false, but it's more like a fault use case, isn't it?, Create the patch to fix the issue., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12699388/YARN-3207.1.patch
  against trunk revision 685af8a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6654//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6654//console

This message is automatically generated., +1 LGTM. Will commit., Committed into trunk/branch-2. Thanks, zhijie !, FAILURE: Integrated in Hadoop-trunk-Commit #7139 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7139/])
YARN-3207. Secondary filter matches entites which do not have the key (xgong: rev 57db50cbe3ce42618ad6d6869ae337d15b261f4e)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/test/java/org/apache/hadoop/yarn/server/timeline/TimelineStoreTestUtils.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java
* hadoop-yarn-project/CHANGES.txt
, bq. If the user put the same info in both primary filter and other info, and make the value null, it will return false, but it's more like a fault use case, isn't it?
Yes i agree this scenario is not practical but was just thinking in terms of any scenario to store different values in primary filter(just like a tag) and other info(more detailed), hence asked., bq. was just thinking in terms of any scenario to store different values in primary filter(just like a tag) and other info(more detailed)

In this case, according to the code path, other info decides the result if the key appears in both sides, but the value differs. Thanks, Naga for raising this special case explicitly., FAILURE: Integrated in Hadoop-Yarn-trunk #842 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/842/])
YARN-3207. Secondary filter matches entites which do not have the key (xgong: rev 57db50cbe3ce42618ad6d6869ae337d15b261f4e)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/test/java/org/apache/hadoop/yarn/server/timeline/TimelineStoreTestUtils.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java
* hadoop-yarn-project/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Yarn-trunk-Java8 #108 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/108/])
YARN-3207. Secondary filter matches entites which do not have the key (xgong: rev 57db50cbe3ce42618ad6d6869ae337d15b261f4e)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/test/java/org/apache/hadoop/yarn/server/timeline/TimelineStoreTestUtils.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #99 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/99/])
YARN-3207. Secondary filter matches entites which do not have the key (xgong: rev 57db50cbe3ce42618ad6d6869ae337d15b261f4e)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/test/java/org/apache/hadoop/yarn/server/timeline/TimelineStoreTestUtils.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #2040 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2040/])
YARN-3207. Secondary filter matches entites which do not have the key (xgong: rev 57db50cbe3ce42618ad6d6869ae337d15b261f4e)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/test/java/org/apache/hadoop/yarn/server/timeline/TimelineStoreTestUtils.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #109 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/109/])
YARN-3207. Secondary filter matches entites which do not have the key (xgong: rev 57db50cbe3ce42618ad6d6869ae337d15b261f4e)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/test/java/org/apache/hadoop/yarn/server/timeline/TimelineStoreTestUtils.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java
* hadoop-yarn-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2059 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2059/])
YARN-3207. Secondary filter matches entites which do not have the key (xgong: rev 57db50cbe3ce42618ad6d6869ae337d15b261f4e)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/test/java/org/apache/hadoop/yarn/server/timeline/TimelineStoreTestUtils.java
, Pulled this into 2.6.1. Ran compilation and TestLeveldbTimelineStore, TestMemoryTimelineStore, TestTimelineDataManager before the push. Patch applied cleanly.

]