[Thanks Wenwu for finding this. I think this is a bug we should fix as "mapreduce_shuffle" is something default., Attach a quick patch. Fix it by getting "mapreduce_shuffle" when missing this property in yarn configuration file., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12607730/YARN-1289.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager:

                  org.apache.hadoop.yarn.server.nodemanager.TestNodeManagerReboot
                  org.apache.hadoop.yarn.server.nodemanager.TestNodeManagerResync
                  org.apache.hadoop.yarn.server.nodemanager.TestEventFlow
                  org.apache.hadoop.yarn.server.nodemanager.containermanager.monitor.TestContainersMonitor
                  org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.TestContainerLaunch
                  org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation.TestLogAggregationService
                  org.apache.hadoop.yarn.server.nodemanager.TestNodeManagerShutdown
                  org.apache.hadoop.yarn.server.nodemanager.TestNodeStatusUpdater
                  org.apache.hadoop.yarn.server.nodemanager.containermanager.TestContainerManager

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2159//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2159//console

This message is automatically generated., The patch do fix the problem that I can deploy a cluster and run job successfully without specifying "yarn.nodemanager.aux-services" value now. Will take a look at unit test failures here., I think the unit test failure is because other services are unnecessary loading ShuffleHandler after this change. May be the right way is to change serviceInit in NodeManager to set default property there?, I believe this jira should be considered invalid. YARN does not and should not have any implicit dependencies on mapreduce. *If* anyone wants to runs MapReduce jobs on a YARN cluster, configuration of the mapreduce shuffle service is mandatory - however this does not hold true for cases where someone is using YARN to run non-MR applications. 

If someone wanted to change the implementation of the shuffle service to a potentially better/faster implementation, defining a default would create a problem. Also, in terms of future-proofing, what is the expectation if MR in later versions switches to use a different service? Is that expectation that default services will keep on changing over time based on MR implementation changes? , [~wenwu] Can you confirm whether your yarn-site.xml has no aux-services configured or the mapreduce shuffle service was mis-configured using "mapreduce.shuffle" instead of "mapreduce_shuffle"?

, +1 to not adding an MR specific config value by default to YARN., Thanks [~hitesh] and [~kkambatl] for comments. I just have some thoughts here, see if it make sense.
bq. YARN does not and should not have any implicit dependencies on mapreduce.
Agree. However, according to my understanding, it doesn't stop YARN to support mapreduce service by default which is still common sense today. Isn't it? There already are some mapreduce related configurations and even with default values there in yarn-default.xml. I just think we should keep consistent there (given we have no plan to remove them out of yarn).
bq. If someone wanted to change the implementation of the shuffle service to a potentially better/faster implementation, defining a default would create a problem. 
I don't see any problem there as default value is easily get overridden. Am I missing something here?
bq. what is the expectation if MR in later versions switches to use a different service? Is that expectation that default services will keep on changing over time based on MR implementation changes?
I think keep default value changing with MR implementations is not a problem today as project MR and YARN has the same release cycle and neither YARN or MR get released separately (correct me if there is plan to separate them out). On the contrary, without default settings, like this case, user has to spend time to track the configuration changes from "mapreduce.shuffle" to "mapreduce_shuffle". IMO, the value of default value is to save everyone's time of setting common values which quite fit cases here.
Thoughts?
, bq. There already are some mapreduce related configurations and even with default values there in yarn-default.xml. 
Could you file jiras for the the ones that you have come across so that such issues can be addressed and fixed.

bq. I don't see any problem there as default value is easily get overridden. Am I missing something here?
Also, overriding a default value implies an incompatible change. 

I agree that everyone has to configure the shuffle service but it is common knowledge ( atleast I hope it is given that YARN has been around for quite some time ) that it needs to be configured when using MR with YARN. The mapreduce.shuffle issue was a recent change and has probably caused a few problems to quite a few users. But it was a one-off issue and introducing a default as a result does not seem the right solution. The fact that everything is packaged/released together ( as of today ) does not imply we should enforce more tighter dependencies. MR is already moving towards becoming a user-land library ( MAPREDUCE-4421 ) although the aux-service question has not been addressed yet.



, OK. I am good with removing other MR related configurations from YARN and agree this (decoupling MR and YARN) is the right direction. Will file a JIRA soon. Thanks for sharing the vision, [~hitesh]!, Filed YARN-1310 to track removing MR settings in yarn configuration. If nobody against, will mark this JIRA as invalid later.]