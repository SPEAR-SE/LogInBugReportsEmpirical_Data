[Attaching a patch which modifies MiniYARNCluter so it waits until all app masters are reported as finished., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12602698/YARN-1183.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1900//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1900//console

This message is automatically generated., Patch looks mostly good. Few comments:
# The ConcurrentHashMap should be initialized with a smaller value for concurrencyLevel (2?), and may be initialCapacity too.
# For the keys in the map, we should probably use ApplicationID instead of trackingUrl as the trackingUrl can change by the time the app completes.
# Rename waitAppMastersToFinish to waitForAppMastersToFinish?, Karthik, 
Thanks for review, here are some answers:
1. It may be a non necessary optimization in the testing code
2. Can you advice on how to get ApplicationID from RegisterApplicationMasterRequest/RegisterApplicationMasterResponse? I don't see how it can be done without exposing additional methods in ApplicationMasterService. Just curious - in what cases can trackingUrl be changed?
3. Sure, Yep, you're right about trackingUrl being able to change. Please disregard this part., Attaching an updated patch. Updated the name of the wait method. Changed the way it gets notifications when app masters get registered/unregistered so now ApplicationAttemptId is used as the key., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12602875/YARN-1183--n2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1905//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1905//console

This message is automatically generated., bq. It may be a non necessary optimization in the testing code
MiniYARNCluster is used by several tests. This might bite us if and when we run tests parallely.

bq. Can you advice on how to get ApplicationID from RegisterApplicationMasterRequest/RegisterApplicationMasterResponse?
Here, using host:port should be good - only a single application runs on the host:port at any point.

Also, in the following code, even the while() should also be in the synchronized block. Otherwise, it is possible to loose notifications and wait longer than needed.
{code}
      while (!appMasters.isEmpty() && System.currentTimeMillis() - started < timeoutMillis) {
        synchronized (appMasters) {
          appMasters.wait(1000);
        }
      }
{code}, bq. MiniYARNCluster is used by several tests. This might bite us if and when we run tests parallely.
Concurrency level won't make any difference even with that. BTW I'm actually running MR tests in parallel now. That's when this issue with cluster shutdown working incorrectly becomes more evident. 

Thanks for catching the thing with synchronized block, fixing it., Attaching an updated patch, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12603037/YARN-1183--n3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1916//console

This message is automatically generated., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12603041/YARN-1183--n4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1917//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1917//console

This message is automatically generated., Looks good to me. +1. Thanks Andrey.

Observation: Not that we should change anything. We are storing the timestamp of when the appMaster registered, but not using it anywhere yet. , Great work, everybody. Looks like this patch is ready for checkin. I am assuming this is targeted for trunk and branch-2. Also, can you post a maven command for manual testing? I would be happy to put this in., Also, could you comment on the initial thread concurrency from default of 16 to 2. This is mainly for me to understand it better. I'm assuming you intentionally choose a low thread concurrency to reduce overhead for sequential test running and let the thread concurrency scale up as needed during parallel execution., I don't think concurrency level can make any difference here. The change was requested by Karthik., In the past, we have run into cases where the default concurrency level led to high memory usage. MAPREDUCE-5368 is one example.

While I do agree that it might not lead to big differences for something "short-lived" like MiniYARNCluster, I think it is good practice to use a smaller value when we know the number of concurrent accesses is low., Can you post an update patch so I can check in? Current one doesn't apply after YARN-1182., Attaching an updated patch., Jonathan, the issue occurred when I just run tests for hadoop-mapreduce-client-jobclient and watched for zombie Java processes. It was much more visible when using parallel execution, see MAPREDUCE-4980. I observed it quite often under OSX (some of the tests did that on every run) and didn't see it on a Linux machine I had, and I had different JVM's there. I reproduced it later in a non-modified trunk and tracked it down to MiniYARNCluster shutdown. Can't reproduce it on another macbook I have now, but I think this just due to the nature of the bug (concurrency issue)., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12609719/YARN-1183--n5.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2261//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2261//console

This message is automatically generated., I'm +1 on YARN-1183--n5.patch. Thanks Andrey and Karthik for getting this patch ready!, SUCCESS: Integrated in Hadoop-trunk-Commit #4644 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4644/])
YARN-1183. MiniYARNCluster shutdown takes several minutes intermittently (Andrey Klochkov via jeagles) (jeagles: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1534800)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #371 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/371/])
YARN-1183. MiniYARNCluster shutdown takes several minutes intermittently (Andrey Klochkov via jeagles) (jeagles: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1534800)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1561 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1561/])
YARN-1183. MiniYARNCluster shutdown takes several minutes intermittently (Andrey Klochkov via jeagles) (jeagles: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1534800)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1587 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1587/])
YARN-1183. MiniYARNCluster shutdown takes several minutes intermittently (Andrey Klochkov via jeagles) (jeagles: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1534800)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests/src/test/java/org/apache/hadoop/yarn/server/MiniYARNCluster.java
]