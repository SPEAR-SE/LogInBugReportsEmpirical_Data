[We think this might be a race between when the application gets removed (LeafQueue.removeApplication) and between a possibly in flight allocate call from the AM.  If LeafQueue.removeApplication is called it removes the user from the list of active users.  If a CapacityScheduler.allocate call comes in before the application gets removed from application datastructures in CapacityScheduler.doneApplication, it could add it back to the activeUser list because the allocate() call just checks to make sure application isn't null.  We either need to make the check in allocate better or prevent the race between finish and removing.

This is basically in CapacityScheduler.doneApplication:
    } else {
      queue.finishApplication(application, queue.getQueueName());
    }
    
    // Remove from our data-structure
    applications.remove(applicationAttemptId); , Just for reference the RM log shows the application removed:
2013-02-27 06:59:50,390 [ResourceManager Event Processor] INFO org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.LeafQueue: Application removed - appId: application_1360172387725_270658 user: userfoo queue: adhoc #user-pending-applications: 0 #user-active-applications: 5 #queue-pending-applications: 0 #queue-active-applications: 25

Unfortunately the allocate call only logs at DEBUG level and we are at INFO level., Note that this is due to the fact that CapacityScheduler.allocate() call is not synchronized like other calls so the capacity scheduler thread can be calling doneApplication at the same time the allocate call comes in.  This means that allocate can be looking at/updating the SchedulerApp while its being stopped. We need a way to either synchronize on the SchdulerApp itself or perhaps have the calls into SchedulerApp check to make sure its hasn't been stopped.  , So I think we can simply track if the application gets stopped and then check that in the allocate() call before really processing it.  

All the stopping/removing of the application happens in CS.doneApplication and the race is really between the calls in that function and the fact that allocate() isn't synchronized. No other paths I could find should cause issues since most of the other funtions in CS are all synchronized and wouldn't run while the doneApplication is happening. 

here is a preliminary patch that I am going to do some more testing on it.  The checks for stopped in the SchedulerApp are extra I was just being paranoid.  , Note that is the branch-0.23 patch. Working on trunk/branch-2 as it as renamed FicaSchedulerApp, updated patch for trunk/branch-2.  , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12572846/YARN-460.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/484//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/484//console

This message is automatically generated., Thomas - one thing that bothers me...

Should we return some sort of error indication back to the AM in the case that it has been 'stopped'? 

Currently your patch just returns EMPTY_ALLOCATION... OTOH, the current usage of EMPTY_ALLOCATION i.e. when Application is 'null' also suffers from same issue i.e. no error indication to AM.
, How about adding a 'error' or 'stopped' boolean or some indication to AM in the Allocation struct?, Yeah I think that is a good idea.  Perhaps something in the AMResponse. It might be nice if we could include a description of the problem as well, I'll look at it more to see what I can come up with., updated branch-0.23 patch having Allocation return an error and then ApplicationMasterService send reboot command to AM., trunk and branch-2 patch.  Unfortunately I couldn't easily come up with a unit test to hit the application stopped condition (without hitting the null check)  due to the data structures being private.  , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573361/YARN-460.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/506//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/506//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12573361/YARN-460.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/507//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/507//console

This message is automatically generated., Also note that I manually tested this by delaying the kill container message going to AM and sleeping between when the app is marked done and before it was removed from the application list.   I was able to reproduce the issue, then saw this patch fix it and the AM get the reboot command.  I tested both capacity scheduler and fifo., branch-23 patch with just the stopped check., trunk patch.  After thinking about this more and talking to Arun a bit about it. I have made this patch just contain the check for stopped and it returns an EMPTY_ALLOCATION similar to what it did before if the application was null when calling allocate().  I will file a follow up jira to investigate if the AMResponse should have another field so that the RM could send the AM useful error information other then just reboot., filed YARN-519 to follow up with the error handling., +1, thanks Tom!, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12576068/YARN-460.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/628//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/628//console

This message is automatically generated., Integrated in Hadoop-trunk-Commit #3539 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/3539/])
    YARN-460. CS user left in list of active users for the queue even when application finished (tgraves) (Revision 1462486)

     Result = SUCCESS
tgraves : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1462486
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java
, Thanks Arun!  I committed this., Integrated in Hadoop-Yarn-trunk #170 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/170/])
    YARN-460. CS user left in list of active users for the queue even when application finished (tgraves) (Revision 1462486)

     Result = FAILURE
tgraves : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1462486
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java
, Integrated in Hadoop-Hdfs-0.23-Build #568 (See [https://builds.apache.org/job/Hadoop-Hdfs-0.23-Build/568/])
    YARN-460. CS user left in list of active users for the queue even when application finished (tgraves) (Revision 1462497)

     Result = SUCCESS
tgraves : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1462497
Files : 
* /hadoop/common/branches/branch-0.23/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/branches/branch-0.23/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApp.java
* /hadoop/common/branches/branch-0.23/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java
* /hadoop/common/branches/branch-0.23/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java
, Integrated in Hadoop-Hdfs-trunk #1359 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1359/])
    YARN-460. CS user left in list of active users for the queue even when application finished (tgraves) (Revision 1462486)

     Result = FAILURE
tgraves : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1462486
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java
, Integrated in Hadoop-Mapreduce-trunk #1387 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1387/])
    YARN-460. CS user left in list of active users for the queue even when application finished (tgraves) (Revision 1462486)

     Result = FAILURE
tgraves : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1462486
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java
]