[Thanks [~bibinchundatt] for raising the JIRA.
 
Agree with you that AM usage should not be increased for unmanaged AM. We wont know where it is launched and how much resources it will use either.
We can check the unmanaged am flag in Scheduler Application Attempt to find out if its an unmanaged app or not. , [~sunilg]/[~varun_saxena]
For activating and checking {{amIfStarted}} should be consider {{rmContext.getScheduler().getMinimumResourceCapability}}.
As per the current code 
{code}
 public FiCaSchedulerApp(ApplicationAttemptId applicationAttemptId,
      String user, Queue queue, AbstractUsersManager abstractUsersManager,
      RMContext rmContext, Priority appPriority, boolean isAttemptRecovering,
      ActivitiesManager activitiesManager) {
    if (rmApp == null || rmApp.getAMResourceRequest() == null) {
      // the rmApp may be undefined (the resource manager checks for this too)
      // and unmanaged applications do not provide an amResource request
      // in these cases, provide a default using the scheduler
      amResource = rmContext.getScheduler().getMinimumResourceCapability();
      partition = CommonNodeLabelsManager.NO_LABEL;
    } else {
      amResource = rmApp.getAMResourceRequest().getCapability();
      partition =
          (rmApp.getAMResourceRequest().getNodeLabelExpression() == null)
          ? CommonNodeLabelsManager.NO_LABEL
          : rmApp.getAMResourceRequest().getNodeLabelExpression();
    }
{code}
Any info on why the minimum was considered instead of {{Resource.NONE}} ?? We could have activated AM directly with out AM Limit check but following ordering policy., It seems to be a conscious decision made in YARN-2637. 
However, IMO unmanaged AMs' usage should not be counted towards queue's AM usage. Unmanaged AMs' would be standalone processes(which user does not want to run as a YARN container) and if an NM is running on the same node as the unmanaged AM is running on i.e. the node is to be used for launching YARN containers, we can expect the admin to consider that while configuring NM capability.

cc [~leftnoteasy]. Your thoughts on this?, I would prefer to keep logic as-is, there're two major purposes of AM-percentage. a. Avoid all resource in a queue consumed by AM, b. Avoid too many concurrent apps running. 

If we assume AM resource of unmanaged AM to zero, under the same configuration (by default {{maximum-applications}} set to 10k), there're too many apps can get started. So it will change the behavior.

And also, under existing logic, LeafQueue skips apps until it find an app can fit in the available AM resource quota, which makes unmanaged AM get activated when queue doesn't have free AM resource quota., [~leftnoteasy]
Thank you for reply .Agree with you.
 Closing as no need to fix., Sorry I had missed this.

[~leftnoteasy] makes a fair point about AM limit doubling up as a way to control the number of concurrent applications launched for each queue.
The point about avoiding all resources in a queue being consumed by AM, well even the current solution of considering a default minimum value is not quite correct as unmanaged AM may actually be using more resources. So, the most effective way of accounting for those resources would be to deduct the max resources required for this AM from resources of the node where the AM is launched while configuring the NM capability.
Assuming that's done, the main issue would be with regards to controlling apps.
However, I wonder if defining a configurable running app limit at a queue level won't be a better way to control the number of concurrent apps instead of using AM limit? ]