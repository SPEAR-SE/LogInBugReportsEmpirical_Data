[Updates heap dump screen shots that shows in-memory cache is causing OOM. 
And also, number of entities per domain is very huge. , Instead of in memory cache store, there are other cache store implementations available i.e  Leveldb or rolling_level_db. But not sure what is the impact on performance!
cc:/ [~jlowe] , Isn't this solved by changing yarn.timeline-service.entity-group-fs-store.cache-store-class to something that can handle larger loads?  See YARN-4219.
, Yes, this can be avoid by configuring _entity-group-fs-store.cache-store-class_. But wanted to know about performance impact for serving queries. Given query performance is compromised then we can use level db. I see there 2 implementation of level db i.e leveldb vs rolling level db. Which one would be suitable for caching? , Closing as duplicate!, Rolling leveldb doesn't make sense for an entity group caching.  That was created to optimize for expiring entities from the timeline store, and we don't ever expire part of an entity group cache like that.  It's either all or nothing.  LevelDBCacheTimelineStore, the one added by YARN-4219 is what you're looking for.  This is essentially a duplicate of YARN-4219 and why that entity group cache store was created., Thanks [~jlowe] for clarifying it. It make sense to me. I have closed it as duplicate.]