[I believe there's a trailing newline character in the log which would bring the count to 87., I understand that point. As an end user, it feels little bit weird. Looking at unix filesystem, when a file is empty, the file has 0 bytes in size. In this case, even if we do -shell_commands echo, LogLength would show up as 1., Also, for distributed shell of running echo, AppMaster.stdout which does not print out anything, has LogLength of 0. There is inconsistency between the app master which does not call any print command and echo stdout which calls prints with "" (no end of line)., It is consistent with the contents of the log.  If nothing is ever printed to a log file then the log file has zero bytes in it and the log length is correctly reported as zero.  If a single {{echo}} is used then the log contents are correctly reported as 1 since {{echo}} will output a single newline character when given no additional arguments.  This is analogous to this situation with a regular shell session:

{noformat}
$ > /tmp/x  
$ echo > /tmp/y
$ ls -l /tmp/[xy]
-rw-r--r-- 1 user group 0 Sep  9 22:22 /tmp/x
-rw-r--r-- 1 user group 1 Sep  9 22:22 /tmp/y
{noformat}

Note that /tmp/x has a size of 0 and /tmp/y has a size of 1.  LogLength is simply reporting the number of bytes in the logfile, and not all of those bytes are visible characters., Thank you [~jlowe] for clarification. I will close this issue., It works as intended.]