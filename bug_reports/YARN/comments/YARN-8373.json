[It seems that SchedulerNode.unallocatedResource can change while we are sorting., This example samples the unallocated resource just once, so it should avoid the issue above. It is still not fully consistent though.
{code:java}
public Collection<N> sortedNodeList(Comparator<Resource> comparator) {
  SortedMap<Resource, N> map = new TreeMap<>(comparator);
  readLock.lock();
  try {
    for(N node: nodes.values()) {
      map.put(node.getUnallocatedResource(), node);
    }
  } finally {
    readLock.unlock();
  }
  return map.values();
}
{code}, [~miklos.szegedi@cloudera.com]

I can particularly see this when 
{noformat}
yarn.scheduler.fair.allow-undeclared-pools  true 
yarn.scheduler.fair.user-as-default-queue   true 

{noformat}
where queue creation is on fly.  Does it help setting to false ?  please let me know, This seems to be a race condition. Lots of parameters may affect it but that would be an unreliable workaround not solving the root cause.]