[Linking it to YARN-3181, Updateinterval is read from initilzataion of fairschduler, so it will not change.. Hence need not be protected by a lock for following piece of code..I want to add this in findbug-exclude file...

{code}
public void run() {
      while (!Thread.currentThread().isInterrupted()) {
        try {
          Thread.sleep(updateInterval);
          long start = getClock().getTime();
          update();
{code}

, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12699676/YARN-3204-001.patch
  against trunk revision 2fd02af.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6668//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/6668//artifact/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-resourcemanager.html
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6668//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12699701/YARN-3204-002.patch
  against trunk revision 2fd02af.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6669//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6669//console

This message is automatically generated., {code}
-    this.reservedAppSchedulable = (FSAppAttempt) application;
+     if(application instanceof FSAppAttempt){
+    	this.reservedAppSchedulable = (FSAppAttempt) application;
+    }
{code}
Would it be better if we throw an exception if the condition is not met?

{code}
     Set<String> planQueues = new HashSet<String>();
     for (FSQueue fsQueue : queueMgr.getQueues()) {
       String queueName = fsQueue.getName();
-      if (allocConf.isReservable(queueName)) {
+      boolean isReservable = false;
+      synchronized(this){
+    	  isReservable = allocConf.isReservable(queueName);
+      }
+      if (isReservable) {
         planQueues.add(queueName);
       }
     }
{code}
I think we should synchronize the whole function, since {{allocConf}} may be reloaded during this loop. A dedicated lock is better than {{FairScheduler.this}} to me., [~chengbing.liu] Thanks a lot for review..Addressed your comments and updated the patch.., Thanks for working on this, [~brahmareddy]

I am surprised Jenkins didn't catch this on YARN-3181. We should be able to avoid the findbugs failures on FairScheduler through some code changes. findbugs-exclusions are easy to add, but very had to maintain. I would like to take a closer look at the list and see what is going on. Unfortunately, I am very caught up for the next couple of days. I hope it is okay if I get to this towards the end of the week. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12702024/YARN-3204-003.patch
  against trunk revision c5eac9c.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.TestRMRestart

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6811//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6811//console

This message is automatically generated., This is failing all the patches, marking it as a blocker., Kindly  review if you find time ..thanks.., Some comments:
1. about the comment for Inconsistent sync warning fsOpDurations
{code}
Inconsistent sync warning - callDurationMetrics is only initialized once and never changed
{code}
It looks like not accurate. Each method from fsOpDurations is only called in one thread, all these methods access different fields and are independent.

2.Can we define reloadListener as volatile?
since reloadListener is accessed by two threads, it will be safer to use volatile.

3.Can we move the check to the beginning of the functions of reserveResource?
It will be better to check error earlier than later to avoid unnecessary operations.
{code}
if (!(application instanceof FSAppAttempt)) {
{code}
Can we use YarnRuntimeException instead of IllegalArgumentException?
This looks like an unexpected runtime exception.

4.adding lock for getAllocationConfiguration is dangerous.
A lot of codes(Queue, FairReservationSystem... ) are calling getAllocationConfiguration, which can introduce potential deadlock situation and performance issue.
For example, QueueManager#getQueue lock queues then call QueueManager#createQueue then call scheduler.getAllocationConfiguration.
This will have two layer locks if we add lock in getAllocationConfiguration.
Can we define allocConf as volatile?  since allocConf will only be updated by AllocationReloadListener.onReload which is called from AllocationFileLoaderService#reloadThread after initialization. 
, Let us revert YARN-3181 that caused these issues. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12702024/YARN-3204-003.patch
  against trunk revision c906a1d.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/7104//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/7104//artifact/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-resourcemanager.html
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/7104//console

This message is automatically generated.]