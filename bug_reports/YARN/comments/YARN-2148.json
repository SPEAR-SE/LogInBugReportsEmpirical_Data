[Attached a patch for this., [~leftnoteasy], thank you for taking this JIRA. The patch looks good to me(non-binding). Let's waiting for Jenkins., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12649828/YARN-2148.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client:

                  org.apache.hadoop.yarn.client.TestRMAdminCLI

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3961//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3961//console

This message is automatically generated., The test failure is not related to this JIRA. [~bikassaha], can you take a look?, lgtm. +1., [~ozawa] Can you please apply this patch and run the full YARN tests. I would like to make sure that we catch all tests that may have failed due to the container exit status. I can commit the patch if there are no new tests. Else we should fix them all in this jira. Thanks!, Good point. ok, I'll report the result of the full YARN tests., [~bikassaha], I confirmed there are no test failure about YARN with the patch due to the container exit status. I'll also run the full MapReduce tests, but I think the result is out of scope of this JIRA. Please go ahead., Thanks for the quick fix! Committed., SUCCESS: Integrated in Hadoop-trunk-Commit #5686 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5686/])
YARN-2148. TestNMClient failed due more exit code values added and passed to AM (Wangda Tan via bikas) (bikas: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1602043)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java
, Thanks for the quick fix, Wangda, and thanks for the review, Bikas!, {code}
-                  new Integer[] {137, 143, 0}));
+                  new Integer[] {ContainerExitStatus.KILLED_BY_APPMASTER}));
{code}

Previously, I have 0 here because it is possible that the container finishes so quickly that kill command even hasn't be processed.

And previously, the code can be 137 or 143, depending on whether the container is terminated or killed. Haven't look into the details of YARN-2091, but please please make sure both scenarios are covered.

One more concern: ContainerExitStatus is a pubic class. YARN-2091 seems to be incompatible change, while the old code has been used for a while., Thanks for [~ozawa] and [~bikassaha] review and commit!, Sorry [~zjshen], I missed your comment,
bq. Previously, I have 0 here because it is possible that the container finishes so quickly that kill command even hasn't be processed.
This should be a rare case, but it should be possible. In this case, the following assertion will fail as well?
{code}
        if (status.getState() == state) {
          ....
          assertTrue("" + index + ": " + status.getDiagnostics(),
              status.getDiagnostics().contains(diagnostics));
          ...
        }
{code}

bq. And previously, the code can be 137 or 143, depending on whether the container is terminated or killed. Haven't look into the details of YARN-2091, but please please make sure both scenarios are covered.
What's the differences between 137 and 143?

I think we may need update TestNMClient to cover all cases. , bq. This should be a rare case, but it should be possible. In this case, the following assertion will fail as well?

Sorry, I made a mistake on the case. The race condition I've observed before is that KillTransition is executed, and the the diagnostics info has been added. However, CLEANUP_CONTAINER is executed on another thread. Before it is executed, the container has already exit as normal, with the exit code 0.

See the code comment:
{code}
          // O is possible if CLEANUP_CONTAINER is executed too late
          // 137 is possible if the container is not terminated but killed
{code}

bq. What's the differences between 137 and 143?

I didn't look into the patch of YARN-2091. It seems that we still have 137 and 143 in ExitCode. We need to make sure the container will not exit with these two codes here., SUCCESS: Integrated in Hadoop-Yarn-trunk #581 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/581/])
YARN-2148. TestNMClient failed due more exit code values added and passed to AM (Wangda Tan via bikas) (bikas: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1602043)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1772 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1772/])
YARN-2148. TestNMClient failed due more exit code values added and passed to AM (Wangda Tan via bikas) (bikas: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1602043)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1799 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1799/])
YARN-2148. TestNMClient failed due more exit code values added and passed to AM (Wangda Tan via bikas) (bikas: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1602043)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java
, 

[~zjshen] [~leftnoteasy], thank you for the points.


{quote}
Previously, I have 0 here because it is possible that the container finishes so quickly that kill command even hasn't be processed.

However, CLEANUP_CONTAINER is executed on another thread. Before it is executed, the container has already exit as normal, with the exit code 0.
{quote}

I'm checking whether this case can happen. Please wait a moment.

{quote}
It seems that we still have 137 and 143 in ExitCode. We need to make sure the container will not exit with these two codes here.
{quote}

Is this because that the signal is sent from {{ContainerLaunch#cleanupContainer()}}(SIGTERM) and {{DelayedProcessKiller#run()}}(SIGKILL), right? If the answer is positive, {{ContainerImpl#exitCode}} is set in the {{KillTransition#transition}} before container's being signaled. Therefore, both cases are covered.

{code}
  @SuppressWarnings("unchecked") // dispatcher not typed
  public void cleanupContainer() throws IOException {
        ...
        final Signal signal = sleepDelayBeforeSigKill > 0
          ? Signal.TERM
          : Signal.KILL;
  }
{code}

, {quote}
The race condition I've observed before is that KillTransition is executed, and the the diagnostics info has been added. However, CLEANUP_CONTAINER is executed on another thread. Before it is executed, the container has already exit as normal, with the exit code 0
{quote}

This was a race condition between a thread which executes CLEANUP_CONTAINER and ContainerLauncher and KillTransition. {{ContainerImpl#exitCode}} is set in {{KillTransition}} after YARN-2091. Therefore, the case of the exit code 0 doesn't occur and it's also covered with the [~leftnoteasy]'s patch. I think it's consistent change.

{quote}
One more concern: ContainerExitStatus is a pubic class. YARN-2091 seems to be incompatible change, while the old code has been used for a while.
{quote}

YARN-2091 introduces new ContainerExitStatus. If old code uses old jar before YARN-2091, new exit code should be handled as INVALID or unknown exit code. IHMO, we should announce it for YARN application creators at the release time. One option is adding document which describe this., I still observed the test failure on slow machines for this case.  I think it could due to the slow start of CLEANUP_CONTAINER on this testbed, so I agree with comments from [~zjshen] that exit code 0 is still possible.
I will file a separate JIRA and deliver a quick patch to fix it (and the test which should include more informative messages).
, Filed YARN-2977 to fix this problem., [~djp] [~zjshen] Oh my bad. Rechecking the code and you're correct - it's possible that CLEANUP_CONTAINER is not handled in RM since machine is slow. In this case, exit code 0 is possible. I'll review it on YARN-2977., Thanks [~ozawa]!, Thanks [~ozawa]!]