[{{LocalDirsHandlerService#validatePaths}} appears to be misinterpreting drive spec (i.e. C:) as a scheme and rejecting it: "Path should be with file scheme or without scheme".

Approximately 37 test suites fails on Windows due to this problem.
, Additionally, there are 3 test suites failing with "com.google.inject.CreationException: Guice creation errors" that appear to have the same root cause as this.  That would bring the total to 40 test suites failing.
, This patch fix the issue that LocalDirsHandlerService#validatePaths misinterpreted drive spec. So, It will fix some of test failures., For the test TestContainerLaunch, after we fix the path issue. There are some other issues:
TestContainerLaunch#testSpecialCharSymlinks, I got:
java.io.IOException: Cannot run program "C:\hdc\hadoop-yarn-project\hadoop-yarn\hadoop-yarn-server\hadoop-yarn-server-nodemanager\target\org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.TestContainerLaunch-tmpDir\temp.sh" (in directory "target\org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.TestContainerLaunch-tmpDir"): CreateProcess error=193, %1 is not a valid Win32 application
	at java.lang.ProcessBuilder.start(Unknown Source)
	at org.apache.hadoop.util.Shell.runCommand(Shell.java:254)
	at org.apache.hadoop.util.Shell.run(Shell.java:229)
	at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:434)
	at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.TestContainerLaunch.testSpecialCharSymlinks(TestContainerLaunch.java:122)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.io.IOException: CreateProcess error=193, %1 is not a valid Win32 application
	at java.lang.ProcessImpl.create(Native Method)
	at java.lang.ProcessImpl.<init>(Unknown Source)
	at java.lang.ProcessImpl.start(Unknown Source)
	... 30 more


, For test failures on TestContainerLaunch#testContainerEnvVariables and TestContainerLaunch#testDelayedKill. The failure happens when we try to create a file, and we will kill the thread before we actually finish creating the file. On mac environment, the file will be created, but on the WINDOWS environment, the file can not be created. Based on my observation, this is still the issue on handling the partial write between unix-like environment and windows environment. The HADOOP-8982 has similar issue. The only difference is that on HADOOP-8982, it try to do the partial write to channel, and here is to the file., Hi, Xuan.  For the {{LocalDirsHandlerService#validatePaths}} change, I'm wondering if we can fix it without explicitly checking for Windows in this code.  I expect {{new Path(paths[i]).toUri()}} will do the right thing on all platforms.  Then, {{Path#toString}} already has the logic to trim the leading slash on Windows., Thanks, Xuan.  I applied the new patch and ran {{TestLogAggregationService}} as a sample, and it passed.

I think there is one more change we need to make.  The {{Path}} constructor internally will translate {{URISyntaxException}} to {{IllegalArgumentException}}.  (See {{Path#initialize}}.)  In {{LocalDirsHandlerService}}, we probably want to keep the old {{catch}} block, but switch it to catch {{IllegalArgumentException}} instead of {{URISyntaxException}}.  I'm not sure if any callers of {{validatePaths}} are expecting {{IllegalArgumentException}}, so if we preserve the behavior of translating errors to {{YarnException}}, then the change will be backwards-compatible.

Also, if {{URISyntaxException}} is no longer referenced anywhere in this class, then you can remove it from the imports at the top of the file.
, +1 for the patch.  Looks good., I just committed this. Thanks Xuan and Chris!]