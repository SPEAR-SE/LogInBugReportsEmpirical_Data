[Attaching patch that will put the content of {{YARN_CLASSPATH}} to the {{CLASSPATH}} if defined. I did tested the Linux variant of the script, but did only a limited tests with the windows one., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12615464/YARN-1429.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2522//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2522//console

This message is automatically generated., Wonder if we should add YARN_CLASSPATH to CLASSPATH before adding the jars under YARN_DIR and YAR_LIB_JARS_DIR:
{code}
 CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/${YARN_DIR}/*
 CLASSPATH=${CLASSPATH}:$HADOOP_YARN_HOME/${YARN_LIB_JARS_DIR}/*
 
+# Add user defined YARN_CLASSPATH to the class path (if defined)
+if [ -n "$YARN_CLASSPATH" ]; then
+  CLASSPATH=${CLASSPATH}:${YARN_CLASSPATH}
+fi
+
{code}, Hi [~kkambatl],
thank you very much for reviewing my change! I guess that the order depends on the use case. I felt that the {{YARN_CLASSPATH}} variable is meant for user to plug-in their custom jars, that are not nor should be required by YARN itself. My reasoning for putting such libraries at the end of the {{classpath}} was to prohibit user to inject their own dependency before YARN's and possibly cause random exceptions inside YARN code. For example by adding different {{protobuf}}, {{guava}}, pick-your-favourite dependency that is usually breaking binary compatibility between releases on the {{classpath}} prior the expected version. However I didn't realized that this actually might be desirable behavior in some cases. I'm not sure what should be the behavior here, so I would appreciate guidance., [~jarcec] [~kkambatl] Is YARN_CLASSPATH meant to be a replacement or something to augment the appropriate classpath? 

Based on the above, there seem to be 2 choices:

i) Either use YARN_CLASSPATH or $HADOOP_YARN_HOME/${YARN_DIR}/[lib] i.e user-provided classpath replaces the default values used. 
ii) Provide another user flag option ( similar to HADOOP's user classpath first flag ) to allow YARN_USER_CLASSPATH to be added either before or after the original CLASSPATH. (If augment is the chosen behavior, it might be better to rename the variable )
, Thanks [~hitesh] for your comments. 

My understanding is that YARN_CLASSPATH would augment the classpath. Agree YARN_USER_CLASSPATH might be a better name. Also, agree it would be better to have YARN_USER_CLASSPATH_FIRST which would be false (0) by default. If set to true (non-zero), the user specified classpath would go first., [~kkambatl] Sounds good. Minor nit - could the new name be such that it signifies classpath addition? , Attaching updated version that changed the name to {{YARN_USER_CLASSPATH}} and also introduced second variable {{YARN_USER_CLASSPATH_FIRST}} that will enable user to put the content at the beginning of the final classpath. I do feel that those names are quite descriptive, but please do not hesitate and let me know if you have better names in mind!, I've noticed that my generated patch can't be easily applied with {{patch}} utility. I'm having troubles with CRLF encoding of the original file versus LF encoding of generated patch. The {{git apply}} seems to be smart enough to over that but unix {{patch}} is failing on that. Is there anything like "svn apply"?, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12631149/YARN-1429.linux.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3187//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3187//console

This message is automatically generated., Verified the linux version of the patch. Couldn't get the yarn.cmd changes to apply cleanly - and don't have access to a Windows machine. Created YARN-1767 for the Windows version. 

+1. Committing this shortly. , Thanks Jarcec for the contribution. Just committed this to trunk and branch-2. , Forgot to mention. Thought about a better username, but the approach in the patch of using YARN_USER_CLASSPATH and updating the description in comments to capture the fact that it augments seemed enough to me. , SUCCESS: Integrated in Hadoop-trunk-Commit #5236 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5236/])
YARN-1429. *nix: Allow a way for users to augment classpath of YARN daemons. (Jarek Jarcec Cecho via kasha) (kasha: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1572405)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/bin/yarn
, FAILURE: Integrated in Hadoop-Yarn-trunk #494 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/494/])
YARN-1429. *nix: Allow a way for users to augment classpath of YARN daemons. (Jarek Jarcec Cecho via kasha) (kasha: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1572405)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/bin/yarn
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1686 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1686/])
YARN-1429. *nix: Allow a way for users to augment classpath of YARN daemons. (Jarek Jarcec Cecho via kasha) (kasha: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1572405)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/bin/yarn
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1711 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1711/])
YARN-1429. *nix: Allow a way for users to augment classpath of YARN daemons. (Jarek Jarcec Cecho via kasha) (kasha: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1572405)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/bin/yarn
]