[Hi [~cwensel]
I have assigned this issue to myself, if you want to work or already working on this please feel free to reassign., Hi [~cwensel]
Took a look @ code and test cases. Seems like its not a issue, if the filter value is placed within double quotes then its expected to be read as a string, if not it will read as numerical object itself (refer {{TestTimelineWebServices.testPrimaryFilterNumericString() && testPrimaryFilterNumericStringWithQuotes()}} )
May be you can share the URL which you are using to store and accessing the timeline entities through webservice, which can help in validating this issue further
, First, it's a little odd to put a value in quotes that is part of a query string. but that's a reasonable workaround though non-obvious.

Second, this then becomes a bug in Apache Tez DAGClientTimelineImpl since it does not quote values as it builds the query string.

fwiw, using quotes to prevent interpreting 77777 as a number instead of a string makes a lot of sense. but quoting 7ABDCEFG to make sure it isn't interpreted as a 7 is again non-intuitive.

, bq. but quoting 7ABDCEFG to make sure it isn't interpreted as a 7 is again non-intuitive

It's a good point, and I was also confused by this recently.  After converting the filter String to an Object, we could check that the Object can be converted back into the correct String, and if it can't, fall back to using the String., +1 for the approach mentioned by [~billie.rinaldi], Submitting patch please review..., Attaching the patch, I didn't remember where we made the comment, but said the filter value is the JSON object instead of the string. Therefore, it could be a number, a string or even a nested Jason structure, couldn't it? In this case, 123 and "123" mean different things. Without quotes, the value is considered as number. It seems that jackson ObjectReader is parsing the numeric value as an ordinary atoi method, stopping at the first non-numeric letter. If the value cannot parse it into a number at all, it will be taken as the string. Need to double check the behavior.

I'm not sure the aforementioned method is semantically correct if we assume the filter value is a Json object. In addition, if the value is a nexted Json structure but not well formatted, such as 
{code}
{     'a':1,    'b':       2}
{code}
After being converted to a Json object and then to a string, will it still be the aforementioned string, or in a pretty format as follows
{code}
{
     'a':1,
     'b': 2
}
{code}
If it is the latter case, the string value is different from the original one, and the nested Json structure will be mistaken as a string, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12690592/YARN-3009.20150108-1.patch
  against trunk revision fe8d2bd.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6272//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6272//console

This message is automatically generated., bq. the nested Json structure will be mistaken as a string
Okay, would it be sufficient if we did not perform the comparison with the original String when the resulting Object is a List or Map?  Or do you think a different approach would be better?, Feels as if the api is becoming conflated if the filter value could be a nested JSON object instead of a literal value (string or number). Let alone brittle.

If this is a requirement of the api, I would expose a new parameter on the query that clearly states the value should be interpreted as an object. 

but I suspect this is better served instead of key=nested_object as path/to/attribute=literal_value (or a composition of them) query.

, Hi [~zjshen],
     Thanks for pointing out the interface, i think we could add a test case which  could take any other object like List/MAP also .
bq. would it be sufficient if we did not perform the comparison with the original String when the resulting Object is a List or Map? Or do you think a different approach would be better?
As the resulting object can be of any object and not just List or Map it would not be feasible in this way but we can think the other way if the resulting object is subclass of {{java.lang.Number}}, then we can have the check which i have given earlier, but not sure even this approach can break in any other case. 
bq.I would expose a new parameter on the query that clearly states the value should be interpreted as an object.
This also seems to be a suitable alternate for this issue, like we can take the type of object[/flag indicating not  wrapper objects ] as the third field separated by a comma character. 
bq. better served instead of key=nested_object as path/to/attribute=literal_value (or a composition of them)
Did not get this can you give an example ?
[~zjshen] which approach would be better ?
, Hi [~zjshen],[~billie.rinaldi] & [~cwensel]
I am uploading a patch with the approach which i had mentioned {{if the resulting object is subclass of java.lang.Number, then we can have the check which i have given earlier}}. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12691560/YARN-3009.20150111-1.patch
  against trunk revision ef3c3a8.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6307//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/6307//artifact/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-applicationhistoryservice.html
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6307//console

This message is automatically generated., Exception Handling is similar to earlier approach {{In case of any Exception return the parameter string itself as the object returned}}, but if required we can catch the IOException and log the exception msg to avoid the findbug...., bq. but I suspect this is better served instead of key=nested_object as path/to/attribute=literal_value (or a composition of them) query.

Would you please give an example about "path/to/attribute=literal_value"?

Filter are allows to be the nested JSON content, though usually people doesn't use it in this fashion. IAC, we still chose to accept an object to be generalized. For example, the value of primary filter could be a composite: {{primaryFilter=name:\{"first name":"Chris", "last name" ="Wensel"\}.}}

Personally, I'm a bit reluctant to modifying the behavior of translating the value to a JSON object, because it may break the compatibility to the existing Timeline API users. On the other side, we have the walk around to force the interpreter to treat the value as a string., Hi [~cwensel]
Hope the approach proposed as part of the patch is fine with you?

[~zjshen], 
Any comments on the earlier work around patch ? , [~Naganarasimha], thanks for the patch. I think your work around is going to mitigate the problem. However, my concern is whether we should do this work around instead of how to do it correctly. While I understand it's counter-intuitive to use (double) quotes to enforce the value as a string, I'm afraid *atoi* or *atof* of jackson parser is probably doing the right thing. A string that starts with numeric char, but contains non-numeric char could still be a valid number. For example,the value is {{123456D}} or {{123.45E+6}}. On the other side, we can also consider them as a string, e.g., representing an ID.
, Hi [~zjshen],
     I had tested exponential numeric value {{ assertTrue(Number.class.isAssignableFrom(TimelineWebServices.readValue("" + Float.MAX_VALUE).getClass()));}}
but as you informed the work arnd solution will not work in few cases like {{123.45E+6}} as the representation of double is diff {{123.45E+6 => 1.2345E+8 }}. So can we close this issue as will not fix ?, Hi [~cwensel]
           From the above discussions i could conclude that other options for overcoming issue is not currently possible(due to impacts specified  by [~zjshen]) and no proper work around too, so i plan to close this issue as wont fix, please inform if any issues.
, As per the discussions we could conclude that other options for overcoming issue is not currently possible(due to impacts specified by Zhijie Shen) and no proper work around too, so will close this issue as wont fix, ]