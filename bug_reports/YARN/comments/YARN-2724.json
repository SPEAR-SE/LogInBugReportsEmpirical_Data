[The problem here is due to calculation of file length before even trying to open the file. Log aggregator reads the file length of the log file that is to be aggregated and records it. Then it tries to go and read the file contents. If the log aggregator does not have the permissions to access the file, it will get "Permission Denied". Just like what is seen here.

What application were you guys trying to run while you encountered this error?

My guess is if there is a specific application where this happens, the NM user should have the access to the log file that is created by that application. As the log aggregation is done by NM user, giving it the permissions to access the generated log file should fix this issue., bq. As the log aggregation is done by NM user, giving it the permissions to access the generated log file should fix this issue.
Agreed. I guess the problem that YARN should address is to surface the issue with aggregation to the end-user - right now it's not clear what really happened., As [~mitdesai] mentioned, "the problem here is due to calculation of file length before even trying to open the file. Log aggregator reads the file length of the log file that is to be aggregated and records it. Then it tries to go and read the file contents."

For the issue reported by [~sumitmohanty], it is because of file permission. We can not aggregate the log file.

Looking at the code
{code}
        final long fileLength = logFile.length();
        // Write the logFile Type
        out.writeUTF(logFile.getName());

        // Write the log length as UTF so that it is printable
        out.writeUTF(String.valueOf(fileLength));

        // Write the log itself
        FileInputStream in = null;
        try {
          in = SecureIOUtils.openForRead(logFile, getUser(), null);
          byte[] buf = new byte[65535];
          int len = 0;
          long bytesLeft = fileLength;
          while ((len = in.read(buf)) != -1) {
            //If buffer contents within fileLength, write
            if (len < bytesLeft) {
              out.write(buf, 0, len);
              bytesLeft-=len;
            }
            //else only write contents within fileLength, then exit early
            else {
              out.write(buf, 0, (int)bytesLeft);
              break;
            }
          }
          long newLength = logFile.length();
          if(fileLength < newLength) {
            LOG.warn("Aggregated logs truncated by approximately "+
                (newLength-fileLength) +" bytes.");
          }
          this.uploadedFiles.add(logFile);
        } catch (IOException e) {
          String message = "Error aggregating log file. Log file : "
              + logFile.getAbsolutePath() + e.getMessage();
          LOG.error(message, e);
          out.write(message.getBytes());
        } finally {
          if (in != null) {
            in.close();
          }
        }
{code}
Excluding the permission issue, there will be more issues which can cause the same problem.
, So, for the exception reported here is because of the file permission, and we could not aggregated this log file. And aggregated file is badly format.
We could fix this issue first in this ticket., Uploaded a new patch to fix this issue that the aggregated file has corrupt format because some of logs file can not be opened (such as permission issue as Sumit reported.)., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12676482/YARN-2724.1.patch
  against trunk revision 3b12fd6.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:red}-1 eclipse:eclipse{color}.  The patch failed to build with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5508//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5508//console

This message is automatically generated., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12676482/YARN-2724.1.patch
  against trunk revision f729ecf.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5512//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5512//console

This message is automatically generated., [~xgong], w.r.t to the fix, I think we shouldn't put {{out.writeUTF(logFile.getName());}} and {{out.writeUTF(String.valueOf(fileLength));}} into the try block where file content is being written, because it will raise other race conditions. For example, if {{out.writeUTF(logFile.getName());}} throws the exception, the exception message will be written into the file without name and length being written upfront, corrupting the log file format again.

Other than the permission issue, in general, IOException is going to happen at any iteration while copying buf into the output stream, resulting writing fewer bytes than predefined file length. One possible solution is to fill the remaining space with all 0. For example, given the file length is 1000, for some reason, writing 500 ~ 600 bytes throws the exception,  we can try to fill 0 from pos 500 to pos 999. Will file a separate ticket for general IOException while copying the file., Thanks for reviewing, [~zjshen]. You are right...It do raise other race conditions. The new patch will fix this.
For the ticket, we only consider the issue that can not open fileInputStream..., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12676532/YARN-2724.2.patch
  against trunk revision d71d40a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5514//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/5514//artifact/patchprocess/newPatchFindbugsWarningshadoop-yarn-common.html
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5514//console

This message is automatically generated., fix -1 on findBug, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12676535/YARN-2724.3.patch
  against trunk revision d71d40a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5516//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5516//console

This message is automatically generated., +1 for the latest patch. Will commit it later today to give [~mitdesai] and [~vinodkv] a chance to look at it., I'll take a look shortly., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12676633/YARN-2724.4.patch
  against trunk revision d71d40a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5518//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5518//console

This message is automatically generated., Same patch, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12676687/YARN-2724.5.patch
  against trunk revision d71d40a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5522//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5522//console

This message is automatically generated., [~mitdesai], any comments so far?, Sorry for taking too long. Got stuck in something else.
YARN-2724.5.patch looks good to me.

+1 (non-binding), No worry. Thanks for review, Mit! I'll go ahead to commit the patch., Committed the patch to trunk, branch-2, and branch-2.6. Thanks Xuan for the patch and Mit for review!, FAILURE: Integrated in Hadoop-trunk-Commit #6334 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6334/])
YARN-2724. Skipped uploading a local log file to HDFS if exception is raised when opening it. Contributed by Xuan Gong. (zjshen: rev e31f0a6558b106662c83e1f797216e412b6689a9)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/logaggregation/TestAggregatedLogFormat.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java
* hadoop-yarn-project/CHANGES.txt
]