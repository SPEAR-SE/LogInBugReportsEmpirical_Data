[Hi [~lyn]

Thanks for reporting the issue. *org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.policies.FifoPolicy.FifoComparator.compare(Schedulable, Schedulable)* seems fine to me as the lower the priority number, the schedule holds higher value. But i think the problem is in Collection.sort in FSLeafQueue which will order the elements in ascending order. Any thoughts.?

Here is a small test case
{code}

    //create 2 schedule with priority
    Schedulable s1 = createSchedulable(1);
    Schedulable s2 = createSchedulable(2);
    
    FifoPolicy fp = new FifoPolicy();
    Comparator<Schedulable> fpComparator = fp.getComparator();
    int compare = fpComparator.compare(s1, s2);
    //ensure smaller the number, is considered higher
    assertTrue(compare > 0);
    
    List<Schedulable> list = new ArrayList<>();
    list.add(s1);
    list.add(s2);
    Collections.sort(list,fpComparator);
    assertEquals(s1,list.get(0)); //fails
    assertEquals(s2,list.get(1)); //fails
  
{code}, I think it follows the contract of compare, but as Collections.sort is processed, in case of priority its suppose to negate. just flipping the s1 and s2 may serve the purpose, but violate compare contract, As per the application priority design, *Higher Interger* indicates *Higher priority*, so comparator implementation seems to be fine for me. And the test by [~ajithshetty] also proving higher prioirty value i.e 2 is first in the list., Hi [~rohithsharma]

Thanks for the input. 

{quote} *Higher Integer* indicates *Higher priority* {quote}

So, i think we should flip the operands in org.apache.hadoop.yarn.api.records.Priority.compareTo(Priority), Please ignore previous comment, the current code is fine if {quote} *Higher Integer* indicates *Higher Priority* {quote} 
i overlooked it :), Thanks!   I thought "Higher Interger indicates Lower priority", so I am wrong. The current code is fine.]