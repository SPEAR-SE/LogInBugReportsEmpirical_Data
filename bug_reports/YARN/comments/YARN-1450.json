[You can see more logs at [Jenkins|https://builds.apache.org/job/Hadoop-Yarn-trunk/ws/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/target/surefire-reports/]., I'll attach the log which I reproduced because the above link became old., Bug cause:
YARN-1303 removed parameter --shell_command in DistShell.AppMaster, cause DistShell.client have parameter --shell_command, unfortunately TestUnmanagedAMLauncher launch DistShell.AppMaster directly, causing this bug.
Patch changes:
Add parameter --shell_command back to DistShell.AppMaster, this parameter takes effect only if shell command file does not exists.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12616079/YARN-1450.v1.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2547//console

This message is automatically generated., [~decster]  Thanks for taking this ticket.
Your solution can definitely solve the test case failure. But I do no think it is the proper solution.
The ticket YARN-1303 is used to solve the issue that we can not allow multiple commands separating with ";" in distributed-shell. The reason why we can not do that, you might need to check the comments at YARN-1303.
So, if we launch the AM with --shell_command, we will meet the same issue as before (can not allow multiple commands separating with ";"  or "|"). Right ?

So, we may need to stick to the same solution as YARN-1303, create a file to save the shell_command, and let AM find out whether this file exists or not.

We can either try to parse the cmd from --cmd option, to figure out which part is --shell_command, and pull all the commands into a file. But this solution may not be stable, since we need to get all the characters between --shell_command and the next "--". And it can be easily break.

The simplest but a little bit tedious solution could be that we just add all the options that AM can support including --shell_command, --shell_args, --shell_scripts and --log4j_properties , excluding --cmd option into UnmanagedAMLaucher, and handle them as we did in org.apache.hadoop.yarn.applications.distributedshell.Client.

thoughts ?, bq. So, if we launch the AM with --shell_command, we will meet the same issue as before (can not allow multiple commands separating with ";" or "|"). Right ?
Actually there is no issue, the AM is started standalone(no client -> RM -> NM -> launch AM), we don't need to care about escaping/unescaping issues, allow multiple commands separating with ";", ";", "|" or env variable should be fine. 
There is nothing wrong about --shell_command, anything you can write to a file you can pass with cmdline, the issue in YARN-1303 is cuased by client try to construct a whole cmd without proper escaping support. , Attach patch generated with --no-prefix, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12616159/YARN-1450.v2.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2552//console

This message is automatically generated., Let us take a look at an example: 
This is the cmd we are giving:
JAVA_HOME /bin/java -Xmx512m org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster --shell_command pwd;ls --num_containers 5

because of ";" in the shell_command we are giving, the actual cmd launched for AM will become JAVA_HOME /bin/java -Xmx512m org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster --shell_command pwd. 

Then AM will launch the container with --shell_command pwd.

Apparently, the container gets the wrong shell_command. Right ??

If we save --shell_command into a file, then the command launch for AM will become:
JAVA_HOME /bin/java -Xmx512m org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster  --num_containers 5.
Then AM can read shell_command back from the file, and launch 5 containers with shell_command pwd;ls. 
Of course, the container will not get expect result. But What we are doing here is let containers launch exact the same shell_commands that the clients give us.

Make sense ?, Seems like the patch is undoing what YARN-1303 did - shouldn't be doing that.

The real problem seems to be that unmanaged-AM is not equipped to run AMs that need extra local-resources. If possible we need to fix that. Otherwise, we should change the test., bq. JAVA_HOME /bin/java -Xmx512m org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster --shell_command pwd;ls --num_containers 5

if you pass this to current distshell client, it will fail too, like your final example in YARN-1303[https://issues.apache.org/jira/browse/YARN-1303?focusedCommentId=13828462&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13828462], you should call:

JAVA_HOME /bin/java -Xmx512m org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster --shell_command "pwd;ls" --num_containers 5, bq. Seems like the patch is undoing what YARN-1303 did - shouldn't be doing that.
This is not the undoing of YARN-1303, I just add another option so some application need to call distshell.AppMaster directly can use. it is fine that Distshell.Client can not benefit from it., Let me state the problem more clearly:
Story in YARN-1303: 
1. Client accept  --shell_command "pwd;ls"
2. Client can not construct a whole cmdline with proper escape support if shell_command contains special chars like ";", so it write the "pwd;ls" to file instead
3. AM started, read shell_command from file, get "pwd;ls"
Story in this jira YARN-1450:
1. some app directly launch AM without client, AM directly accept --shell_command "pwd;ls"
, The patch didn't apply because my code base was old, update new patch, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12616189/YARN-1450.v3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2559//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2559//console

This message is automatically generated., The failed test TestUnmanagedAMLauncher#testDSShell can cover this code, so I think new test case is not needed., The point I am making is that unmanaged-AM should work for all applications, not just distributed-shell. And the way it runs now, it DOES NOT work. You can try running a MR app under unmanaged-AM and see for yourselves - it will fail mainly because Unmanaged AM doesn't seem to have a concept of the client code. Which is the main reason for this test failing. We can either
 - Disable this test
 - Change this test to not use distributed-shell
 - Or fix unmanaged-AM to start supporting client-code too. Ideally this can be done by making UnManaged-AM implement ApplicationClientProtocol and let any application take advantage of an unmanaged AM., Hi Vinod, 
Thanks for the explanation, I think I am confused about the propose of UnmanagedAM, the document of UnmanagedAM says:
bq. The UnmanagedLauncher is a simple client that launches and unmanaged AM. An unmanagedAM is an AM that is not launched and managed by the RM.
I thought it is used as a tool, new apps can use this to launch AM locally without create/start YarnClient. If old apps have a workable standalone AM, it can be launched by this tool too. I did not consider it as a tool to launch old client based apps, of course it will fail if it is used to launch arbitrarily old apps.  Which leads to the question:
1. What is the usage of UnmanagedAM? Support new special apps which need a local AM or support all apps? If the later it is far from complete, so either disable this test or write&use a simple AM in test.
2. Is distributedshell.ApplicationMaster not supposed to be launched standalone and must only be called by distributedshell.Client?
, Attach new patch, changes:
Write a standalone simple AM to be used in test., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12617005/YARN-1450.v4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2597//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2597//console

This message is automatically generated., bq. 1. What is the usage of UnmanagedAM? Support new special apps which need a local AM or support all apps? If the later it is far from complete, so either disable this test or write&use a simple AM in test.
UnmanagedAM application was written to help developers debug their YARN applications/frameworks by running AM on the client machine.

bq. 2. Is distributedshell.ApplicationMaster not supposed to be launched standalone and must only be called by distributedshell.Client?
Not every AM ever runs by itself. More often than not, client sets up something, then submits an app to the RM which then starts the AM. In case of unmanaged AM, the flow should be similar, client sets up stuff, then submits the app but runs the AM locally. It's the part about client setting up stuff that is missing today and that IMO needs fixing.
, That said, good that you've removed the dist-shell dependency on the patch.

Couple of comments:
 - Remove dist-shell from the module also as a dependency
 - Wrap lines longer than 80 chars, Thanks for the explanation and review Vinod, attach new patch addressing your comments., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12617330/YARN-1450.v5.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2610//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2610//console

This message is automatically generated., Committed this to trunk and branch-2. Thanks Binglin!

Tx for being patient while we got it right., SUCCESS: Integrated in Hadoop-trunk-Commit #4845 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4845/])
YARN-1450. Fixed test failure in TestUnmanagedAMLauncher by removing its dependency on distributed-shell. Contributed by Binglin Chang. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548619)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/test/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/TestUnmanagedAMLauncher.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #414 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/414/])
YARN-1450. Fixed test failure in TestUnmanagedAMLauncher by removing its dependency on distributed-shell. Contributed by Binglin Chang. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548619)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/test/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/TestUnmanagedAMLauncher.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1605 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1605/])
YARN-1450. Fixed test failure in TestUnmanagedAMLauncher by removing its dependency on distributed-shell. Contributed by Binglin Chang. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548619)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/test/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/TestUnmanagedAMLauncher.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1631 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1631/])
YARN-1450. Fixed test failure in TestUnmanagedAMLauncher by removing its dependency on distributed-shell. Contributed by Binglin Chang. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1548619)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-unmanaged-am-launcher/src/test/java/org/apache/hadoop/yarn/applications/unmanagedamlauncher/TestUnmanagedAMLauncher.java
]