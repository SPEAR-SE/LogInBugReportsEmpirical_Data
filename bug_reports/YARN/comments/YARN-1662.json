[A timed reservation logic if we can implement here, then it will be safer for the fresh allocation to try in some other node.
I have reviewd the scheduler part and found that without a seperate timer thread, this can be achieved.

addReReservation() will be invoked when the same node tries to rereserve the same applications requests in the node.
This is a multiset, hence the internal count will increment everytime when this addReReservation() is performed.
Also this will be incremented in every 1 sec(node heartbeat interval) only.

I wish to add a code like below in LeafQueue::assignContainer() method. If the limit exceeds, i will try unreseve the same from the node.
This code will hit when the same application trying to re-reserve again in same node. 

    } else {
      // Reserve by 'charging' in advance...
      reserve(application, priority, node, rmContainer, container);
      
      // Check for re-reservation limit. In this case, unreserve and try for a
      // fresh allocation.
      if (RESERVATION_TIME_LIMIT != 0
          && application.getReReservations(priority) > RESERVATION_TIME_LIMIT) {
        unreserve(application, priority, node, rmContainer);
        return Resources.none();
      }

So for the next nodeupdate from some other node, CS can try allocate resource to this application.

NB: Reservation is to ensure that same task can stick on to same node where its better to run. 
A bigger configurable limit which is based on the nature of the tasks running, can still achieve the above behavior.

Please share your thoughts., Hi [~sunilg], YARN-1198 has fixed a number of headRoom issues to make sure the headroom is correct so that the reducer preemption will kick in correctly. In that case, this problem may be resolved ?, Yes [~jianhe]
we can close this issue. After YARN-1769, we have a better reservation too.

I checked this and its not happening now.]