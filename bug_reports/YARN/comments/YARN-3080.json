[Marking as Major because this is an alpha feature, Tested on trunk, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700301/YARN-3080.patch
  against trunk revision 16bd79e.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 7 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager:

                  org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.TestResourceLocalizationService

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6705//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/6705//artifact/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-nodemanager.html
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6705//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700542/YARN-3080.patch
  against trunk revision 73bcfa9.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 7 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager:

                  org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.TestResourceLocalizationService

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6710//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/6710//artifact/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-nodemanager.html
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6710//console

This message is automatically generated., Fixed the findbug errors., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12700921/YARN-3080.patch
  against trunk revision d140d76.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6749//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6749//console

This message is automatically generated., [~raviprakash], [~vinodkv], [~vvasudev] [~ywskycn]

Please review. , Updated callable to runnable., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12701213/YARN-3080.patch
  against trunk revision bfbf076.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6769//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6769//console

This message is automatically generated., [~ashahab], I think we can simply fix this by using the pid of the session script bash process instead since docker run will block until it exits. If docker container exits, the session script bash process will exit immediately. As for signalContainer, we can use docker kill --signal="SIGNAL" containerId instead., And how will you derive the container is from pid? By querying all
containers in the NodeManager? That does not seem like a good option.

, [~chenchun], Also, other threads in the NM may depend on the actual PID of the launched JVM, and I'm not going to preclude any future processes from depending upon this. The pidfile is supposed to be populated right after the container is launched, not after the process has finished. The DockerContainerExecutor will not alter these fundamental api and expectations of the NM from a container executor. Therefore, getting the actual PID from docker inspect is the most accurate and recommended way.
, Getting getting the actual PID from docker inspect is good, but it is too complex. I think nm should use 
We sloved this by the same way as DefaultContainerExecutor(The same as [~chenchun]), and it works well., [~beckham007] Thanks for your comment.
So you're saying that if I send a signal to the pid of the session script(as DefaultContainerExecutor does), it will work on the process that docker is running, and potentially kill it?

Please help me clarify my understanding:
I am running the following steps:
First I create a file similar to the session script. It writes the pid of the session to a pidfile
{code}
$cat > bash_session_pid.sh <<EOF
> #!/bin/bash
> echo $$ > /tmp/pidfile
> exec setsid bash -c 'docker run -itd ubuntu sleep infinity'
> EOF
{code}

I chmod and run this script which starts a docker container
{code}
$chmod a+x bash_session_pid.sh
$./bash_session_pid.sh
$docker ps 
1b8ee377e3d2        ubuntu:14.04        "sleep infinity"    3 minutes ago       Up 3 minutes                            cranky_stallman
{code}

Now I cat the pid of the session, and it says the pid is 9281
{code}
$cat /tmp/pidfile
9281
{code}


As you've suggested, I send a kill signal to the pid, hoping that'd kill the container
{code}
$kill -9 9281
{code}
I check if the docker container is killed:
{code}
$docker ps
1b8ee377e3d2        ubuntu:14.04        "sleep infinity"    6 minutes ago       Up 6 minutes                            cranky_stallman
{code}

Since your method did not kill the container, I get the pid of the process running under the container:
{code}
$docker inspect 1b8ee377e3d2
9289
{code}
I check the tree of this process:
{code}
$pstree -ps 9289
init(1)---docker(6512)---sleep(9289)
{code}

As I had expected, this process is a child of the docker daemon, and therefore, if it's killed, the container will be killed. Therefore, I send a kill signal to this pid:
{code}
$kill -9 9289
{code}

Now I verify if the container is alive:
{code}
$docker ps
{code} 
Container is dead. 
From what I understand, the session pid has no relation to the actual pid of the container, and therefore, sending it signal is meaningless.
Therefore, if that meaningless pid is in the pidfile, NodeManager/ResourceManager will not be able to send signal to containers as needed.
Please let me know where my understanding is mistaken, and I gladly will switch it to the simpler implementation., Sorry for mistaking.
The pidfile has two functions. 1. When NM restarting, it use the pid to check whether the container finished. 2. As [~chenchun] said, "As for signalContainer, we can use docker kill --signal="SIGNAL" containerId instead.", [~chengzhendong888], you are implying that the pidfile in future will never be used for anything else? Container Executors are required to provide a correct pidfile, and that's the api contract between them and the NodeManager. I don't see why DockerContainerExecutor should violate that contract.

Also, how would you derive a containerId from a pid in the NM? The pid that will be sent to signal container won't even be the correct pid(it will be the session script pid).

, [~ashahab] sorry for the late response. The kill functionality uses the "kill -9 -$PID" form which sends the kill signal to the process as well as all the children, grandchildren, etc. There's a more detailed explanation here - http://stackoverflow.com/a/15139734. The code that generates the kill command is in Shell.java  - look for getSignalKillCommand., I agree with that Varun. However, I'm not sure the process launched under
docker is a child of the sessionScript(see my example above). I can be
wrong though.

On Sun, Mar 1, 2015 at 11:09 PM, Varun Vasudev (JIRA) <jira@apache.org>

, Can you post another example showing the process tree before you killed the bash session? Also instead of "kill -9 9289", can you try "kill -9 -9289"(with the right pid instead of 9289)?, We can use "yarn containerId" as docker "container name". So, docker kill "yarn containerId" will correctly kill the docker container.
, We can use "yarn containerId" as docker "container name". So, docker kill "yarn containerId" will correctly kill the docker container.
, We can use "yarn containerId" as docker "container name". So, docker kill "yarn containerId" will correctly kill the docker container.
, [~vvasudev] the kill -9  couldn't work in this situation.
{quote}
[gaia@c112 ~]$ ps -ef|grep 7188 
gaia      7188 16807  0 14:46 ?        00:00:00 bash /data/gaia/data/yarn/local/usercache/gaia/appcache/application_1424999012322_0960/container_1424999012322_0960_01_000002/docker_container_executor.sh
gaia      7190  7188  0 14:46 ?        00:00:00 /usr/bin/docker run --rm --name container_1424999012322_0960_01_000002 -e GAIA_HOST_IP=10.149.27.112 -e GAIA_API_SERVER=http://shpc-test.api.oa.com/api -e GAIA_CLUSTER_ID=shpc-test -e GAIA_QUEUE=root.gaia -e GAIA_APP_NAME=dev_gaia -e GAIA_INSTANCE_ID=1 -e GAIA_CONTAINER_ID=container_1424999012322_0960_01_000002 --memory=256M --cpu-shares=1020 -v /data/gaia/logs/container-logs/application_1424999012322_0960/container_1424999012322_0960_01_000002:/data/gaia/logs/container-logs/application_1424999012322_0960/container_1424999012322_0960_01_000002 -v /data/gaia/data/yarn/local/usercache/gaia/appcache/application_1424999012322_0960/container_1424999012322_0960_01_000002:/data/gaia/data/yarn/local/usercache/gaia/appcache/application_1424999012322_0960/container_1424999012322_0960_01_000002 -P docker.oa.com:8080/library/dev_gaia_repo:v2 bash /data/gaia/data/yarn/local/usercache/gaia/appcache/application_1424999012322_0960/container_1424999012322_0960_01_000002/launch_container.sh
gaia     26414 32596  0 18:10 pts/12   00:00:00 grep 7188
[gaia@c112 ~]$ kill -9 7188
[gaia@c112 ~]$ ps -ef|grep 7188
gaia     26709 32596  0 18:10 pts/12   00:00:00 grep 7188
{quote}

but the parent pid has changed to 1.
{quote}
[gaia@c112 ~]$ ps -ef|grep 7190
gaia      7190     1  0 14:46 ?        00:00:00 /usr/bin/docker run --rm --name container_1424999012322_0960_01_000002 -e GAIA_HOST_IP=10.149.27.112 -e GAIA_API_SERVER=http://shpc-test.api.oa.com/api -e GAIA_CLUSTER_ID=shpc-test -e GAIA_QUEUE=root.gaia -e GAIA_APP_NAME=dev_gaia -e GAIA_INSTANCE_ID=1 -e GAIA_CONTAINER_ID=container_1424999012322_0960_01_000002 --memory=256M --cpu-shares=1020 -v /data/gaia/logs/container-logs/application_1424999012322_0960/container_1424999012322_0960_01_000002:/data/gaia/logs/container-logs/application_1424999012322_0960/container_1424999012322_0960_01_000002 -v /data/gaia/data/yarn/local/usercache/gaia/appcache/application_1424999012322_0960/container_1424999012322_0960_01_000002:/data/gaia/data/yarn/local/usercache/gaia/appcache/application_1424999012322_0960/container_1424999012322_0960_01_000002 -P docker.oa.com:8080/library/dev_gaia_repo:v2 bash /data/gaia/data/yarn/local/usercache/gaia/appcache/application_1424999012322_0960/container_1424999012322_0960_01_000002/launch_container.sh
gaia     28687 32596  0 18:11 pts/12   00:00:00 grep 7190
{quote}
and the docker container still running
{quote}
[gaia@c112 ~]$ docker ps 
CONTAINER ID        IMAGE                                            COMMAND                CREATED             STATUS              PORTS                                               NAMES 
235a2dc20c56        docker.oa.com:8080/library/dev_gaia_repo:v2      "/etc/rc.local bash    3 hours ago         Up 3 hours          0.0.0.0:49861->36000/tcp                            container_1424999012322_0960_01_000002   
{quote}, [~beckham007] - we don't run "kill -9 $PID", we run "kill -9 -$PID". In your example, you should have run "kill -9 -7188"., [~vvasudev], Thanks again for looking into this.

I'm fine with the simpler implementation as long as it works. However, I'm convinced it does not kill the process:
{code}

root@10-10-10-101:~# bash -x ./bash_test.sh 
+ echo 11163
+ exec bash -x ./docker_launch.sh
+ docker run -itd ubuntu bash -c 'sleep infinity'
48df7021c1c2402e77069fad8c9fced6fd74dfc00fc3b6d67b2b4fac86585c86
root@10-10-10-101:~# docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
48df7021c1c2        ubuntu:14.04        "bash -c 'sleep infi   5 seconds ago       Up 4 seconds                            silly_lumiere       
root@10-10-10-101:~# cat /tmp/pidfile 
11163
root@10-10-10-101:~# kill -9 -11163
-bash: kill: (-11163) - No such process
root@10-10-10-101:~# docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
48df7021c1c2        ubuntu:14.04        "bash -c 'sleep infi   27 seconds ago      Up 26 seconds                           silly_lumiere       
root@10-10-10-101:~# docker inspect --format {{.State.Pid}} 48df7021c1c2
11171
root@10-10-10-101:~# pstree -ps 11171
init(1)---docker(6512)---sleep(11171)
root@10-10-10-101:~# kill -9 11171
root@10-10-10-101:~# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

{code}, [~vvasudev] ,

[~ashahab] is right - docker run ( *irrespective of whether we run in detached mode or not* ) talks to the docker daemon which in turn sets up the appropriate environment before launching the process. For better or worse, the 'contained' process is always a child of the docker daemon and has no relation (from a process tree perspective) to the process that executes 'docker run'.  , [~sidharta-s] Thanks for looking into this.
[~vvasudev], Do you have additional review comments?, [~vinodkv], Do you think you can review this? I have several other patches which are dependent on this.
Thanks!, Removed gitignore, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12703979/YARN-3080.patch
  against trunk revision 30c428a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6921//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6921//console

This message is automatically generated., Canceling since DockerContainerExecutor has been deprecated.
Please update if you feel this is a security fix pertaining to a released version of hadoop.]