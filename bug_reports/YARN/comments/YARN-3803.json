[In LocalizedResource class in state transition there are following transitions:
{code}
// From INIT (ref == 0, awaiting req)
    .addTransition(ResourceState.INIT, ResourceState.DOWNLOADING,
        ResourceEventType.REQUEST, new FetchResourceTransition())

    // From DOWNLOADING (ref > 0, may be localizing)
    .addTransition(ResourceState.DOWNLOADING, ResourceState.DOWNLOADING,
        ResourceEventType.REQUEST, new DuplicateFetchResourceTransition())
{code}

So it assumes that if "from state" and "to state" is _DOWNLOADING_ and _ResourceEventType_ is _REQUEST_ then resource is being downloaded and transition becomes _DuplicateFetchResourceTransition_.
Problem is that "ref" is not greater then 0 here, as resources were cleaned up during first attempt and we end up in the situation where nothing is happening until RM kills this app.
, This situation is easily reproducible while running any M/R job as user with id < 500 on a cluster with single NM using LinuxContainerExecutor.

So far the only solution I found is to proceed with localization in DuplicateFetchResourceTransition if ref == 0.
This solution does not seem to look very clean according to state transitions, but there is no otherwise any evidence that previous container localization failed.

I would appreciate comments/thoughts on this, This seems like a serious issue. Any reason for marking it Minor? , [~kasha] It happens only if you have single node (at least in my testing) - since AM 2nd+ attempt will happen on the same node. Though - I was debating whether to make it Major or not. I can change it to major.

I will post a patch later today for the fix. , We have this other issue because of which multiple AMs for the same app get assigned to the same node. So, this could be a pretty serious issue. , Changed to Major, I apologize for this one. It is not an issue in branches I mentioned, we just had duplicates handled incorrectly.]