[I think allocate method using DOMINANT RESOURCE CALCULATOR, AppMaster should also be the same.
{code:title=FairScheduler.java|borderStyle=solid}
  @Override
  public Allocation allocate(ApplicationAttemptId appAttemptId,
      List<ResourceRequest> ask, List<ContainerId> release,
      List<String> blacklistAdditions, List<String> blacklistRemovals) {

    // Make sure this application exists
    FSAppAttempt application = getSchedulerApp(appAttemptId);
    if (application == null) {
      LOG.info("Calling allocate on removed " +
          "or non existant application " + appAttemptId);
      return EMPTY_ALLOCATION;
    }

    // Sanity check
    SchedulerUtils.normalizeRequests(ask, DOMINANT_RESOURCE_CALCULATOR,
        clusterResource, minimumAllocation, getMaximumResourceCapability(),
        incrAllocation);
......
}
{code}, hi [~kasha], i think the DefaultResourceCalculator in the normalize method should be to maintain the original vcore,
{code:title=DefaultResourceCalculator.java|borderStyle=solid}
  @Override
  public Resource normalize(Resource r, Resource minimumResource,
      Resource maximumResource, Resource stepFactor) {
    int normalizedMemory = Math.min(
        roundUp(
            Math.max(r.getMemory(), minimumResource.getMemory()),
            stepFactor.getMemory()),
            maximumResource.getMemory());
    return Resources.createResource(normalizedMemory);
  }
{code}
change to
{code:title=DefaultResourceCalculator.java|borderStyle=solid}
  @Override
  public Resource normalize(Resource r, Resource minimumResource,
      Resource maximumResource, Resource stepFactor) {
    int normalizedMemory = Math.min(
        roundUp(
            Math.max(r.getMemory(), minimumResource.getMemory()),
            stepFactor.getMemory()),
            maximumResource.getMemory());
    return Resources.createResource(normalizedMemory, r.getVirtualCores());
  }
{code}, Hi [~templedf], would you like to review the patch or give me some pointer for the next step to do ?, [~yufeigu] is in the process of overhauling the resource normalization process in YARN-5774.  At a minimum, we should wait until that change is in.  It would be nice, though, to also fix this issue in that patch., Yes. I found this issue as well. No matter how many vcores you give it to resource request, {{DefaultResourceCalculator}} will assign 1 to it while normalizing. 
It is hard to say if this is bug for {{DefaultResourceCalculator}} since it depends on how/when we use it.
This is more about an issue of fair scheduler. In FairScheduler, we use the {{DominantResourceCalculator}} in the most case, but the weird thing is if your invoke {{fairScheduler.getResourceCalculator()}}, you will get a {{DefaultResourceCalculator}}. That doesn't sound reasonable to me. We should investigate and make some changes.
YARN-5774 can solve this issue incidentally. Maybe we could focus on the what should {{fairScheduler.getResourceCalculator()}} return in this JIRA.]