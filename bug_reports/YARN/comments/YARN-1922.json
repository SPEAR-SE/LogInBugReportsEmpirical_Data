[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12639613/YARN-1922.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3562//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3562//console

This message is automatically generated., The new patch adds a test.  If the test is run without the change to ContainerLaunch, the test fails and a child process is left running.  The test passes when the change to ContainerLaunch is applied., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12640270/YARN-1922.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3569//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3569//console

This message is automatically generated., Updated patch against trunk., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12644136/YARN-1922.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3727//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3727//console

This message is automatically generated., Updated patch.  We're worried about this causing problems for applications like Slider whose containers create a bunch of child processes.  It would be great if we could get this fix into 1.6., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678698/YARN-1922.4.patch
  against trunk revision b18e8a2.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5678//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5678//console

This message is automatically generated., Thanks for the patch Billie. Some comments -
{noformat}
+    if (Shell.WINDOWS) {
+      return;
+    }
{noformat}
Is it possible to change this to -
{noformat}
+ Assume.assumeTrue(Shell.isSetsidAvailable);
{noformat}
As I understand it, the functionality to kill child processes on non-Windows platforms requires the setsid command.

Also, you check if the parent process is killed here - 
{noformat}
+    Assert.assertFalse("Process is still alive!",
+        DefaultContainerExecutor.containerIsAlive(pid));
{noformat}
Shouldn't we also check if the child process has been killed? On my Mac for example(after applying your patch) -
{noformat}
HWxxxxx:hadoop-yarn-server-nodemanager vvasudev$ setsid
-bash: setsid: command not found
HWxxxxx:hadoop-yarn-server-nodemanager vvasudev$ mvn clean test -Dtest=TestContainerLaunch#testKillProcessGroup
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.TestContainerLaunch
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.215 sec - in org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.TestContainerLaunch

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 11.908s
[INFO] Finished at: Sun Nov 02 00:37:18 IST 2014
[INFO] Final Memory: 25M/306M
[INFO] ------------------------------------------------------------------------
HWxxxxx:hadoop-yarn-server-nodemanager vvasudev$ ps aux | grep bash | grep testscript
vvasudev        37129   0.0  0.0  2436436    536 s002  S    12:37AM   0:00.01 /bin/bash /Users/vvasudev/Hortonworks/apache/hadoop/git/hadoop/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/target/TestContainerLaunch-tmpDir/testscript.sh
{noformat}, You're right, isSetsidAvailable would be better.  I'll make that change.  DefaultContainerExecutor.containerIsAlive does check whether the child is still alive, if setsid is available., This is critical for long running processes because if the container consists of multiple processes and one goes down then others must go down. The scenario where we saw this is a Slider scenario trying to deploy HBase. A bad configuration resulted in the agent going down but the hbase processes stayed active. User fixed the bad config and tried to run again but the next instance ran into port conflict., Updated patch so the test only runs when setsid is available., +1 for the latest patch pending Jenkins., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678706/YARN-1922.5.patch
  against trunk revision 36ccf09.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5679//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5679//console

This message is automatically generated., Tested and confirmed that this patch fixes this issue in Slider. Additionally it fixes SLIDER-599 as well., Here's my notes trying to understand the scenario
 - If the cleanup request came in before the launch happens, we simply skip both launch and cleanup. This is taken care of by ContainersLauncher together with ContainerLaunch.shouldLaunchContainer.
 - The interesting case is when both launch and cleanup came in a the same time. This can be split into more cases, depending on _when_ the cleanup-request came in.
    ## Launch failed and pid-file is not written, and _completed_ is true.
    ## Launch happened, pid-file is written but entire process-tree crashed immediately after, so _completed_ is true.
    ## Launch happened, pid-file is written, root process crashed immediately after, but the remaining process-tree is still running, so _completed_ is true.
    ## Launch happened, pid-file is written and process-tree is running, so and _completed_ is false.

From the code, the current behavior is fine for (1), (2) and (4), but (3) is leaking processes before the patch.

I don't think what the patch is doing is sufficient - it does address (3) but only if pid-file was written with 100ms before the root-process crashes.

For comprehensively tackling (3), what we really need is to just wait till either pid-file is written or for the timer to expire maxKillWaitTime. Waiting for once (100ms) is not enough - I don't think your test is catching this, but it should be possible write a test for this that will prove that the patch is not sufficient.

Agreed?, I don't understand why the loop should wait longer.  If the pid file doesn't already exist, can it appear later, given that the root process has already crashed?, Attaching a new patch.  Instead of using do/while (!completed.get()), this patch simply uses while(true), so that it always loops until the pid file appears or the maxKillWaitTime elapses.  [~vinodkv], does this address your concerns?, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678987/YARN-1922.6.patch
  against trunk revision 67f13b5.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5700//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5700//console

This message is automatically generated., Sorry, didn't look at your previous comment given the progress on other patches.

So, I think we overall need to the following:
{code}
while (pidFile is not Present && the process has not crashed) {
  // loop
}
{code}
This is same as your do {} while {} loop.

+1 for your YARN-1922.5.patch. Checking this in., FAILURE: Integrated in Hadoop-trunk-Commit #6432 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6432/])
YARN-1922. Fixed NodeManager to kill process-trees correctly in the presence of races between the launch and the stop-container call and when root processes crash. Contributed by Billie Rinaldi. (vinodkv: rev c5a46d4c8ca236ff641a309f256bbbdf4dd56db5)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/TestContainerLaunch.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java
, Committed this to trunk, branch-2 and branch-2.6. Thanks Billie!, Thanks for the reviews, [~vvasudev]!, SUCCESS: Integrated in Hadoop-Yarn-trunk #733 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/733/])
YARN-1922. Fixed NodeManager to kill process-trees correctly in the presence of races between the launch and the stop-container call and when root processes crash. Contributed by Billie Rinaldi. (vinodkv: rev c5a46d4c8ca236ff641a309f256bbbdf4dd56db5)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/TestContainerLaunch.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1922 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1922/])
YARN-1922. Fixed NodeManager to kill process-trees correctly in the presence of races between the launch and the stop-container call and when root processes crash. Contributed by Billie Rinaldi. (vinodkv: rev c5a46d4c8ca236ff641a309f256bbbdf4dd56db5)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/TestContainerLaunch.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1947 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1947/])
YARN-1922. Fixed NodeManager to kill process-trees correctly in the presence of races between the launch and the stop-container call and when root processes crash. Contributed by Billie Rinaldi. (vinodkv: rev c5a46d4c8ca236ff641a309f256bbbdf4dd56db5)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/TestContainerLaunch.java
, Hi, I see you comment here to check in YARN-1922.5.patch, but why YARN-1922.6.patch merged? What is the concern?
I find this solution may have defect.
Suppose one container finished, then it will do clean up, the PID file still exist and will trigger once singalContainer, this will kill the process with the pid in PID file, but as container already finished, so this PID may be occupied by other process, this may cause serious issue.
As I know, my NM was killed unexpectedly, what I described can be the cause. Even rarely occur.
Below is error scenario, task clean up not finished but NM was killed, then started

2015-05-14 21:49:03,063 | INFO  | DeletionService #1 | Deleting absolute path : /export/data1/yarn/nm/localdir/usercache/omm/appcache/application_1430456703237_8047/container_1430456703237_8047_01_12582917 | org.apache.hadoop.yarn.server.nodemanager.LinuxContainerExecutor.deleteAsUser(LinuxContainerExecutor.java:400)
2015-05-14 21:49:03,063 | INFO  | AsyncDispatcher event handler | Container container_1430456703237_8047_01_12582917 transitioned from EXITED_WITH_SUCCESS to DONE | org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerImpl.handle(ContainerImpl.java:918)
2015-05-14 21:49:03,064 | INFO  | AsyncDispatcher event handler | Removing container_1430456703237_8047_01_12582917 from application application_1430456703237_8047 | org.apache.hadoop.yarn.server.nodemanager.containermanager.application.ApplicationImpl$ContainerDoneTransition.transition(ApplicationImpl.java:340)
2015-05-14 21:49:03,064 | INFO  | AsyncDispatcher event handler | Considering container container_1430456703237_8047_01_12582917 for log-aggregation | org.apache.hadoop.yarn.server.nodemanager.containermanager.logaggregation.AppLogAggregatorImpl.startContainerLogAggregation(AppLogAggregatorImpl.java:342)
2015-05-14 21:49:03,064 | INFO  | AsyncDispatcher event handler | Got event CONTAINER_STOP for appId application_1430456703237_8047 | org.apache.hadoop.yarn.server.nodemanager.containermanager.AuxServices.handle(AuxServices.java:196)
2015-05-14 21:49:03,152 | INFO  | Node Status Updater | Removed completed containers from NM context: [container_1430456703237_8047_01_12582917] | org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl.removeCompletedContainersFromContext(NodeStatusUpdaterImpl.java:417)
2015-05-14 21:49:03,293 | INFO  | Task killer for 26924 | Using linux-container-executor.users as omm | org.apache.hadoop.yarn.server.nodemanager.LinuxContainerExecutor.signalContainer(LinuxContainerExecutor.java:349)
2015-05-14 21:49:20,667 | INFO  | main | STARTUP_MSG: 
/************************************************************
STARTUP_MSG: Starting NodeManager
STARTUP_MSG:   host = SR6S11/192.168.10.21
STARTUP_MSG:   args = []
STARTUP_MSG:   version = V100R001C00
STARTUP_MSG:   classpath = ]