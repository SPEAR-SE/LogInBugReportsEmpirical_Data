[{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12698491/YARN-3192.patch
  against trunk revision 83be450.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6620//console

This message is automatically generated., Calling {{System.exit(-1)}} is not an acceptable way to shut down the RM. Please review the surrounding code.

I'm going to close this, until we can tie a bug to this code. Graceful shutdown is difficult to effect, and this issue's scope is too narrow to contribute to it.

[~brahmareddy], many of the JIRAs you're filing appear to be detected by automated tools. If the interrupt handling here can cause hangs, HA bugs, inconsistent replies to users, etc. then please file reports on the consequences, citing this as the source., w.r.t the {{WebAppProxy}} path; we could change the {{join()}} method to simply pass up the exception; the sole place it is used is {{WebAppProxyServer.main}}, which catches all throwables and exits with a (-1)

If that is done, the patch must be against trunk, not the 2.6 source, bq. w.r.t the WebAppProxy path; we could change the join() method to simply pass up the exception; the sole place it is used is WebAppProxyServer.main, which catches all throwables and exits with a (-1)

AFAICT, there is no graceful shtudown for {{WebAppProxyServer}}; the intent is to exit on interrupt. This would print an error message, "Error starting Proxy server" when the proxy is shut down instead of silently exiting.

Though catching the {{InterruptedException}} in {{WebAppProxyServer}} is arguably more correct, so throwing out of {{WebAppProxy::join()}} could be a useful change if there are ever other users of {{WebAppProxy}}. That said, I'm still not clear what this would achieve., Thanks a lot [~stevel@apache.org] and [~chris.douglas] for taking look into this issue and giving your views..

The worst thing you can do with InterruptedException is swallow it -- catch it and neither rethrow it nor reassert the thread's interrupted status.  *The standard approach to dealing with an exception you didn't plan for -- catch it and log it  -- also counts as swallowing the interruption because code higher up on the call stack won't be able to find out about it..* 

I referred following link..

http://stackoverflow.com/questions/1087475/when-does-javas-thread-sleep-throw-interruptedexception

http://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-



, Thank you. I believe I understand precisely why swallowing interrupted exceptions matter. In fact, I will refer you to HADOOP-6221, which fixed it somewhere used across the codebase (RPCClient) and included a test in the fix, so we can even replicate a problem which was stopping me shutting down my client cleanly on a ^C signal, which is why [my app's entry point|https://github.com/apache/incubator-slider/blob/develop/slider-core/src/main/java/org/apache/slider/core/main/ServiceLauncher.java#L252] starts an async shutdown timer as well as recognising a double ^C signal as a sign to escalate to a JVM halt.

What I am saying is: this is not a place where it matters.

Look at the one place the {{join()}} method is called [WebAppProxyServer.main()|https://github.com/apache/hadoop/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/WebAppProxyServer.java#L93]]

it's caught and translated, as Chris points out, into a "this is the shutdown you asked for", which then exits with  a 0. 

 Signalling a clean shutdown is the desired action here, not exiting with a -1. Note also our use of the sole exit mechanism we allow in the Hadoop codebase, via a call to {{ExitUtil.terminate(-1, t);}}. That's new to branch-2+ as of this week; until then the code was "errant". 

if you're going to touch {{join()}}, rather than have it throw, have it exit with a boolean to indicate "managed shutdown vs interruption". It'll be ignored either way, but if it makes you confident the code is better, then I wont say known., {quote}
 Signalling a clean shutdown is the desired action here, not exiting with a -1. Note also our use of the sole exit mechanism we allow in the Hadoop codebase, via a call to ExitUtil.terminate(-1, t);. That's new to branch-2+ as of this week; until then the code was "errant".

if you're going to touch join(), rather than have it throw, have it exit with a boolean to indicate "managed shutdown vs interruption". It'll be ignored either way, but if it makes you confident the code is better, then I wont say known.
{quote}

+1, for this approach..]