[I might have missed something, but there appears to be a very bad bug here.  Given the following settings:

{code}
          "mapreduce.map.cpu.vcores": 10
          "yarn.scheduler.maximum-allocation-vcores": 220
          "mapreduce.reduce.cpu.vcores": 10
          "yarn.app.mapreduce.am.resource.cpu-vcores": 10
          "yarn.scheduler.minimum-allocation-vcores": 10
          "yarn.nodemanager.resource.cpu-vcores": 221
{code}

The resource manager is only allocating 1 vcore per container:

{code}
2014-08-12 15:49:31,809 INFO org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode: Assigned container container_1407883573269_0001_01_000001 of capacity <memory:2048, vCores:1> on host 10.248.3.50:8041, which has 1 containers, <memory:2048, vCores:1> used and <memory:2050, vCores:220> available after allocation
{code}

... which is clearly wrong, as the number of vcores requested should have been 10 and the available remaining should have been 211., The capacity scheduler truncates all vcore requests to 0 if the DominantResourceCalculator is not used. I think in this case it also doesn't make an effort to respect node vcore capacities at all., What we're seeing with the default settings (as opposed to the fabricated numbers above... they just help make the problem evident) is that hundreds of containers can get allocated on the same node because the cap scheduler isn't taking into consideration the core count at all.  This obviously leads to a massive performance breakdowns, especially if a failure scenario happens where multiple NMs die., I believe this is the expected behavior (i.e. Capacity Scheduler by default doesn't use vcores in scheduling)., I don't have an opinion on whether we should keep this as the default behavior, just wanted to clear up that it's what's expected., From an operations perspective, this is not expected behavior at all.  Worse,  it appears the only place this is truly documented is in capacity-scheduler.xml ., IMHO, we may need to include vcore into headroom calculation also if we turn on the vcore as type of resource., This is more like a documentation bug, we should make user to get clear how DefaultResourceCalculator and DominantResourceCalculator work and expectation.]