[Here is where its actually happening: _org.apache.hadoop.yarn.server.nodemanager.containermanager.ContainerManagerImpl_ line: 258
{code}
    // always enforce it to be token-based.
    serverConf.set(
      CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,
      SaslRpcServer.AuthMethod.TOKEN.toString());
{code}

I understand that there may be some reason for that, although there is not a single doc, comment, log or other explanation as to why such override happens. However, regardless of the reason, this essentially means that no mater what the user settings are they will be overridden. . . fishy. . ., More, in _org.apache.hadoop.yarn.server.resourcemanager.ApplicationMasterService_ line: 123
The actual comment states IF authentication is not simple, but no IF statement is provided, 
{code}
    // If the auth is not-simple, enforce it to be token-based.
    serverConf = new Configuration(conf);
    serverConf.set(
        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,
        SaslRpcServer.AuthMethod.TOKEN.toString());
{code}, In the ApplicationMaster protocols, we force-use Token authentication even when kerberos is not enabled. This originally started with YARN-617 in YARN. Hadoop overall itself is separating kerberos auth from tokens via HADOOP-8779. That's the rationale.

For now, there is no way at present to disable it - by design. We don't want to blindly disable it, atleast on the ContainerManagement side (due to YARN-617).

You can follow other examples like distributed-shell to pass the tokens along. Downgrading priority for now., . . . from YARN-617 - _". . . We can at the least make it as difficult as possible by using the same container tokens. . ."_. That is the rational?
I don't get it. Why is that a problem? Production and operation concerns has to be clearly separated from the developer's concern. 
I hope there is a better explanation somewhere . . ., The reason the custom AM in the related user@hadoop thread is failing is likely because it's coded incorrectly.  I suspect the RM supplied tokens were not added to the AM's ugi.

In general, tokens are just a lightweight alternate authentication method that removes the need for hard authentication, ex. kerberos, which a task cannot do.  Tokens within yarn are used to encode app/task identity and other information.  Note that the identity is not the job's user identity so tokens cannot be disabled.

This jira should be marked invalid if Vinod agrees., Au contraire ;) The issue is very valid as stated. Even if it were to change to a simple documentation issue it is still an issue never the less. 
The gist of it is my authentication is explicitly set to SIMPLE and is overridden to TOKEN without any log message or exception telling me that it is invalid (see the code above) or that its overridden.  
Personally I suspect its an overall deign problem. If Token must be present then the underlying API must be structured as such, but that is a different discussion.

Cheers
Oleg, Oleg, the authentication config setting specifies the _external authentication_ for client visible services.  Ie. The NN, RM, etc.  The _internal authentication_ within the yarn framework is an implementation detail independent of the config auth method.  Yarn does not need to log a warning or exception for its internal design.

I think you are naively looking at this from the viewpoint of "simple" auth.  Consider kerberos auth.  The AM, NM, tasks, etc cannot use kerberos to authenticate.  Even if they could, the token is used to securely sign and transport tamper resistant values.  Always using tokens prevents the dreaded "why does this AM/etc break with security enabled"?  After using the configured auth for job submission, the code path within yarn is common and the internal auth is of no concern to the user.

There is no design problem, the api is transparently based on the token + rpc layer meshing to securely transport (whether simple or kerberos auth) the identity and resources requirements between processes. 

Feel free to ask Vinod or I questions offline to come up to speed on hadoop & yarn's security., Daryn

Unfortunately I still disagree and here is why. The API in question is a very public API which one uses during the implementation of AM. The fact that it behaves differently once invoked from the AM vs. just a simple API call to a remote cluster is what I am questioning. Nothing stops me from doing the later. Not a comment, doc, javadoc, warning message or anything else. In fact the error message I see is completely misleading and took me on the wrong path of figuring out the cause which resulted in this JIRA (which is different from YARN-944). The current API is not designed in a way to help someone like myself not to make such a mistake. So, from that perspective its still a problem and while I won't be fighting over it by re-opening the issue, I would suggest to rethink. Let's just say that I know a thing or two about the API design but I also play for the same team (HWX) and while I am freely expressing my concerns with good intentions, someone else may not have as much patience and fall back to YARN alternatives (quite a few, depending on how you look). Anyway, I'll leave it up to you.

Cheers
Oleg, [~ozhurakousky], how are you creating the client? You should not be doing anything special to make this happen if you are using the client libraries., Here is all the code
{code}
ApplicationMasterProtocol applicationsManager = ClientRMProxy.createRMProxy(yarnConf, ApplicationMasterProtocol.class);
RegisterApplicationMasterRequest request = RegisterApplicationMasterRequest.newInstance("", 0, "");
RegisterApplicationMasterResponse response = applicationsManager.registerApplicationMaster(request);
{code}
Just stick it into the main with config pointing to the valid remote cluster.
While I understand that this really should not work (I don't even have an app deployed at the time of invocation of this code), the exception took me way off track. 
, bq. The fact that it behaves differently once invoked from the AM vs. just a simple API call to a remote cluster is what I am questioning.

This should work.  What issue are you encountering when talking to a remote service?

bq.  ... I understand that this really should not work (I don't even have an app deployed at the time of invocation of this code) ...

You answered your question but the good news it's possible.  You are trying to emulate an unmanaged AM.  It's not possible to just register an AM w/o first requesting an app & app attempt id from the RM.  The subsequent registration will use a AMRM token that is issued by the RM., bq. This should work. What issue are you encountering when talking to a remote service?

org.apache.hadoop.security.AccessControlException: SIMPLE authentication is not enabled.  Available:[TOKEN]

You can try it by simply pasting my code into a main, I thought you were having issues talking to other services like a NN.  As noted, trying to communicate directly with the AMRM service is an invalid use case.  By design you cannot talk to this service w/o a token issued by the RM.  The RM must create the app id and app attempt for the AM prior to the AM registering.  I'd suggest leveraging the unmanaged AM., As I said, the API did not steer me in that direction and the error sent me out of the park completely.]