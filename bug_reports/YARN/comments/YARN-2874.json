[Thanks for the report and the patch, [~Naganarasimha].  However I don't see how the provided patch will resolve the deadlock issue.  It only changed a boolean to an AtomicBoolean which in itself won't resolve an existing deadlock scenario.  With the introduction of a concurrent data structure like AtomicBoolean I would expect some existing locks to be removed as a result., Sorry was suppose to remove synchronized from both methods signature (RenewalTimerTask.run and RenewalTimerTask.cancel ). Will reupload the patch again ..., Updated patch with fixes for review comment, Hi [~jlowe] &  [~kasha],
Hope the patch addresses the issue reported so shall i change the status to "patch available" or test case is also required for this ... ? , [~Naganarasimha] Thanks for you reporting. I dived into the code. I think this dead lock can be caused following code path:

1. delayedRemovalThread.start > removeApplicationFromRenewal() > *synchronize (delegationTokens) {}* > *dttr.timerTask.cancel()* > DelegationTokenRenewerRunnable#handleDTRenewerAppSubmitEvent() > handleAppSubmitEvent > addTokenToList() > *delegationTokens(Collections$SynchronizedSet)*

2. renewalTimer.schedule()  > RenewalTimerTask#run > removeFailedDelegationToken > *tr.timerTask.cancel()* > DelegationTokenRenewerRunnable#handleDTRenewerAppSubmitEvent > handleAppSubmitEvent > addTokenToList > *delegationTokens(Collections$SynchronizedSet)*

The current code path is as follows:

1. delayedRemovalThread.start > removeApplicationFromRenewal() > *synchronize(tokenSet){}* > *dttr.timerTask.cancel()* > DelegationTokenRenewerRunnable#handleDTRenewerAppSubmitEvent() > handleAppSubmitEvent > *appTokens.get(applicationId).add(dtr)* # appTokens.get looks same to tokenSet

2. renewalTimer.schedule()  > RenewalTimerTask#run > removeFailedDelegationToken > *tr.timerTask.cancel()* > DelegationTokenRenewerRunnable#handleDTRenewerAppSubmitEvent > handleAppSubmitEvent > *appTokens.get(applicationId).add(dtr)*

The cause of this issue is that the lock order between tokenSet and timerTask. I think the fix by Naganarasimha works well in this case. [~jlowe], [~kasha], please let me know if I'm wrong. , One more thing: dead lock itself can be fixed by the patch, but I have one concern - error handling while interrupted in RenewalTimerTask#run. RenewalTimerTask is a method which has a side effect, so the state can be invalid after the patch. We need to update the long error handling before merging it., I was looking into something similar for MR1 a while ago. Let me take a look at this. , For purposes of fixing the deadlock, the patch looks good to me. I am not sure how easy it is to add a test for this, so I am okay with not including one.

That said, there is still a race along the lines of the one discusses in MAPREDUCE-5384. We should at least create a follow-up JIRA to fix this; Sid's suggestion - https://issues.apache.org/jira/browse/MAPREDUCE-5384?focusedCommentId=13745421&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13745421 - should work., Thanks for your comment, Karthik. I'm also okay with not adding the test case on this JIRA.

{quote}
That said, there is still a race along the lines of the one discusses in MAPREDUCE-5384. 
{quote}

Sid's suggestion looks good to me.

{quote}
 We need to update the long error handling before merging it.
{quote}

Rethinking of this, this is not related to this JIRA. , Mading a patch available., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12682188/YARN-2874.20141118-2.patch
  against trunk revision 185e0c7.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5985//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5985//console

This message is automatically generated., Hi [~ozawa] & [~kasha],
Thanks for the review and feed back. I put some effort to write the test code to reproduce this issue but as more and more sleeps and wait notify was required and was not consistently going into deadlock, i thought its not worth the effort as the dead lock scenario was easily detectable.
bq. RenewalTimerTask is a method which has a side effect, so the state can be invalid after the patch. We need to update the long error handling before merging it.
Was not so clear about this statement as i was not able to get which state gets invalidated because of the fix and further you ( [~ozawa]) had mentioned ??Rethinking of this, this is not related to this JIRA.?? , so please if any thing more needs to be updated for this issue please inform.

Regarding Sid's comment in MAPREDUCE-5384, If required to be be handled IIUC i need to revert my patch and redo as below (correct me if wrong and also inform if its req to be fixed in this way)
{quote}
{noformat}
@Override
    public void run() {
      if (cancelled) {
        return;
      }
      Token<?> token = dttr.token;
      try {
	synchronized (this) {
            if (cancelled) {
              return;
            }
	  requestNewHdfsDelegationTokenIfNeeded(dttr);
	  // if the token is not replaced by a new token, renew the token
	  if (appTokens.get(dttr.applicationId).contains(dttr)) {
	    renewToken(dttr);
	    setTimerForTokenRenewal(dttr);// set the next one
	  } else {
	  LOG.info("The token was removed already. Token = [" +dttr +"]");
	  }
	}
      } catch (Exception e) {
        LOG.error("Exception renewing token" + token + ". Not rescheduled", e);
        removeFailedDelegationToken(dttr);
      }
    }
{noformat}
{quote}
, Sid's suggestion was to add a variable to Token to capture that it is to be cancelled, so it works across any duplicate TimerTasks as well. In any case, let us follow up on addressing that race in YARN-2919 and get this patch in first.

The patch itself looks good to me. +1, [~Naganarasimha], never mind, your patch looks good to me. +1, Checking this in. , FAILURE: Integrated in Hadoop-trunk-Commit #6645 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6645/])
YARN-2874. Dead lock in DelegationTokenRenewer which blocks RM to execute any further apps. (Naganarasimha G R via kasha) (kasha: rev 799353e2c7db5af6e40e3521439b5c8a3c5c6a51)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java
, Thanks Naganarasimha for your contribution. Just committed this to trunk and branch-2. , Hi [~kasha] &  [~ozawa] 
Thanks for reviewing and commiting the patch ., Pulled this into 2.6.1. Ran compilation before the push. Patch applied cleanly.
]