[NMTokens are set in YARN AMRMClientImpl and MR RMContainerAllocator. And got in the  YARNContainerManagementProtocolProxy via the NMTokenCache.

We need to make the NMTokenCache instantiable and make sure each AM uses its own instance of it.

IN the case of the YARN API this AMRMClientImpl and the NMClientImpl should share the same instance. , Why is this a blocker? Don't think it is, multiple AMs in a JVM wasn't supported in a first class way - I'm sure you'll find more issues here. 

Also, please edit the title with the problem statement instead of the solution.

Now as to more details: Don't know the internal details, so is llama running with multiple AMs one after another or in parallel? And is the context an unmanaged AM?, why are you in fact running multiple AM's inside a same JVM? as per YARN we can never have multiple AM's per JVM per process. Definitely not a blocker. Please explain the use case for running multiple AMs inside same process? If you really want to run it that way ..Why not just update the NMTokenCache but default to single AM case but still I don't see why you are doing this?, We run into this issue in Llama. Llama is a single JVM hosting multiple unmanaged ApplicationMasters that run at the same time (in parallel). Because NMTokenCache is a singleton NMTokens for the same node from the different AMs step on each other.

The patch that I'm working preserves the current behavior (singleton NMTokenCache) while allowing a client to set a NMTokenCache instance to the AMRMClient/NMClient (and Async versions). If an instance is set, then the NMTokens are stored in it instead of the singleton. This preserves backward compatibility both in behavior and in API.


, Attached a patch with the proposed solution.

So far this is the only issue we've run while using multiple AMs in a single JVM., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12609251/YARN-1321.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 5 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 1 warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2228//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/2228//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-client.html
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2228//console

This message is automatically generated., This seems like that after this patch goes in, all applications will need to change to work correctly with the client libraries?, bq. Llama is a single JVM hosting multiple unmanaged ApplicationMasters that run at the same time (in parallel). Because NMTokenCache is a singleton NMTokens for the same node from the different AMs step on each other.
Okay, that explains the context.

bq. So far this is the only issue we've run while using multiple AMs in a single JVM.
That is good to know. You should add some kind of simple test so that so that this assumption isn't broken in the future.

bq. This seems like that after this patch goes in, all applications will need to change to work correctly with the client libraries?
Sigh, that is true. Changing from static to non-static breaks apps. We can do one of the two things:
 - Keep the statics around for single AM per JVM case - which I believe will cover 99% cases and add new non-static APIs or
 - Doing something that Omkar is suggesting - add optional APIs to track NMTokens per appattempt.

Irrespective of the solution, I think we should skip the MR and dist-shell changes altogether - atleast to prove that the changes are compatible. We can may be fix them in a follow up ticket., bq. Keep the statics around for single AM per JVM case - which I believe will cover 99% cases and add new non-static APIs 
This is what the patch does.  By default AMRMClient and NMClient are instantiated with the static NMTokenCache, but both have a setNMTokenCache that allows setting a different one., The patch does not break existing apps, existing apps, if they don't set a NMTokenCache, will use the singleton instance.

The changes the patch does in the distributed shell AM are not necessary. I've made them just as an example of how the new API can be used. I can update the patch reverting them completely.

The changes in the MapReduce AM the only effective change they do is to use a private NMTokenCache instance. I can change that to use the NMTokenCache singleton instead. This would be the old behavior. The only changes is that instead using {{NMTokenCache.setNMToken()/getNMToken()}} it will do {{NMTokenCache.getSingleton().setNMToken()/getNMToken()}}.

I will upload a new patch with the above 2 changes., [~tucu00] Does the MR AM work with zero changes if it uses the static cache? If yes, can the patch just be restricted to adding new APIs to the yarn client library and leave the MR code unchanged., [~hitesh], the changes would be restricted to 2 line changes:

  NMTokenCache.setNMToken(...);
  NMTokenCache.getNMToken(...);

for

  NMTokenCache.getSingleton().setNMToken()/getNMToken(...);
  NMTokenCache.getSingleton().getNMToken(...);

This is because I'm changing the {{NMTokenCache}} from static methods to instance methods. 
, [~tucu00] Thanks for the clarification. In that case, it seems like this is an incompatible change., Hit enter too quickly on the previous comment. To continue: it is incompatible given that NMTokenCache has been declared Public., got it. have and idea on how to address that to make it compat at api level. , Preliminary patch addressing compatibility concerns. It does not modify mapred nor distributedshell code., As test-patch may not run tests in mapred and distributed shell because there are no changes there  (with the latest patch), I've run the tests on those module and they all passed., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12609360/YARN-1321.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1552 javac compiler warnings (more than the trunk's current 1547 warnings).

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2233//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/2233//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-client.html
Javac warnings: https://builds.apache.org/job/PreCommit-YARN-Build/2233//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2233//console

This message is automatically generated., uploading proper patch, the previous one was incomplete as I didn't "git add -u" in my local repo., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12609445/YARN-1321.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1548 javac compiler warnings (more than the trunk's current 1547 warnings).

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2241//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-YARN-Build/2241//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2241//console

This message is automatically generated., The extra javac warning is expected as the static setNMToken() method is now deprecated., {code}
   public abstract void cleanupRunningContainersOnStop(boolean enabled);
+
+
{code}
Nit: only need one blank line here

{code}
+
+  private ConcurrentHashMap<String, Token> nmTokens;
+
{code}
Variable should come before the methods?

Change containsNMToken to containsToken and removeNMToken to removeToken for consistency with getToken and setToken? Also, should setToken not be putToken?

Otherwise LGTM, bq. Change containsNMToken to containsToken and removeNMToken to removeToken for consistency with getToken and setToken? Also, should setToken not be putToken?
can you please make it consistent for all apis xxxNMToken() ?

Can you please add a test case for the multi AM use case?, Sandy, Omkar, thanks for reviewing the patch. I've normalized the instance method names not to use "NM" in their names. On the testcases, I've modified the tests cases to assert an instance different from the singleton is used when set., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12609544/YARN-1321.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1548 javac compiler warnings (more than the trunk's current 1547 warnings).

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2246//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-YARN-Build/2246//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2246//console

This message is automatically generated., same as before, the extra javac warning is expected as the static setNMToken() method is now deprecated., bq. On the testcases, I've modified the tests cases to assert an instance different from the singleton is used when set.
I was expecting a more involved test case wherein it is using nmclient and amrmclient to get the container and do start/getContainer call. This will ideally test sharing nmtokens between nmclient and amrmclient in multi am case. thoughts?, IMO, testing that a instance different than the singleton is used, and it is the same, by both the AMRMClient and the NMClient is enough and avoids adding 30+ secs to the testcases., +1 LGTM, Why is the following getting repeatedly called in NMClientImpl? Doing it once in serviceInit() should be enough, no?
{code}
        cmProxy.setNMTokenCache(getNMTokenCache());
{code}

Need to fix the javadoc of NMTokenCache.

-----

A quick reset to make sure we are fixing it correctly.

The reason why we made NMTokenCache public was to support cases where App writers use only AMRMClient and not NMClient or vice-versa. 

Also, as per the patch, it seems weird that one has to explicitly call setNMTokenCache() for both AMRMClient and NMClient. Avoiding this was the reason why we made it a static singleton. NMTokenCache is a shared object between AMRMClient and NMClient. It's weird that someone outside has to create it and set it for both clients. How about the following?
 - AMRMClient clearly 'owns' NMTokenCache. It is the producer - obtains NMTokens from RM and populates them. So we don't need a setter for AMRMClient. AMRMClient creates the cache and returns it for consumers.
 - In that light, making setNMToken() public was a clear mistake, but something that we can live with.
 - When we create a NMClient, we pass the above token-cache returned by AMRMClient. The default constructors/static factories for NMClient can use the single-ton. And we can add a new createNMClient that takes in a token-cache., [~vinodkv], thanks for following up ....

Agree that the AMRMClient owns the NMTokenCache. But if we remove the setter and we have an instance of the NMTokenCache instead of the singleton, then the NMClient will break unless you to use the constructor with the NMTokenCache you suggest.

IMO the right thing to do is:

* AMRMClient creates an instance NMTokenCache
* AMRMClient has only a getter for the NMTokenCache
* NMClient constructor takes always an AMRMClient (to extract the NMTokenCache from it)

But the later is an incompat change.

Thoughts?, I think we should try to keep both the client libraries decoupled from each other. These are the cases:
 - Common use case - using both libraries: User's AM doesn't do anything today.
 - Less likely
    -- Using AMRMClient only: User's AM access the static token-cache to extract tokens and use them for talking to NMs.
    -- Using NMClient only: User's AM gets tokens from the protocol response and puts them into the static cache.

Looks like whatever we do, we'll break compat. So, as much as I hate to do it, we can add a config yarn.client.static-nmtokens-cache that is set to true by default. If it is explicitly set to false (by llama), then AMRMClient and NMClient can mandate setting the token-cache via setNMTokenCache() APIs.
 - That way, when used as a singleton, all the above use-cases would just work as they are now.
 - Otherwise, when the flag is unset, we go to a mode where all AMs should create Clients explicitly passing a NMTokenCache for use. Otherwise, client creation will fail.

Would that work? What do others think? Am I still sane?, [~vinodkv], if I understand correctly, the difference between your proposal and the currently posted patch is that it adds a config which, if turned off, requires use of the non-static APIs.  Is it worth adding an extra config to enforce this?  If someone decides she want to use these APIs, what's the need for her to flip a config that will require her to use them before using them?, [~vinodkv], kind of agree with [~sandyr] on the extra config, we have been pushing back on proliferation of very specific configs.

Also, it seems what you are proposing is pretty much what the last patch does, with the difference that if you don't set the NMTokenCache explicitly you get to use the singleton. 

Also, in the latest patch the AMRMClient and the NMClient are not couple, you could use direct protocol calls for one of them and the API for the other.

Finally, the latest patch does not break compatibility, not API, not behavior. The patch is not touching MapReduce nor DistributedShell  code any they continue working as expected (with the singleton).
, Updated patch following an offline chat with Vinod, Bikas and Sandy.

* The {{NMTokenCache}} class has detailed javadocs on how to be used with high level client APIs and low level protocol APIs
* The {{ContainerManagementProtocolProxy}} has a new constructor that takes a {{NMTokenCache}} instance (instead of a setter)
* Removed unnecessary cache setter methods, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12610607/YARN-1321.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

      {color:red}-1 javac{color}.  The applied patch generated 1548 javac compiler warnings (more than the trunk's current 1547 warnings).

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2300//testReport/
Javac warnings: https://builds.apache.org/job/PreCommit-YARN-Build/2300//artifact/trunk/patchprocess/diffJavacWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2300//console

This message is automatically generated., same as before, the extra javac warning is expected as the static setNMToken() method is now deprecated.

Should we remove the @Deprecated annotation from it? If so, I can do it at commit time., Patch looks so much better to me.

Doing some javadoc fixes and dropping the deprecated tags as we are in a sense supporting both the singleton and instance Cache objects., Same patch with javadoc cleanup and undeprecated singleton methods in NMTokenCache., Will check it in if Jenkins says okay too.

Do we want this in 2.2.1? AFAIU, 2.2.1 is only bug-fixes. It can clearly go into 2.3 but if you want it in 2.2.1, let me know., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12610894/YARN-1321-20131029.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 1 warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2308//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2308//console

This message is automatically generated., [~vinodkv], 2.2.1 would be great, thanks., patch fixing javadoc warning., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12611114/YARN-1321.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/2318//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/2318//console

This message is automatically generated., Committed this to trunk, branch-2 and branch-2.2. Thanks Alejandro!, SUCCESS: Integrated in Hadoop-trunk-Commit #4678 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4678/])
YARN-1321. Changed NMTokenCache to support both singleton and an instance usage. Contributed by Alejandro Abdelnur. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1537334)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/AMRMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/NMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/NMTokenCache.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/ContainerManagementProtocolProxy.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestAMRMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #379 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/379/])
YARN-1321. Changed NMTokenCache to support both singleton and an instance usage. Contributed by Alejandro Abdelnur. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1537334)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/AMRMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/NMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/NMTokenCache.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/ContainerManagementProtocolProxy.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestAMRMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1569 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1569/])
YARN-1321. Changed NMTokenCache to support both singleton and an instance usage. Contributed by Alejandro Abdelnur. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1537334)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/AMRMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/NMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/NMTokenCache.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/ContainerManagementProtocolProxy.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestAMRMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1595 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1595/])
YARN-1321. Changed NMTokenCache to support both singleton and an instance usage. Contributed by Alejandro Abdelnur. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1537334)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/AMRMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/NMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/NMTokenCache.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/ContainerManagementProtocolProxy.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestAMRMClient.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/api/impl/TestNMClient.java
]