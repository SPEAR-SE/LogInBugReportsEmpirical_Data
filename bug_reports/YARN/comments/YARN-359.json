[These test failures were found by a pre-commit build for HADOOP-8562.  See https://builds.apache.org/job/PreCommit-HADOOP-Build/2088//testReport/ .  It appears that something related to container launch and process management has a problem on branch-trunk-win.  I could not repro the test failures on Mac, but I could repro them on Ubuntu.
, The problem was introduced in YARN-233.  That patch had some refactoring of setsid detection, and part of that refactoring introduced a bug.

In {{DefaultContainerExecutor#signalContainer}}, we detect if the platform supports setsid, and if so, insert a '-' before the PID:

{code}
  @Override
  public boolean signalContainer(String user, String pid, Signal signal)
      throws IOException {
    final String sigpid = Shell.isSetsidAvailable
        ? "-" + pid
        : pid;
    LOG.debug("Sending signal " + signal.getValue() + " to pid " + sigpid
        + " as user " + user);
    if (!containerIsAlive(sigpid)) {
      return false;
    }
    try {
      killContainer(sigpid, signal);
    } catch (IOException e) {
      if (!containerIsAlive(sigpid)) {
        return false;
      }
      throw e;
    }
    return true;
  }
{code}

However, the detection gets repeated again later when we pass the pid (including prepended '-') to {{Shell#getCheckProcessIsAliveCommand}} and {{Shell#getSignalKillCommand}}:

{code}
  /** Return a command for determining if process with specified pid is alive. */
  public static String[] getCheckProcessIsAliveCommand(String pid) {
    return WINDOWS ? new String[] { WINUTILS, "task", "isAlive", pid } :
      new String[] { "kill", "-0", isSetsidAvailable ? "-" + pid : pid };
  }

  /** Return a command to send a signal to a given pid */
  public static String[] getSignalKillCommand(int code, String pid) {
    return WINDOWS ? new String[] { WINUTILS, "task", "kill", pid } :
      new String[] { "kill", "-" + code, isSetsidAvailable ? "-" + pid : pid };
  }
{code}

The total effect is that we prepend the '-' character twice.  Instead of running this:

{code}
[cnauroth@ubuntu:pts/1] ~                                                                                           
> kill -0 -5106 ; echo $?
0
{code}

we run this:

{code}
[cnauroth@ubuntu:pts/1] ~                                                                                           
> kill -0 --5106 ; echo $?
-bash: kill: --5106: arguments must be process or job IDs
1
{code}

This also explains why I saw the tests fail on Ubuntu, but not Mac.  On Mac, setsid is not supported, so the test runs never entered the setsid-specific code path to encounter the bug.

I'm testing a patch now to correct this.
, This patch prevents the problem of prepending the '-' to pid twice on systems that support setsid.  I have removed the setsid detection logic from {{Shell}} and moved it to {{ContainerExecutor}} and {{DefaultContainerExecutor}}.  This is more similar to the current trunk codebase, so this will facilitate an easier merge back to trunk later., To test this patch, I ran all of the suites that had been failing on both Mac and Ubuntu, and they passed.  I also manually tested on Windows by running and killing several jobs., The logic for the patch is good.

If I follow correctly, YARN-233 moved {{isSetsidSupported()}} from ContainerExecutor to shell and now this patch moves it back. I think we should move the newly added methods in shell - {{getRunCommand()}}, {{getCheckProcessIsAliveCommand()}} and {{getSignalKillCommand()}} - into ContainerExecutor. We can promote them later into common shell when need arises - reduces affecting the public shell API., Vinod, thank you for the review.

{quote}
If I follow correctly, YARN-233 moved isSetsidSupported() from ContainerExecutor to shell and now this patch moves it back.
{quote}

Yes, that's correct.

{quote}
I think we should move the newly added methods in shell - getRunCommand(), getCheckProcessIsAliveCommand() and getSignalKillCommand() - into ContainerExecutor.
{quote}

I'm uploading a new patch that does this.
, Looks good, checking it in., I just committed this to branch-trunk-win. Thanks Chris!, The main reason for moving these to Shell was to reduce the number of places where OS specific forks happen in code and limit all such behavior to the Shell object that mainly performs OS dependent tasks that cannot be done in Java., bq. The main reason for moving these to Shell was to reduce the number of places where OS specific forks happen in code and limit all such behavior to the Shell object that mainly performs OS dependent tasks that cannot be done in Java.
Sure, I found only one usage and didn't see this arguments otherwise, so suggested moving it out. As I mentioned, if we already have other uses, we can promote it., Thanks for the commit.

Sorry, Bikas.  I had forgotten the earlier discussion on YARN-233 when we chose to place these methods in Shell, so I forgot to point this out to Vinod during his review of this patch.  We don't currently have other uses for these methods.  However, a potential argument for moving them back to Shell is that if a need arises, then developers are far more likely to look in Shell for a utility method than to remember to promote something out of the nodemanager codebase.

I'd be happy to do more refactoring if you want to discuss further., bq.  potential argument for moving them back to Shell is that if a need arises, then developers are far more likely to look in Shell for a utility method than to remember to promote something out of the nodemanager codebase
I agree.]