[Not sure if I understand your issue. 
{quote}
I simulate in test cluster. I submit DistributedShell application which run many loo applications to queueA, then I submit my own yarn application which request container and release container constantly to queueB. At this time, any applicaitons which are submmited to queueA keep pending!
{quote}
That sounds legitimate to me. QueueA gets all resources if no other queues are active. Submitting apps to queueB change queueB from inactive to active which makes queueA only get its own portion instead of all resources in the cluster. To increase weight of queueA can mitigate this issue. , [~yufeigu]
First, in FairSharePolicy.FairShareComparator.compare, weight only take effect when two queue are both not hungry or between two applicaitons.  Even though weights take effect, it's terrible for admin to change the weight dynamically. 

Seconds, I said queueA has only one request, but it is am request. queueB has many request, but not any am request. If two queue are also hungry (means two queue's minRes are big enough),  it sorts the queues by this variable 'minShareRatio'( in FairSharePolicy.java). At this time, minShareRatio = resourceUsage / (resourceUsage + request) . Here minShareRatio of queueA is always bigger than minShareRatio of queueB. So queueA can't acquire resource for long time, queueA keep pending for long time. But we know if AM container could launch, more requests would arrive. So I think we need to handle the AM request specially, or set timeout for pending queue. But I tend to the latter, it's easy. 

, According to the code in FairSharePolicy.java, {{minShareRatio}} is {{resourceUsage / min(minShare, demand)}} if {{minShare}} is big enough. Why queueA's {{minShareRatio}} is always bigger than queueB's? {{resourceUsage}} of queueA could be zero or will be zero over time in your case.
, [~yufeigu]
Sorry, I didn't express definitely! 
I said that the minShare1 which is big enough is configured by fair-scheduler.xml, not the variable 'minShare1'. It equals s1.getMinShare.
look the code below. if minShare1 which is configured by fair-scheduler.xml is big enough. the variable 'minShare1' equals s1.getDemand. It means the variable 'minShare1' = resourceUsage + request.
{code}
Resource minShare1 = Resources.min(RESOURCE_CALCULATOR, null,s1.getMinShare(), s1.getDemand());
{code}

look the code below. At this time, minShareRatio1 = resourceUsage1/'minShare1 =  resourceUsage1 / (resourceUsage1+request1)

{code}
minShareRatio1 = (double) resourceUsage1.getMemory()/ Resources.max(RESOURCE_CALCULATOR, null, minShare1, ONE).getMemory();
{code}, I solve this problem, when I set the timeout for queue. 
In my first version, the timeout of every queue are same. I think it is necessary to set different timeout for queues. By this, we could accelerate specified queueÔºÅ ]