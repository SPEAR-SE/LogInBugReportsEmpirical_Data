[How about we expose the current attempt Id with attempt status as well as previous attempt Id with attempt status if they are exist ??, We should probably expose the state of the app attempt. Probably need a translation from the internal app attempt state so that we dont expose the internal state machine state. [~vinodkv] Any other ideas?, We can expose the translated state of the app attempt:
Translate NEW, SUBMITTED, SCHEDULED, ALLOCATED, LAUNCHED, ALLOCATED_SAVING, LAUNCHED_UNMANAGED_SAVING, RECOVERED to initiate

Translate RUNNING to running 

Translate KILLED to terminate + killed by user
Translate FAILED to terminate + getDiagnostics()

Translate FINISHED,FINISHING to Finished, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12595279/YARN-808.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1629//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1629//console

This message is automatically generated., This is not correct. We need an ApplicationAttemptReport for each AppAttempt. We also needed it anyways for capturing historical data and so added this on branch YARN-321, you should copy that and expose a list of ApplicationAttemptReports in ApplicationReport., +1 for embedding ApplicationAttemptReport in ApplicationReport.

Think it out loudly. I've a concern that with more info to be fetched, getApplicationReport is likely to be slower, and the response message is likely to be bigger. However, users may not always want to know all the info of an application, such as the embedded ApplicationAttemptReport, right? Sometimes users just want to fetch partial information of an application to speed up the response. Thoughts?, After YARN-1389, we have separate APIs to get the application attempt report(s), where we can get the application attempt state. IMHO, we no longer need to have additional attempt state in application report. Any idea?, We have api/cli to get the attemptReport. So do not think we still need to expose AttemptReport into ApplicationReport.
[~mayank_bansal] [~bikassaha] What do you think ?, Close this ticket as "won't fix". Because we already have apis/cli to get ApplicationAttemptReport, so we do not need to expose it with ApplicationReport., We should atleast change the app report response to include invalid value of host and port in the response when there host and port are not ready. Currently we return a value of "N/A" for host which is confusing since the non-null string could be a valid host. We should return null for host and some -ve number for the port., IMHO, it's a different issue. The "N/A" string is not just restricted in host, but diagnostics, tracking url and etc, and not in ApplicationReport, but in ApplicationAttemptReport and ContainerReport.

I think the good thing is to decouple the data and the display. While these string fields should keep null or empty for those programmatically get the reports to easily validate them, while webUI and CLI, who ware actually the consumers of the reports, should check whether these fields are null or empty, and display "N/A" when necessary.]