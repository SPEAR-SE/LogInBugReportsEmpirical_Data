[{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12565410/YARN-333.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/356//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/356//console

This message is automatically generated., This is not a problem in MR is it, since the queue is always set? But I can see that it would be needed in general.

The approach looks fine, although I think it would be simpler just to have a getDefaultQueueName() method on YarnScheduler.
, The queue isn't always set in MR.  Having a general assignToQueue method is helpful for schedulers that need to interpret a queue name a little differently.  The fair scheduler, for example, prepends "root." to all queues, and queries "mapred queue -info -showJobs" won't work without it., I'm not convinced. Looks like the Scheduler can make the decision independently, why change the queue name in RMApp*?, When there is inconsistency between what the scheduler thinks an app's queue is and what the RMApp thinks it is, "mapred queue -info -showJobs" will return incorrect results (ClientRMService#getQueueInfo), as will queries for apps by queue in the web UI.  Alternatively, we could have those cases ask the scheduler for which apps exist on a given queue?, How does this work in hadoop-1? There are no features to remap in hadoop-1 either..., hadoop-1 does the latter - TaskScheduler specifies a getJobs(String queueName) method. 
, I thought about this a little more, and I would still advocate for the former approach (an assignToQueue method).  Why should we tolerate inconsistency between what the RM thinks an app's queue is and what the scheduler thinks it is?  It can only lead to confusion down the line.
, To add to the last comment, this inconsistency is an issue in hadoop-1 as well - both JobInProgress and the schedulers store (sometimes different) names for queues.  The difference between hadoop-1 and YARN is that in hadoop-1, the scheduler's view is used when requesting the list of jobs for an queue, and in YARN, the RMApp's view is used., I think instead of adding it to YarnScheduler (which will force us to think more carefully about synchronization etc), it is better to change {{AppAddedSchedulerEvent}} to pass {{ApplicationSchedulingContext}} and let schedulers override the queue name at that time. That way we will also be future proof of any more information needed by schedulers regarding an app.

Also, passing the app scheduling context will let some exotic futuristic scheduler to move apps across queues at runtime :), Also please provide the problem description and not solution in the title, fixed it myself for now., Thanks, agreed that that's a better title., If I understand correctly, the RMApp is created and filled out before the AppAddedSchedulerEvent is fired off.  An AppAddedSchedulerEvent actually corresponds to an RMAppAttempt, which necessarily must come after the creation of its RMApp., Just realized I was thinking of ApplicationSubmissionContext - so I think my last comment isn't entirely relevant.  I couldn't find ApplicationSchedulingContext anywhere in the code - are saying that it would be a handle that would allow the scheduler to make changes later on?, Stepping back a bit.

In Hadoop 1, using fair-scheduler, the following is possible:

*1 On job submission, the scheduler resolves/reassigns the queue of the job. For example, your jobconf states 'default' as queue, and the fair-scheduler converts the queue to the user primary group
*2 For a running job, via the fair-scheduler UI, it is possible to change the queue of the job (enforcing queue ACLs)

While there are a few minor quirks (the JobInProgress does not get update to the right queeu), this works fine and you can see the new queue in most of the UI (scheduler owns most of the UI that shows queues).

In Hadoop 2, using fair-scheduler:

*1, this is still doable but all the feedback to the user is provided by the RM which does not know about the queue name change. Thus there is a split-brain perception and it can lead to wrong decisions by admin trying to troubleshoot cluster utilization

*2, this is not currently possible


I see 2 ways to go about:

*A make the necessary changes for the fair-scheduler to be able to provide #1 and #2 as a fair-scheduler only solution

*B make the necessary changes so all schedulers support this capability

To do #A, the fair-scheduler should be able, via the RMContext, change the queue of job in the RM. This would take care of #1 and #2. Still it is the responsibility of the fair-scheduler to provide an end-point to the user/admin to perfom #2.

To do #B, the ClientRMProtocol would have a new 'changeQueue(String queueName)' method, the YarnScheduler would have a new 'String getActualQueue(String queueName)' method. On job submission the RM would call the scheduler 'getActualQueue()' method to resolve the actual queue for the job (this takes care of #1). On a 'changeQueue()' call, the RM also calls the scheduler 'getActualQueue()'.

Note that on both approaches, the scheduler is still responsible for enforcing queue ACLs as it is done today.

The benefit I see in #B, is that will be consistent for the different scheduler implementations. It will also leverage the existing client RPC, so no need to worry about a different endpoint and the security considerations this means.



, In case is not clear, I favor #B, Uploading a patch that adds a setQueue method to RMApp, allowing a scheduler to change the name of an application.  RMApp was previously read-only, so this is a departure from that, but I couldn't think of a case where changing a queue name would cause a problem.  We could use an event here, but it seems like overkill to me when we're just setting a single field., The approach on the latest patch is much simpler than previously discussed. As the RMApp.getQueue() is not used as a key in any data structure in the ResourceManager side (only used for reporting), it is safe to make it settable.

Having a testcase that verifies this does the trick for the FS would be great., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587732/YARN-333-1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 1 warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1229//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1229//console

This message is automatically generated., Attached an updated patch that includes a test, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12587744/YARN-333-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1235//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1235//console

This message is automatically generated., +1, LGTM., Attached rebased patch., Thanks Sandy. Committed to trunk, branch-2 and branch-2.1., Integrated in Hadoop-trunk-Commit #4074 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4074/])
    YARN-333. Schedulers cannot control the queue-name of an application. (sandyr via tucu) (Revision 1502374)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1502374
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/applicationsmanager/MockAsm.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairScheduler.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #268 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/268/])
YARN-333. Schedulers cannot control the queue-name of an application. (sandyr via tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1502374)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/applicationsmanager/MockAsm.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairScheduler.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1458 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1458/])
YARN-333. Schedulers cannot control the queue-name of an application. (sandyr via tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1502374)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/applicationsmanager/MockAsm.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairScheduler.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk #1485 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1485/])
YARN-333. Schedulers cannot control the queue-name of an application. (sandyr via tucu) (tucu: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1502374)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/applicationsmanager/MockAsm.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestFairScheduler.java
]