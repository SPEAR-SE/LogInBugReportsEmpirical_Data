[I encountered this scenario in my test cluster strange way!! causing below exception.
{code}
2014-11-14 04:11:33,433 INFO org.apache.hadoop.yarn.server.resourcemanager.RMAppManager: Recovering 2 applications
2014-11-14 04:11:33,433 INFO org.apache.hadoop.yarn.server.resourcemanager.RMAppManager: Default priority level is set to application:application_1415591025732_0001
2014-11-14 04:11:33,433 WARN org.apache.hadoop.yarn.server.resourcemanager.RMAppManager: Application with id application_1415591025732_0001 is already present! Cannot add a duplicate!
2014-11-14 04:11:33,433 ERROR org.apache.hadoop.yarn.server.resourcemanager.ResourceManager: Failed to load/recover state
org.apache.hadoop.yarn.exceptions.YarnException: Application with id application_1415591025732_0001 is already present! Cannot add a duplicate!
                at org.apache.hadoop.yarn.ipc.RPCUtil.getRemoteException(RPCUtil.java:45)
                at org.apache.hadoop.yarn.server.resourcemanager.RMAppManager.createAndPopulateNewRMApp(RMAppManager.java:364)
                at org.apache.hadoop.yarn.server.resourcemanager.RMAppManager.recoverApplication(RMAppManager.java:332)
                at org.apache.hadoop.yarn.server.resourcemanager.RMAppManager.recover(RMAppManager.java:436)
                at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager.recover(ResourceManager.java:1146)
                at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager$RMActiveServices.serviceStart(ResourceManager.java:521)
                at org.apache.hadoop.service.AbstractService.start(AbstractService.java:193)
                at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager.startActiveServices(ResourceManager.java:925)
                at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager$1.run(ResourceManager.java:966)
                at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager$1.run(ResourceManager.java:962)
                at java.security.AccessController.doPrivileged(Native Method)
                at javax.security.auth.Subject.doAs(Subject.java:415)
                at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1612)
                at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager.transitionToActive(ResourceManager.java:962)
                at org.apache.hadoop.yarn.server.resourcemanager.AdminService.transitionToActive(AdminService.java:281)
                at org.apache.hadoop.yarn.server.resourcemanager.EmbeddedElectorService.becomeActive(EmbeddedElectorService.java:126)
                at org.apache.hadoop.ha.ActiveStandbyElector.becomeActive(ActiveStandbyElector.java:805)
                at org.apache.hadoop.ha.ActiveStandbyElector.processResult(ActiveStandbyElector.java:416)
                at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:602)
                at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:498)
{code}, Attaching the patch that clears rmcontext,cluster metric and queue metric. And also I have done refactoring of common methods were called from transitionToActive and transitionToStandBy.
Please review the patch.
, hi Rohith, one question, why does the rmContext still contain the application? If the RM were at standby mode, the transitionToStandby should have cleaned the rmContext up ?, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12681615/YARN-2865.patch
  against trunk revision 49c3889.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5846//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5846//console

This message is automatically generated., bq. why does the rmContext still contain the application?If the RM were at standby mode, the transitionToStandby should have cleaned the rmContext up ?
I agree in positive flow. What if trainsitionToActive throw exception after recovery is succeeded?? Recovery process adds back applications to RMContext in RMAppManager. Any service start failures occur after recovery is completed then RMContext remain with stale applications.
Consider the below scenario execution
# RM is in StandBy state. Initial state is STANDBY
# STANDBY to ACTIVE  : 
## Recovery : All application recovery is success. RMContext has recovered applications in it.
## Any active service start failed which throw exception back.
   RM state remain STANDBY. But here, exception handling is done i.e. only dispatcher has been reset, but not rmcontext/metrics system. Currently, it is done at  {{stopActiveService ()}}
# STANDBY to ACTIVE : recovery fails with above exception. And it never move to ACTIVE in further transtitionToActive command from elector unless RM gets command to STANDBY to STANDBY and next  STANDBY to ACTIVE.

      , make sense, thanks for your explanation ! will review the patch, patch looks good overall. 
The patch should be enough to fix this jira. In addition, we need to clear "systemCredentials, schedulerRecoveryStartTime, schedulerRecoveryWaitTime etc.. " too.. probably we should have a separate class including all the active services' context and instantiate a new class when transitioning from standby to active for future-proof, instead of reseting each individual field. thoughts?  we can definitely do this separately , bq. probably we should have a separate class including all the active services' context and instantiate a new class when transitioning from standby to active
+1, bq. In addition, we need to clear "systemCredentials, schedulerRecoveryStartTime, schedulerRecoveryWaitTime etc.. " too
Agree

bq. probably we should have a separate class including all the active services' context and instantiate a new class when transitioning from standby to active
+1, Is it YARN-1874 ?
, bq. Is it YARN-1874 ?
This is different issue that move RMActiveService from ResourceManager, ignore it., Attached patch that separates RMContext and RMActiveServiceContext given with minimal changes.
# Retain RMContext interface. Add RMActiveServiceContext that owns the ActiveServices details.ActiveService services are accessed via activeServiceContext .getXXXXX() and activeServiceContext.setXXXXX() in RMContextImpl.
#* RMContext : rmDispatcher,isHAEnabled,haServiceState,adminService,configurationProvider,activeServiceContext
#* RMActiveServiceContext : other then previous line field variables from RMContext(like stateStore).

, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12682163/YARN-2865.patch
  against trunk revision 9dd5d67.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5866//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5866//console

This message is automatically generated., Patch looks mostly good. Minor comments - we should reduce the visibility of the class and its methods to package-private, mark it @Private @Unstable, and add comments that this class is expected to be used only by RMContext and ResourceManager. I just want to guard against new code using this instead of RMContext; we might want this to be accessible in the future, but we should probably keep the changes small in this JIRA., looks good to me too. minor thing:
In RMActiveServices, some are using {{rmContext#setter}}, some are using {{activeServiceContext#setter}}, we may make it consistent to use the latter, Thanks Karthik and Jian He for review. I will update the patch.
bq. In RMActiveServices, some are using rmContext#setter, some are using activeServiceContext#setter, we may make it consistent to use the latter
RMContext has 5 setter methods. I used those methods to set from RMActiveService just to retain interface implementation., [~rohithsharma], thanks for taking this issue. I'd like to +1 for adding Private and Unstable annotation to the methods defined in RMActiveServiceContext as Karthik mentioned. 

Otherwise points looks good to me., Attached patch, the changes from previous patch are
1. Karthik comment fixed. Adding comment for RMActiveServiceContext and making @private and @unstable annotations.
2. Jian He comment fixed. I use rmcontext only to set services.

Please review the patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12682428/YARN-2865.1.patch
  against trunk revision 5bd048e.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.TestMoveApplication

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5878//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5878//console

This message is automatically generated., lgtm, test failures looks unrelated, re-kick jenkins, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12682428/YARN-2865.1.patch
  against trunk revision 73348a4.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5883//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5883//console

This message is automatically generated., Committed to trunk and branch-2. thanks Rohith !

Thanks Karthik and Tsuyoshi for review and comments!, FAILURE: Integrated in Hadoop-trunk-Commit #6577 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6577/])
YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks (jianhe: rev 9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMActiveServiceContext.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMContextImpl.java
* hadoop-yarn-project/CHANGES.txt
, Thanks Karthik JianHe and Tsuyoshi for your reviews., FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #11 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/11/])
YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks (jianhe: rev 9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMActiveServiceContext.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMContextImpl.java
* hadoop-yarn-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk #749 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/749/])
YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks (jianhe: rev 9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMContextImpl.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMActiveServiceContext.java
* hadoop-yarn-project/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk-Java8 #11 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/11/])
YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks (jianhe: rev 9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMActiveServiceContext.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMContextImpl.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1939 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1939/])
YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks (jianhe: rev 9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMContextImpl.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMActiveServiceContext.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1963 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1963/])
YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks (jianhe: rev 9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMContextImpl.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMActiveServiceContext.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
, SUCCESS: Integrated in Hadoop-Mapreduce-trunk-Java8 #11 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/11/])
YARN-2865. Fixed RM to always create a new RMContext when transtions from StandBy to Active. Contributed by Rohith Sharmaks (jianhe: rev 9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMContextImpl.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMActiveServiceContext.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMHA.java
, Pulled this into 2.6.1. Ran compilation and TestRMHA before the push. Patch applied cleanly., Hi,

Issues with YARN were it is not becoming active  due to the below issue and we are using CDH 5.3.0

org.apache.hadoop.yarn.exceptions.YarnException: Application with id application_1470357060724_43131 is already present! Cannot add a duplicate!
                at org.apache.hadoop.yarn.ipc.RPCUtil.getRemoteException(RPCUtil.java:45)
                at org.apache.hadoop.yarn.server.resourcemanager.RMAppManager.createAndPopulateNewRMApp(RMAppManager.java:365)
                at org.apache.hadoop.yarn.server.resourcemanager.RMAppManager.recoverApplication(RMAppManager.java:310)
                at org.apache.hadoop.yarn.server.resourcemanager.RMAppManager.recover(RMAppManager.java:427)
                at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager.recover(ResourceManager.java:1126)
                at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager$RMActiveServices.serviceStart(ResourceManager.java:501)
                at org.apache.hadoop.service.AbstractService.start(AbstractService.java:193)
                at

Please can you help us with resolving the above issue.

Thanks,
Sudhakar Rao

]