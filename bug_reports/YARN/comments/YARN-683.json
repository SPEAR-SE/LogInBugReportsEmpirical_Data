[I found a workaround for this issue while working with minicluster on
Hadoop 2.0.5-alpha. My environment is CentOS 6.4 with Java 1.6.0_45.

The class {{org.apache.hadoop.yarn.server.MiniYARNCluster}} is not in the
top-level YARN JARs under {{$HADOOP_HOME/share/hadoop/yarn}}. This class
is found in the file {{hadoop-yarn-server-tests-2.0.5-alpha-tests.jar}}
found in directory {{$HADOOP_HOME/share/hadoop/yarn/test}}.

The MiniYARNCluster can be made accessible by changing the command
line invocation to

{noformat}
HADOOP_CLASSPATH=share/hadoop/yarn/test/hadoop-yarn-server-tests-2.0.5-alpha-tests.jar \
bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-client-jobclient-2.0.5-alpha-tests.jar minicluster \
-rmport $RM_PORT -jhsport $JHS_PORT
{noformat}

This starts the MiniCluster OK without throwing ClassNotFoundException
on MiniYARNCluster.

I ran the above from the root of my {{$HADOOP_HOME}}.
Change the above as needed if you are attempting to launch the MiniCluster
from somewhere else.

Alternatively, it is possible to modify the script that builds
Hadoop's classpath to include the yarn-server-tests JAR. However, the
classes in this JAR are primarily used for test and are unlikely to be
used in a production cluster. Given this, I think the above workaround
is preferred., Closing as a dup because HADOOP-9891 now documents this workaround]