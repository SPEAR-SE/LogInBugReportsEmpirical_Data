[We have 3 options basically, 
1) Keep the config name (...percentage) and continue use it as ratio, add additional checking for this to make sure it fit in range \[0,1\]
2) Keep the config name. Use it as percentage, this need update yarn-default as well. This will have some impacts on existing deployments if they upgrade.
3) Change the config name to (...ratio), this will be a in-compatible change.

Thoughts? [~vinodkv], [~jianhe], As the [doc|http://hadoop.apache.org/docs/r2.3.0/hadoop-yarn/hadoop-yarn-site/CapacityScheduler.html]  already explicitly mentions "specified as float", to keep it compatible, we may choose to do 1), This is a hard one to solve.

+1 for option (1) for now. In addition to that, we can chose to deprecate this configuration completely and introduce a new one with the right semantics but with a name-change: say yarn.scheduler.capacity.maximum-am-resources-percentage., Thanks for your feedbacks, I agree to do 1) first. I think deprecating+change-name is not so graceful enough, user will get confused when he found one option deprecated but system suggest to use a very similar one.

Will upload a patch for #1 shortly., We could instead pick a radically different name. Or may be two radically different ones - one for the ratio and one for the percentage., Good suggestion, I think we can deprecate the precent one, make sure its value within \[0, 1\], and use a ratio/factor as the new option name. Sounds good?, Since most of the capacity-related config are ranged \[0, 100\], maximum-am-resource-percent should be a part of capacity settings like queue capacity, queue maximum-capacity.

So I propose to make config to be
Global configuration:
{{yarn.scheduler.capacity.maximum-am-capacity-per-queue}}, default is 10 (10%)

Queue configuration:
{{yarn.scheduler.capacity.<queue-path>.maximum-am-capacity}}

And to avoid confusion, we should deprecate:
{{yarn.scheduler.capacity.maximum-am-resource-percent}}
{{yarn.scheduler.capacity.<queue-path>.maximum-am-resource-percent}}

In addition, maximum-am-capacity for queue is inheritable, when admin set a value for max-am in parent queue, leaf queue will inherit max-am if itself doesn't set.

Sounds like a plan?, I think 
{code}
yarn.scheduler.capacity.maximum-am-capacity-per-queue
{code}

should just be 
{code}
yarn.scheduler.capacity.maximum-am-capacity
{code}

I don't know that we need the inheritance part - I think that the default per cluster + override per queue is sufficient.

I think there will be some complexity around handling while both are present - which takes precedence if both are there?  Instead of just taking a setting with fallback to default, I think we'll need to check if either is specified, with the new setting taking priority, and if neither is specified then fallback to the default (which is the effectively same either way...), Move this to 3.0.0 release., [~leftnoteasy] [~sunilg]

I am interested in working on this. I like proposal mentioned in https://issues.apache.org/jira/browse/YARN-3153?focusedCommentId=14317255&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14317255 except the name. Instead of {{yarn.scheduler.capacity.maximum-am-capacity-per-queue}}, we can use {{yarn.scheduler.capacity.maximum-am-capacity}} like mentioned in [~cwelch] comment as anyway this property is meant for queue only. 

Reg inheritance, We can make it similar to "disable_preemption" property. 

1. For "root" queue, default value could be DEFAULT_MAXIMUM_APPLICATIONMASTERS_RESOURCE_CAPACITY and can be used if value is not configured at root level.
2. Whereas, for "leaf"' queues, default value could be o/p of #1 and can be used if value is not configured at leaf queue level.

Please share your thoughts., [~manirajv06@gmail.com]

Since we are looking for a deprecation of {{yarn.scheduler.capacity.maximum-am-resource-percent}} and introduce something like {{yarn.scheduler.capacity.maximum-am-capacity}}

I think we have to support both for some more time, 3.0 was a correct version for this to deprecate. So now we can look ahead and try to fix this in next major version (but have old one for some more version for compatibility issue)

I think "default per cluster + override per queue is sufficient." model may be better. This means that all queues will use whats set in cluster level. Each queue can override as needed, I am not seeing inheritance from parent queue is very much needed here. cc [~leftnoteasy]

Â ]