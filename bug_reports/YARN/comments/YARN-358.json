[See YARN-316.  This logic was originally implemented with an {{if (Shell.WINDOWS)}} guard to minimize risk of destabilizing existing functionality on non-Windows platforms.  This jira tracks removal of that guard and additional testing to confirm stability., @Chris, are we just talking about the command line or does this affect environment variables too? Given that YARN can launch any kind of application ( C++/Java/script ), what are the areas of concern that need to be addressed for containers to launch correctly on windows? 

Should this be a YARN feature or is it better to hand this off to the application logic to handle correct launching of a container on a particular OS type? , {quote}
@Chris, are we just talking about the command line or does this affect environment variables too?
{quote}

Yes, the length limitation that I mentioned here impacts both the command line and environment variables.

Here is a bit more detail.  Technically, the maximum length of a Windows environment variable is 32,767.  However, the nodemanager uses cmd scripts to launch containers, and those cmd scripts contain {{@set}} commands to set environment variables.  (See {{ContainerLaunch#WindowsShellScriptBuilder#env}}.)  These {{@set}} commands are subject to the cmd length limitation just like any other command, which is 8,191.

The technique that we used to package the classpath into an intermediate manifest jar is just a workaround for the one specific case, not a general-purpose mechanism that's useful for other long environment variables.

{quote}
Should this be a YARN feature or is it better to hand this off to the application logic to handle correct launching of a container on a particular OS type?
{quote}

This overlaps somewhat with comments I just added on YARN-445, so I'll just summarize briefly here.  It looks like there is a lot of difference in process management between OS's.  I don't think YARN can anticipate all of the variations and handle them completely.  I believe it would be beneficial for the YARN API to support a mapping of platform/OS to unique ContainerLaunchContext.  The AM could use this to specify different process management commands on different OS's, but without requiring the AM to know whether a specific node is running Unix, Windows, or anything else.  This has the side benefit of laying groundwork for potential support of heterogeneous clusters (nodemanagers running different OS's).

If the above approach makes sense, then it probably means that there is too much JVM-specific launch logic in the nodemanager code right now.  We could refactor that back to the MR AM or helper libraries reusable by multiple AM implementations.
, Any chance of backporting this to a branch-1 version as well? I think we can make use of this feature to ease user integration between HBase and other ecosystem tools like Pig and Hive. See HBASE-8438., Hi, [~ndimiduk]!

I think you're primarily interested in being able to call {{FileUtil#createJarWithClassPath}}, right?  The current status is that the method exists in trunk, branch-2, and merged through to branch-2.1.0-beta.  There is also an earlier version of the method in branch-1-win, although this version doesn't correctly handle all of the edge cases that I discovered while getting YARN nodemanager to work on Windows.

MAPREDUCE-4959 tracks backporting the fully functional trunk version to branch-1-win.

YARN-358 is a different thing.  This tracks removing a Windows conditional check so that nodemanager uses this classpath jar technique on all platforms, not just Windows.

If I understand the situation correctly, then MAPREDUCE-4959 is the more appropriate jira for you to watch.  If that sounds good to you, let me know, and I'll expand the scope of MAPREDUCE-4959 so that {{FileUtil#createJarWithClassPath}} goes to branch-1 too (not just branch-1-win).
, That sounds about right. For this to be of use on HBase, {{FileUtil#createJarWithClasspath()}} would need to work properly with classpath strings produced by either platform. It would need to be available on Hadoop-1.1.x as well as 2.x., Note that with YARN-2587 I have to fix the classpath contained within the the classpath jar. By default (DefaultContainerExecutor) the job.jar is contained in the nmPrivate path, and the classpath is referencing this path. In a secure environment this is not accessible to the container. The Windows Secure Container Executor handles this problem, not sure what you want to do about the DefaultContainerExecutor., I found it difficult to work with DockerContainerExecutor. The environment is different within a Docker container or not, so the classpath differs according to the environment variables such as HADOOP_PREFIX, YARN_CONF_DIR, etc. We cannot introduce environment variables within a Docker container into a generated manifest file. As a result, we cannot generate a correct manifest file running within a Docker container.]