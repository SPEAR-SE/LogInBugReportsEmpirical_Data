[DefaultResourceCalculator#computeAvailableContainers depends on memory only.
I added a consideration for available vcores, and modified other methods to report vcore consumption for headroom., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12633633/YARN-893.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacityScheduler
                  org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity.TestProportionalCapacityPreemptionPolicy
                  org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.TestApplicationLimits
                  org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.TestLeafQueue
                  org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.TestParentQueue

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3308//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3308//console

This message is automatically generated., Hi [~kj-ki], thank you for taking this JIRA.

{code}
@Test(timeout = 3000000)
{code}

Before doing this, we should change timeout to smaller value, because it can blocks Apache's Jenkins server for a long time. And can you fix the test failures? The test failures looks CapacityScheduler-related.

, Fixed test failures and changed test timeout to smaller 30000 msec., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12638214/YARN-893-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3505//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3505//console

This message is automatically generated., Thanks for updating a patch, [~kj-ki]. It looks very cleaner. Great job. One additional point: Can we add unit tests for utility methods in DefaultResourceCalculator? 
, [~kj-ki] & [~ozawa] - the {{DefaultResourceCalculator}} is meant to not use vcores by design - if vcores is desired, one should use the {{DominantResourceCalculator}}. Makes sense?, Make sense to me. Closing this as invalid one.]