[I see this behavior only 2.8.4 but not in 2.9.x release line. It occurs every time, just download 2.8.4 and configure 1.5 properties. 

JsonFactory file is from jackson-core-x.x.x.jar. In hadoop-2.8.4, this jar not found. But in hadoop-2.9.x, I see this jar available in hdfs lib.

*In hadoop-2.8.4:* Though tools/lib has jackson-core-2.2.3.jar, this won't be loaded for daemon start.
{code:java}
HW12723:hadoop-2.8.4 rsharmaks$ find ./ -iname "jackson-core-*.jar"
.//share/hadoop/common/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/hdfs/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/httpfs/tomcat/webapps/webhdfs/WEB-INF/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/kms/tomcat/webapps/kms/WEB-INF/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/mapreduce/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/tools/lib/jackson-core-2.2.3.jar
.//share/hadoop/tools/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/yarn/lib/jackson-core-asl-1.9.13.jar
{code}
*In hadoop-2.9.x :* Observer that jackson-core-2.7.8.jar is there in hdfs/lib which will be loaded for timelineserver. Though tools/lib has this jar, this won't be loaded for daemon start. 
{code:java}
HW12723:hadoop-2.9.0 rsharmaks$ find ./ -iname "jackson-core-*.jar"
.//share/hadoop/common/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/hdfs/lib/jackson-core-2.7.8.jar
.//share/hadoop/hdfs/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/httpfs/tomcat/webapps/webhdfs/WEB-INF/lib/jackson-core-2.7.8.jar
.//share/hadoop/httpfs/tomcat/webapps/webhdfs/WEB-INF/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/kms/tomcat/webapps/kms/WEB-INF/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/mapreduce/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/tools/lib/jackson-core-2.7.8.jar
.//share/hadoop/tools/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/yarn/lib/jackson-core-asl-1.9.13.jar

HW12723:hadoop-2.9.0 rsharmaks$ cd ../hadoop-2.9.1
HW12723:hadoop-2.9.1 rsharmaks$ find ./ -iname "jackson-core-*.jar"
.//share/hadoop/common/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/hdfs/lib/jackson-core-2.7.8.jar
.//share/hadoop/hdfs/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/httpfs/tomcat/webapps/webhdfs/WEB-INF/lib/jackson-core-2.7.8.jar
.//share/hadoop/httpfs/tomcat/webapps/webhdfs/WEB-INF/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/kms/tomcat/webapps/kms/WEB-INF/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/mapreduce/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/tools/lib/jackson-core-2.7.8.jar
.//share/hadoop/tools/lib/jackson-core-asl-1.9.13.jar
.//share/hadoop/yarn/lib/jackson-core-asl-1.9.13.jar
{code}

I couldn't get 2.8.3 release artifact to verify it. 
cc :/ [~jlowe], Sorry for the delay, as I was out on vacation and finally got back to this.

I think this was caused by YARN-6628.  It looks like the jackson core is being shaded but the fst library is not being updated to reference the shaded path.

I can try to poke at this some more early next week to see if providing a shaded version of fst that in turn references the shaded version of jackson can work., Attaching a patch for branch-2.8 that also shades the fst jar so it gets the jackson rewrites.  I manually tested that the ATSv1.5 timeline server can boot after this change when it could not before.

I'm wondering if we should remove the shading in branch-2 and branch-2.9.  The reason this works in those branches is because fst happens to pick up the proper jackson version from HDFS dependencies rather than the YARN ones.  If HDFS changes its dependencies this could break again, so I'm tempted to just let the dependency go unshaded in 2.9+.  Thoughts?, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 16m 45s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} branch-2.8 Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  9m 56s{color} | {color:green} branch-2.8 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 24s{color} | {color:green} branch-2.8 passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 30s{color} | {color:green} branch-2.8 passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} branch-2.8 passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 24s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 21s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 21s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 25s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  0s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 16s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  3m 58s{color} | {color:green} hadoop-yarn-server-applicationhistoryservice in the patch passed. {color} |
| {color:red}-1{color} | {color:red} asflicense {color} | {color:red}  0m 20s{color} | {color:red} The patch generated 1 ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 34m 28s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:749e106 |
| JIRA Issue | YARN-8383 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12930891/YARN-8383.001-branch-2.8.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  xml  |
| uname | Linux f20ee09cc77e 3.13.0-143-generic #192-Ubuntu SMP Tue Feb 27 10:45:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | branch-2.8 / 4655de3 |
| maven | version: Apache Maven 3.0.5 |
| Default Java | 1.7.0_181 |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/21192/testReport/ |
| asflicense | https://builds.apache.org/job/PreCommit-YARN-Build/21192/artifact/out/patch-asflicense-problems.txt |
| Max. process+thread count | 122 (vs. ulimit of 10000) |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/21192/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~jlowe] for the patch. 
bq. If HDFS changes its dependencies this could break again, so I'm tempted to just let the dependency go unshaded in 2.9+. Thoughts?
Yes, we shouldn't depends on HDFS dependencies rather YARN/lib should contains all its dependent jars. I think adding dependencies share/hadoop/yarn/lib is right way to fix. But this change going to bring back YARN-6628 which will become compatible issue for older jobs right? , bq. I think adding dependencies share/hadoop/yarn/lib is right way to fix. But this change going to bring back YARN-6628 which will become compatible issue for older jobs right?

I'm not proposing adding the dependency back for 2.8.  The attached patch shades even more than we did before, so if anything we're removing dependencies from an app's point of view if this patch goes into 2.8.

Instead I was proposing adding the dependency back in for branch-2 and branch-2.9, since the jackson dependency is already there in those release lines due to HDFS pulling it in.  On those two branches shading YARN's jackson dependency isn't buying us anything from an app's perspective.
, Ahh.. I misunderstood your earlier comment. Thanks for clarifying it.

bq. Instead I was proposing adding the dependency back in for branch-2 and branch-2.9, since the jackson dependency is already there in those release lines due to HDFS pulling it in.
Considering HDFS is already pulling jackson-core, it should be fine. My doubt is, CMIIW, change in HDFS is an incompatible change from branch-2.8 to branch-2.9 or branch-2 from jobs perspective right? ..since application classpath also refer to hdfs/lib. , bq. change in HDFS is an incompatible change from branch-2.8 to branch-2.9 or branch-2 from jobs perspective right?

Yes, you're right.  We may be forced to do another round of shading of jackson in HDFS as we did for YARN in 2.8.  Arguably that's a separate JIRA, and this one can focus on the fix for 2.8.x., Sure. I am doing verification and will commit it later of today. thanks, +1 lgtm.. Tested in single node cluster.

committing shortly.., committed to branch-2.8.5.. thanks to [~jlowe] for the patch.]