[In the yarn-site.xml, we do set some value for the yarn.resourcemanager.nodes.exclude-path. Since the file does not exist, we should throw out the exception. When RM starts to transit to active, it automatically calls all the refresh*s. It is by design if any of them fails, we should let RM fail., Thanks [~neillfontes] for raising this issue for discussion, we too were thinking in the same lines. 
[~xgong] yes you are right refresh should be called but i feel handling of refresh by NodesListManager.refreshNodes should be same as NodesListManager.serviceInit where in they handle gracefully if the configured paths for exclude/include doesn't exist. In fact i would suggest a better handling even there as if one file exists and other doesn't then both are taken as empty (disableHostsFileReader). So i would suggest fix like 
{quote}
      hostsReader.refresh(
          includesFile.isEmpty() || !new File(includesFile).exists() ? null
              : this.rmContext.getConfigurationProvider()
                  .getConfigurationInputStream(this.conf, includesFile),
          excludesFile.isEmpty() || !new File(excludesFile).exists() ? null
              : this.rmContext.getConfigurationProvider()
                  .getConfigurationInputStream(this.conf, excludesFile));
{quote}
Please provide your opinion for the same and correct me if my understanding is wrong., bq. NodesListManager.refreshNodes should be same as NodesListManager.serviceInit where in they handle gracefully if the configured paths for exclude/include doesn't exist.

NodesListManager.refreshNodes is using the same way as NodesListManager.serviceInit.

{code}
NodeListManager.serviceInit:
    HostsFileReader hostsReader =
        new HostsFileReader(includesFile,
            (includesFile == null || includesFile.isEmpty()) ? null
                : this.rmContext.getConfigurationProvider()
                    .getConfigurationInputStream(this.conf, includesFile),
            excludesFile,
            (excludesFile == null || excludesFile.isEmpty()) ? null
                : this.rmContext.getConfigurationProvider()
                    .getConfigurationInputStream(this.conf, excludesFile));
{code}

If the file does not exist, both of them will throw out the exception. No ?

I understand what you consider. But I think that the earlier we found the issue (In our case, maybe hard to debug why the exclude nodes are not considered even we provides the exclude-node-list ), the better. So, we throw out such exception when active RM starts , Hi [~xgong],
bq. If the file does not exist, both of them will throw out the exception. No ?
Yes you are right, intention is to not throw the exception, but may be can log WARN message saying Configured file doesn't exist (with the path info). 

bq. So, we. throw out such exception when active RM start
I see currently there is different behavior in HA mode(starts of properly) and non HA mode(starts of but continuous logs saying file not found) which i feel should not be the behavior
Also in other places where we configure the file path we do check whether file exists (ex. nodeHealthScripts), so i was of the opinion that its better to add a file exists check here too or atleast the behavior for HA and Non HA mode should be same.

, Thanks for the comment, [~Naganarasimha]. This is a very good suggestion.

bq. currently there is different behavior in HA mode(starts of properly) and non HA mode

So, in non-HA mode, when RM starts, it just starts all the services.
But in HA mode, when RM transits to Active, it has two step process:
* start all the services which is the same as in non-HA mode and it works fine.
* call refreshAll() to refresh all the configuration, including refreshQueues, refreshUserToGroupInformation, refreshNodes, etc. At this point, if we configure the file path but the file does not exist, it will throw out the exception.

When we call any refresh, if there is any problem, I think that we need to throw out the exception instead of silence ignore it. , I have some doubts on the behaviour , please help to understand it.
bq. When we call any refresh, if there is any problem, I think that we need to throw out the exception instead of silence ignore it. 
Make sense via Admin operations i.e admin explicitely invoking refresh commands.
But why do we ignore during RM start up? And consider only during transitionToActive?, Thanks for explaining [~xgong], and [~rohithsharma] for providing your view,
I would like to add one more scenario here 
Assume there is 2 RM HA cluster and active RM is made down (manually or for any other reason) and standby RM is not having the configured exclude file
Now Elector service tries to make the standby RM as active. As per the existing code refresh fails @ NodeListManager and AdminService throws ServiceFailedException and as {{rm.transitionToActive()}} is called before refreshing, stand by RM has already become active.  
But {{ActiveStandbyElector.becomeActive()}} returns false and continuously tries to make already active RM, active again.

If the intention is to fail the transition then i think we need to transition RM to standby, if exception is thrown on refresh before further throwing the exception {{also would suggest in non HA case RM should fail to start}} and if intention is only to log then any way we can log the same in NodeListManager.
Please share your views on the same.
, Hello [~Naganarasimha]], that seems to be a good idea. In this last scenario you described (standby with missing exclude file), I have two questions:

- The exclude file was present during HA startup and then it was removed somehow? Otherwise the HA startup should fail like it happened on my case.
- During the transition from standby -> active, would the RM keep pooling the filesystem looking for the exclude file and once file is in place, the transition resumes properly? 

* A visual aid on the RM web ui would be quite handy as well, because any Dev/Ops would look for the "<RM_IP>:8088/cluster" page checking for the job startup / schedule. , Per [~xgong]'s comment [above|https://issues.apache.org/jira/browse/YARN-3152?focusedCommentId=14310921&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14310921], it seems that the RM fails if the configured exclude file is absent in both HA and non HA cases, at startup as well as doing failover. If that is correct, please fix the title of the JIRA.

bq.  Assume there is 2 RM HA cluster and active RM is made down (manually or for any other reason) and standby RM is not having the configured exclude file [..]
This is a general problem with two HA nodes being in sync w.r.t configuration. YARN-1666 and friends address this issue via a different solution that may not have been well documented. With that, you'd not even put the exclude files on local host of each of the RMs. Will that work for you?, bq. Per Xuan Gong's comment above, it seems that the RM fails if the configured exclude file is absent in both HA and non HA cases, at startup as well as doing failover. If that is correct, please fix the title of the JIRA.

When startup in both HA and non-HA, if the configured exclude file is absent, the RM does not fail. Because we explicitly catch the exception. 
{code}
    try {
      this.includesFile = conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,
          YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);
      this.excludesFile = conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,
          YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);
      this.hostsReader =
          createHostsFileReader(this.includesFile, this.excludesFile);
      setDecomissionedNMsMetrics();
      printConfiguredHosts();
    } catch (YarnException ex) {
      disableHostsFileReader(ex);
    } catch (IOException ioe) {
      disableHostsFileReader(ioe);
    }
{code}

It only fails in fail-over case. After we start all the related service, we automatically call refresh* (refresh queue, nodelist, userToGroupMapping, etc). At this time, if the configured exclude file is absent, the refreshNodeList call will throw out the exception which cause the RM fails., [~xgong] got it correctly. Although in my case it was slightly different:

I had a single RM and I wanted to make dual HA RM. I did not had the exclude file. It haven't failed so far. When I transitioned to HA mode, the RMs didn't start because of the missing file. That's what I said it was an inconsistent behavior. The NNs handled it more gracefully and they don't fail, they just logged a [WARN] in the logs. , bq. It only fails in fail-over case.
Okay, we should try to be consistent then. Fail it in both places assuming that YARN-1666 and friends address the general problem with two HA nodes being in sync w.r.t configuration?, And not related to this Jira but similar, I see there is potential issue in {{AdminService.transitionToActive()}}. If there is any exception at {{rm.transitionToActive()}} then RM will be in standby, but if any exception at refreshAll() of any configuration like scheduler configuration has some problem, this case RM will be in active but elector is always trying to make it bring active in single node cluster with HA. I think RM should move explicitly to transitionToStandby just to notify admin or user that look into logs to identify configuration has problem.
{code}
try {
      rm.transitionToActive();
      // call all refresh*s for active RM to get the updated configurations.
      refreshAll();
      RMAuditLogger.logSuccess(user.getShortUserName(),
          "transitionToActive", "RMHAProtocolService");
    } catch (Exception e) {
{code}, Hi [~neillfontes],
   Based on the code earlier i had quoted the scenario and when i test today as follows i am able to see the behavior which i stated earlier.
* Install 2 RM HA cluster(RM1 active,RM2 stand by) and later configure for yarn.resourcemanager.nodes.include-path in both the nodes to a non existent file
* Gracefully stop the RM1 and then was able to see that RM2 services was starting up but in the logs was able to see continuously ServiceFailedException failing with FilenotFoundException in NodeListManager.
* Later i started RM1, after this i was able to see active RM being oscillating between RM1 and RM2. and in both RM i was able to see ServiceFailedException failing with FilenotFoundException in NodeListManager.
* once the files were created it became proper.
Not sure i am missing some thing, May be you too can try and tell the behavior as per the steps mentioned above.
When you mention "RMs didn't start" you mean you were not able to access web ui or the process down ?
, [~vinodkv]] -- It fails in both RMs indeed. What was 'unexpected' it didn't fail in single RM because of the missing exclude file. 

Is the need of the exclude file so relevant to the RMs but not so much for the NNs? Because the behavior (NNs vs RMs) is very different. I lean towards the NNs behavior. , [~vinodkv], [~xgong], [~neillfontes] & [~rohithsharma]
         From the discussions till now what i could conclude is :  As per the design if the required files are not there we need to fail fast, i.e. in case of Non HA cluster we should throw exception & RM should fail to start . And in case of HA, transition to active should fail and none of the services should be active on failure. And as part of this jira we need to achieve this. Please inform if this approach is fine or needs more discussion on this.

[~neillfontes],
Hope you got to test with the steps which i mentioned in my earlier [comment|https://issues.apache.org/jira/browse/YARN-3152?focusedCommentId=14313875&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14313875]. Seems like you were able to see the same behavior what i mentioned in step 2 but wanted to know more about step3 where in i see the actives services getting oscillated between the 2 RM servers. Is it the same behavior as i mentioned or i am missing something.  , Hello [~Naganarasimha], I am visiting this topic since it is been a while, sorry about the delay.

| When you mention "RMs didn't start" you mean you were not able to access web ui or the process down ?

The RM didn't bootstrap so I couldn't even see the web ui or connect to the server. If the excluded file is not that relevant the absence of it should not block the RM to go up (that is a way higher priority). A [WARN] could be added to the logs though, just like the NNs do., Thanks [~neillfontes] for responding, Was waiting for some feedback on this from you and committers/PMC so that i can go ahead.  Services will be not available thats for sure but another issue is from the logs its visible that even though RM start up has failed, another RM tries to come up and if it fails for the same reason it just keeps oscillating between the two...  As you mentioned i feel WARN should be sufficent for this issue or we can adopt the approach specified by [~kasha] in YARN-3607 and change the behavior to log WARN by default and if {{yarn.fail-fast}} is specified to true then have the current behavior. thoughts?]