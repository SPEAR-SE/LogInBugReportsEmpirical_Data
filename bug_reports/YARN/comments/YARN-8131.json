[[~rohithsharma] I don't think we should let the end user decide whether entities are posted into sub application or not.

The framework, DistributeShell in this case, should decide.Â  The end user, or user of CLI cares about data, not how it is stored in ATSv2 by DS. [~vrushalic] What's your take on this?, We need to provide an option in DS client CLI, unlike -flow_name, -flow_version and -flow_run_id. Based on CLI option, DS application master  can decide whether to write into sub application or not. This is to test new API because these new API is not integrated anywhere else. , I agree that the end user should not be concerned about data going to specific tables. The framework should be handling this, like the Tez AM.

In the distributed shell example, we should figure out if there is any data that is equivalent to a sub-app use case. If not, we should write a different one to test querying/writing out subapp data. It should not be an CLI option.

The flow name, version and flow run id are inputs as CLI options and that is different from a sub-app query. If we set the wrong example in DS, then it is likely to confuse frameworks about using subapp data. Let's have a good example for sub-application data. 

One thing is for sure, the data should be written "logically" by the AM to timeline service without caring/knowing where exactly the data ends up in the backend. Meaning, if it is a flow level value, it's stored at the flow level. If it's an application metric, it's at the app level. The AM need not be concerned that there are two tables at the backend, flow & application. All it should care for is, that this particular value belongs to flow level, that particular value makes sense at the app level and some other third value makes sense at the sub-app level. 

, Primarily DS is used for verifying YARN service features. Though *logically* DS doesn't come under sub application concept, there should be way to publish into sub app so that this feature can be verified. If we don't want to provide CLI option, may be by default DS AM can make user newer API so that data goes into both tables.  Otherwise, this API will be untested until Tez or any other framework make use of this API., I'd argue that we'd like to mark subApplication Entity as LimitedPrivate("Tez") specifically for this reason. The SubApplicationEntity is designed specifically to address Tez's use case where one YARN AM is shared to run multiple user queries. Hence, we should reply on Tez or similar use case to test SubApplicationEntity API., As discussed very briefly in the weekly call today, we would want some way of testing the subapp writes from the client perspective. DS gives a good way to test the regular things for Timeline Service, so let's think of how we can do the same for subapp data. ]