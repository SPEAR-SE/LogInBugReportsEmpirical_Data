[Complete stack trace
{noformat}
Found one Java-level deadlock:
=============================
"Thread-2":
  waiting to lock monitor 0x00007fb514303cf0 (object 0x00000000ef153fd0, a org.apache.hadoop.ha.ActiveStandbyElector),
  which is held by "main-EventThread"
"main-EventThread":
  waiting to lock monitor 0x00007fb514750a48 (object 0x00000000ef154020, a org.apache.hadoop.yarn.server.resourcemanager.EmbeddedElectorService),
  which is held by "Thread-2"

Java stack information for the threads listed above:
===================================================
"Thread-2":
	at org.apache.hadoop.ha.ActiveStandbyElector.quitElection(ActiveStandbyElector.java:353)
	- waiting to lock <0x00000000ef153fd0> (a org.apache.hadoop.ha.ActiveStandbyElector)
	at org.apache.hadoop.yarn.server.resourcemanager.EmbeddedElectorService.serviceStop(EmbeddedElectorService.java:108)
	- locked <0x00000000ef154020> (a org.apache.hadoop.yarn.server.resourcemanager.EmbeddedElectorService)
	at org.apache.hadoop.service.AbstractService.stop(AbstractService.java:221)
	- locked <0x00000000ef154068> (a java.lang.Object)
	at org.apache.hadoop.service.ServiceOperations.stop(ServiceOperations.java:52)
	at org.apache.hadoop.service.ServiceOperations.stopQuietly(ServiceOperations.java:80)
	at org.apache.hadoop.service.CompositeService.stop(CompositeService.java:158)
	- locked <0x00000000ef154090> (a org.apache.hadoop.yarn.server.resourcemanager.AdminService)
	at org.apache.hadoop.service.CompositeService.serviceStop(CompositeService.java:131)
	at org.apache.hadoop.yarn.server.resourcemanager.AdminService.serviceStop(AdminService.java:134)
	- locked <0x00000000ef154090> (a org.apache.hadoop.yarn.server.resourcemanager.AdminService)
	at org.apache.hadoop.service.AbstractService.stop(AbstractService.java:221)
	- locked <0x00000000ef154108> (a java.lang.Object)
	at org.apache.hadoop.service.ServiceOperations.stop(ServiceOperations.java:52)
	at org.apache.hadoop.service.ServiceOperations.stopQuietly(ServiceOperations.java:80)
	at org.apache.hadoop.service.CompositeService.stop(CompositeService.java:158)
	- locked <0x00000000ef154118> (a org.apache.hadoop.yarn.server.resourcemanager.ResourceManager)
	at org.apache.hadoop.service.CompositeService.serviceStop(CompositeService.java:131)
	at org.apache.hadoop.yarn.server.resourcemanager.ResourceManager.serviceStop(ResourceManager.java:947)
	at org.apache.hadoop.service.AbstractService.stop(AbstractService.java:221)
	- locked <0x00000000ef1541c0> (a java.lang.Object)
	at org.apache.hadoop.service.ServiceOperations.stop(ServiceOperations.java:52)
	at org.apache.hadoop.service.ServiceOperations.stopQuietly(ServiceOperations.java:80)
	at org.apache.hadoop.service.ServiceOperations.stopQuietly(ServiceOperations.java:65)
	at org.apache.hadoop.service.CompositeService$CompositeServiceShutdownHook.run(CompositeService.java:184)
	at org.apache.hadoop.util.ShutdownHookManager$1.run(ShutdownHookManager.java:54)
"main-EventThread":
	at org.apache.hadoop.yarn.server.resourcemanager.EmbeddedElectorService.becomeActive(EmbeddedElectorService.java:116)
	- waiting to lock <0x00000000ef154020> (a org.apache.hadoop.yarn.server.resourcemanager.EmbeddedElectorService)
	at org.apache.hadoop.ha.ActiveStandbyElector.becomeActive(ActiveStandbyElector.java:804)
	at org.apache.hadoop.ha.ActiveStandbyElector.processResult(ActiveStandbyElector.java:480)
	- locked <0x00000000ef153fd0> (a org.apache.hadoop.ha.ActiveStandbyElector)
	at org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:543)
	at org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:495)

Found 1 deadlock.
{noformat}, Current deadlock is involved between 
*EmbeddedElectorService* -> *ActiveStandbyElector*
*ActiveStandbyElector* -> *EmbeddedElectorService*

I initially thought of solving by maintaining an order of "*ActiveStandbyElector* --> *EmbeddedElectorService*" lock at EmbeddedElectorService.

But when looked into deep, still dead lock can ocure with 3 objects. Current locking is happening like below

*ActiveStandbyElector* -> *EmbeddedElectorService* -> *AdminService*
*AdminService* -> *EmbeddedElectorService* -> *ActiveStandbyElector*


Going with above initial thought, still deadlock can ocure between like below.
*( ActiveStandbyElector -> EmbeddedElectorService )* -> AdminService
AdminService -> *( ActiveStandbyElector  -> EmbeddedElectorService )*, Thanks for reporting this, Rohith. Taking this over, let me know if you have already made progress on the fix and I ll stand down., Looks a little tricky. Observations from reading the code again:
# EmbeddedElectorService(EES) doesn't need to synchronize the serviceStart and serviceStop methods. These methods call synchronized methods in ActiveStandbyElector(ASE). Actually, given that the ActiveStandbyElectorCallback methods implemented by EES are also called from ASE in-process, we probably don't need to synchronize them either.
# AdminService(AS) doesn't need to synchronize the service* methods either. AS#{start|stop}Server can be synchronized if need be.
# Removing above synchronizations alone wouldn't be enough because there would still be a deadlock between (*ASE#processResult* -> EES#becomeActive -> *AS#transitionToActive* -> *RM#transitionToActive*) and (RM#serviceStop -> RM.super#serviceStop -> *RM.super#stop* -> AS#stop -> AS#serviceStop -> EES#serviceStop -> *ASE#quitElection*), the methods in bold are synchronized.

We should probably revisit the synchronization of CompositeService#stop. [~steve_l@iseran.com] - any suggestions?, Here is a first-cut patch that removes unnecessary synchronization from EmbeddedElectorService, AdminService and CompositeService.

Thinking about the best way to write a unit test for this to avoid regressions in the future. We can may be override becomeActive to sleep for some time and try to shut the RM down. If it doesn't shutdown within a particular amount of time, fail the test? Any other ideas? , Submitting patch to see if any tests have issues with it., > Thinking about the best way to write a unit test for this to avoid regressions in the future.

Your approach looks reasonable for me. In addition to overriding EES#becomeActive, we can override synchronized  methods or change their behaviour(CompositeService#stop,  AS#transitionToActive, RM#transitionToActive) to sleep with synchronization(a bit different, but like TestRetryCacheWithHA#DummyRetryInvocationHandler). Then we can reproduce deadlock situation step by step in test cases.

IMHO, we shouldn't touch ASE, because it's also used in NameNode HA., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12640071/yarn-1929-1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3566//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-YARN-Build/3566//artifact/trunk/patchprocess/newPatchFindbugsWarningshadoop-yarn-server-resourcemanager.html
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3566//console

This message is automatically generated., I'm +1 to the change to composite service, as well as making the serviceXYZ operations desyncrhonized (the state entry point in the public method is synchronized to prevent re-entrancy.

I'll leave it to others to look at the remaining code and comment

Now, there is one little quirk by desynchronizing the serviceStart() and serviceStop methods. Although it is still impossible to have >1 thread successfully entering either method, there is the sequence
{code}

Thread 1 : service.start()
Thread 1:  service.serviceStart() begins

Thread 2 : service.stop()
Thread 2:  service.serviceStop() begins
Thread 2:  service.serviceStop() completes

Thread 1: service start completes
{code}

That's because we're not making any attempt to include transitive states, it generally makes things too complex -and that includes handling the problem of "what is the policy if I try to call stop midway through starting", Here is a new patch that adds a test.

Thanks Steve for taking a look at the patch and for the offline input on removing the synchronization from CompositeService#stop.

[~jianhe], [~xgong] - will either of you be able to take a look at the patch?, bq. Now, there is one little quirk by desynchronizing the serviceStart() and serviceStop methods. Although it is still impossible to have >1 thread successfully entering either method, there is the sequence
AbstractService.stateChangeLock appears to allow a single thread to make any state change at a given point in time. In the example, Thread 2's stop would wait for Thread1's start() to complete. No? , {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12640136/yarn-1929-2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/3567//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/3567//console

This message is automatically generated., patch looks good to me, wait for others to also take a look., Started looking at it. One question: This only happens when somebody explicitly tries to stop the RM overall, right? Trying to understanding if this can happen during any fail-over or only during shutdown + concurrent fail-over., From my examining the code around failover while working on the patch, I think the issue reported happens only when a failover is initiated during shutdown or vice-versa. I am "planning" to setup a jcarder run for YARN, so identify any other similar issues, but that is still in the planning stage. , Ping..., Seems 'fine' to me. It is one of those fine-for-now-but-not-sure-if-anything-else-is-broken.

OTOH, we aren't getting rid of the remaining locking in CompositeService. Something that we should fix separately. Don't want this patch to blow up more.

The test looks fine except for the 1second sleep. I can see that causing issues on VMs but let's see.

Checking this in., Just committed this to trunk, branch-2 and branch-2.4. Thanks Karthik!, SUCCESS: Integrated in Hadoop-trunk-Commit #5585 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5585/])
YARN-1929. Fixed a deadlock in ResourceManager that occurs when failover happens right at the time of shutdown. Contributed by Karthik Kambatla. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1591071)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/CompositeService.java
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMEmbeddedElector.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #556 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/556/])
YARN-1929. Fixed a deadlock in ResourceManager that occurs when failover happens right at the time of shutdown. Contributed by Karthik Kambatla. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1591071)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/CompositeService.java
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMEmbeddedElector.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1747 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1747/])
YARN-1929. Fixed a deadlock in ResourceManager that occurs when failover happens right at the time of shutdown. Contributed by Karthik Kambatla. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1591071)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/CompositeService.java
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMEmbeddedElector.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1773 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1773/])
YARN-1929. Fixed a deadlock in ResourceManager that occurs when failover happens right at the time of shutdown. Contributed by Karthik Kambatla. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1591071)
* /hadoop/common/trunk/hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/CompositeService.java
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/EmbeddedElectorService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestRMEmbeddedElector.java
]