[As a workaround, you can set the PATH environment variable to point to the directory containing hadoop.dll before launching NodeManager.  The environment variable will propagate to child container processes, so this works.

I have a question on how this is expected to work on Linux.  I see code in the {{yarn}} shell script and {{LinuxContainerExecutor}} that propagates java.library.path to children, but I also see checks in {{YARNRunner#warnForJavaLibPath}} that warn if a caller is attempting to control java.library.path and state that the caller should set LD_LIBRARY_PATH instead.  What is the expected way for this to work on Linux?

If the expectation is for the caller to set LD_LIBRARY_PATH, then this issue is likely a Won't Fix.  Setting PATH on Windows is roughly equivalent to setting LD_LIBRARY_PATH on Linux.  I'm already using this technique successfully as a workaround.

If the expectation is that the shell scripts set up java.library.path, and NodeManager propagates that to its children, then we do have a bug on Windows and need to make some code changes.  The first part is changing {{yarn.cmd}} to set java.library.path.  That's a small easy change that gets NodeManager to load hadoop.dll.  To cover the child processes, we'll need additional code changes, probably in {{DefaultContainerExecutor}}., On Linux, use of LD_LIBRARY_PATH is better because it's easier to manipulate (e.g. path munging) and offers a better search and error handling. When java.library.path is set, jvm tries to load the first match. If it fails, the failure is permanent. I.e. no further search is done. This is unacceptable if the search paths contain libraries for multiple architectures (e.g. 32 bit and 64 bit). When LD_LIBRARY_PATH is used exclusively, the system loader is in charge and it does a much better job.  I believe the behavior is similar on Windows with PATH., This is related to a YARN-729 [~yingdachen] is working on. We tried to fix the default setting for "mapreduce.admin.user.env" on Windows which should solve the problem for mapreduce applications. Other applications on YARN will have the problem using Native APIs.

If YARN can set up child tasks with correct 'java.library.path' settings, YARN applications can avoid the hassle to set up LD_LIBRARY_PATH/PATH on Linux/Windows., Kihwal and Chuan, thanks for the comments here and in MAPREDUCE-5451.  I think the conclusion then is:

# YARN applications, including MR, are responsible for managing the library path of their launched containers via configuration of LD_LIBRARY_PATH on Linux or PATH on Windows.
# However, there is still a need for the YARN daemons themselves to launch with a correct library path for finding libhadoop.so or hadoop.dll.  The other Hadoop daemons automatically find the library and set java.library.path, so ResourceManager and NodeManager need to do the same.  They already do this on Linux in the yarn shell script, so we just need to update the cmd scripts with equivalent logic.

I'm leaving this issue open for just the cmd script changes, but we won't make changes for NodeManager to propagate java.library.path to its launched child containers.

I've updated the issue summary and description accordingly.
, I'm attaching a patch that updates yarn.cmd to set java.library.path, similar to how the shell script works., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12602212/YARN-1025.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1885//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1885//console

This message is automatically generated., {quote}
-1 tests included. The patch doesn't appear to include any new or modified tests.
Please justify why no new tests are needed for this patch.
Also please list what manual steps were performed to verify this patch.
{quote}

There are no tests, because this is a change in a cmd script only.  I tested manually by launching YARN daemons in a command prompt where the PATH did not include an explicit reference to the location of hadoop.dll.  I verified that the daemon loaded the native code successfully., +1
Thanks for the patch, Chris!
Just to add some of my observations: we don't need to set this for mapred, hdfs, and hadoop cmd script files because they all use HADOOP_OPTS environment variable which is already set to include JAVA_LIBRARY_PATH in hadoop-config.cmd. This patch also matches Linux behavior -- we also explicitly set JAVA_LIBRARY_PATH in the Yarn Linux shell script., +1 for the change., I've committed this to trunk, branch-2, and branch-2.1-beta.  Thanks to Chuan and Arpit for the code reviews., SUCCESS: Integrated in Hadoop-trunk-Commit #4398 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4398/])
YARN-1025. ResourceManager and NodeManager do not load native libraries on Windows. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1521670)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/bin/yarn.cmd
, SUCCESS: Integrated in Hadoop-Yarn-trunk #329 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/329/])
YARN-1025. ResourceManager and NodeManager do not load native libraries on Windows. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1521670)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/bin/yarn.cmd
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1519 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1519/])
YARN-1025. ResourceManager and NodeManager do not load native libraries on Windows. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1521670)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/bin/yarn.cmd
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1545 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1545/])
YARN-1025. ResourceManager and NodeManager do not load native libraries on Windows. Contributed by Chris Nauroth. (cnauroth: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1521670)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/bin/yarn.cmd
]