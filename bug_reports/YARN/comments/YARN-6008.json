[Please refer discussion forum communication: http://mail-archives.apache.org/mod_mbox/hadoop-user/201612.mbox/browser, Let me take this discussion ahead.

As per current behavior, all running containers of *current attempt* will be returned regardless old/new attemptId is passed via CLI or api. Its makes sense because we are transferring old running containers from killed/failed attempt to new attempt as possible. So it makes sense to show containers of running attempt.

I would like to know whether this makes sense or if its not fine, you could help share specific use case issue where its breaks some of client scenarios. In that case, we can see whether a *cli sub-option* can be provided (for attempt cli/api) to get exclusive containers of  given attempt ID (like show an error message that attempt is not running etc). Thoughts? . cc/ [~davidyan], [~sunilg] In my case, the current attempt is actually not reusing the containers from the previous attempt. The previous attempt has containers that are terminated as a result of an AM failure. After the entire application is killed, the call actually returns the right containers. That's why I think the current behavior does not make sense.

Here's an example:

Application has one failed attempt, and the current attempt is 02. This call that asks for containers from the previous attempt (01) returns the containers of the current attempt (02):

{code}
$ ~/hadoop/bin/yarn container -list appattempt_1483391433545_0002_000001
17/01/02 22:15:43 INFO impl.TimelineClientImpl: Timeline service address: http://0.0.0.0:8188/ws/v1/timeline/
17/01/02 22:15:43 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:8032
17/01/02 22:15:43 INFO client.AHSProxy: Connecting to Application History server at /0.0.0.0:10200
Total number of containers :4
                  Container-Id	          Start Time	         Finish Time	               State	                Host	   Node Http Address	                            LOG-URL
container_1483391433545_0002_02_000005	Mon Jan 02 19:17:02 -0800 2017	                 N/A	             RUNNING	  david-ubuntu:37617	http://david-ubuntu:8042	http://david-ubuntu:8042/node/containerlogs/container_1483391433545_0002_02_000005/david
container_1483391433545_0002_02_000004	Mon Jan 02 19:17:01 -0800 2017	                 N/A	             RUNNING	  david-ubuntu:37617	http://david-ubuntu:8042	http://david-ubuntu:8042/node/containerlogs/container_1483391433545_0002_02_000004/david
container_1483391433545_0002_02_000002	Mon Jan 02 19:16:59 -0800 2017	                 N/A	             RUNNING	  david-ubuntu:37617	http://david-ubuntu:8042	http://david-ubuntu:8042/node/containerlogs/container_1483391433545_0002_02_000002/david
container_1483391433545_0002_02_000001	Mon Jan 02 19:16:48 -0800 2017	                 N/A	             RUNNING	  david-ubuntu:37617	http://david-ubuntu:8042	http://david-ubuntu:8042/node/containerlogs/container_1483391433545_0002_02_000001/david
{code}

Now, let's kill the application:

{code}
$ ~/hadoop/bin/yarn application -kill application_1483391433545_0002
17/01/02 22:18:39 INFO impl.TimelineClientImpl: Timeline service address: http://0.0.0.0:8188/ws/v1/timeline/
17/01/02 22:18:39 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:8032
17/01/02 22:18:39 INFO client.AHSProxy: Connecting to Application History server at /0.0.0.0:10200
Killing application application_1483391433545_0002
17/01/02 22:18:39 INFO impl.YarnClientImpl: Killed application application_1483391433545_0002
{code}

Now, let's execute the previous call again that asks for the containers from attempt 01:

{code}
$ ~/hadoop/bin/yarn container -list appattempt_1483391433545_0002_000001
17/01/02 22:19:28 INFO impl.TimelineClientImpl: Timeline service address: http://0.0.0.0:8188/ws/v1/timeline/
17/01/02 22:19:28 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:8032
17/01/02 22:19:29 INFO client.AHSProxy: Connecting to Application History server at /0.0.0.0:10200
Total number of containers :4
                  Container-Id	          Start Time	         Finish Time	               State	                Host	   Node Http Address	                            LOG-URL
container_1483391433545_0002_01_000004	Mon Jan 02 13:29:08 -0800 2017	Mon Jan 02 19:16:47 -0800 2017	            COMPLETE	  david-ubuntu:37617	                 N/A	http://0.0.0.0:8188/applicationhistory/logs/david-ubuntu:37617/container_1483391433545_0002_01_000004/container_1483391433545_0002_01_000004/david
container_1483391433545_0002_01_000003	Mon Jan 02 13:29:07 -0800 2017	Mon Jan 02 19:16:45 -0800 2017	            COMPLETE	  david-ubuntu:37617	                 N/A	http://0.0.0.0:8188/applicationhistory/logs/david-ubuntu:37617/container_1483391433545_0002_01_000003/container_1483391433545_0002_01_000003/david
container_1483391433545_0002_01_000002	Mon Jan 02 13:29:06 -0800 2017	Mon Jan 02 19:16:47 -0800 2017	            COMPLETE	  david-ubuntu:37617	                 N/A	http://0.0.0.0:8188/applicationhistory/logs/david-ubuntu:37617/container_1483391433545_0002_01_000002/container_1483391433545_0002_01_000002/david
container_1483391433545_0002_01_000001	Mon Jan 02 13:28:56 -0800 2017	Mon Jan 02 19:16:47 -0800 2017	            COMPLETE	  david-ubuntu:37617	                 N/A	http://0.0.0.0:8188/applicationhistory/logs/david-ubuntu:37617/container_1483391433545_0002_01_000001/container_1483391433545_0002_01_000001/david
{code}


As you can see, after the application has been killed, it has the right behavior, but not when the application is running. That's why I think it does not make sense.

Hope the above helps!, Thanks [~davidyan] for explaining. This helps.

This looks like a problem. We should not list containers from an attempt where app is was originally killed (ie. No more attempts are running). 
But I tested in trunk code, and it seems its not listing any containers. I need to check in 2.7.3. I ll get back., [~sunilg] With the Timeline Server running, shouldn't it return the containers from an attempt even when the app was killed? Note that I'm running the Timeline Server and I do intend to get the container info from a killed app., Thanks [~davidyan] for the pointer.
Post YARN-2808, we are trying to merge running containers from RM and completed containers from Timeline. And RM defaults to running attempt if given attempt id is failed. Hence we ran into this mix of problem.

I tested same scenario and has got below output

Step1: Killed attempt1 and attemp2 is running. In attempt1, 2 containers were already finished. Now query for attemp1.
{noformat}
HW12715:bin sunilgovindan$ ./yarn container -list appattempt_1483435241400_0002_000001
2017-01-03 15:39:07,332 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
2017-01-03 15:39:07,786 INFO impl.TimelineClientImpl: Timeline service address: 0.0.0.0:8188
2017-01-03 15:39:07,801 INFO client.RMProxy: Connecting to ResourceManager at /127.0.0.1:25001
2017-01-03 15:39:07,937 INFO client.AHSProxy: Connecting to Application History server at /0.0.0.0:10200
Total number of containers :4
                  Container-Id	          Start Time	         Finish Time	               State	                Host	   Node Http Address	                            LOG-URL
container_1483435241400_0002_02_000002	Tue Jan 03 15:38:36 +0530 2017	                 N/A	             RUNNING	     localhost:25006	http://localhost:25008	http://localhost:25008/node/containerlogs/container_1483435241400_0002_02_000002/sunilgovindan
container_1483435241400_0002_02_000001	Tue Jan 03 15:38:31 +0530 2017	                 N/A	             RUNNING	     localhost:25006	http://localhost:25008	http://localhost:25008/node/containerlogs/container_1483435241400_0002_02_000001/sunilgovindan
container_1483435241400_0002_01_000002	Tue Jan 03 15:38:06 +0530 2017	Tue Jan 03 15:38:30 +0530 2017	            COMPLETE	     localhost:25006	http://localhost:25008	http://0.0.0.0:8188/applicationhistory/logs/localhost:25006/container_1483435241400_0002_01_000002/container_1483435241400_0002_01_000002/sunilgovindan
container_1483435241400_0002_01_000001	Tue Jan 03 15:38:00 +0530 2017	Tue Jan 03 15:38:30 +0530 2017	            COMPLETE	     localhost:25006	http://localhost:25008	http://0.0.0.0:8188/applicationhistory/logs/localhost:25006/container_1483435241400_0002_01_000001/container_1483435241400_0002_01_000001/sunilgovindan
{noformat}

Step2: Now kill app1
{noformat}
HW12715:bin sunilgovindan$ ./yarn application -kill application_1483435241400_0002
2017-01-03 15:39:39,214 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
2017-01-03 15:39:39,708 INFO impl.TimelineClientImpl: Timeline service address: 0.0.0.0:8188
2017-01-03 15:39:39,723 INFO client.RMProxy: Connecting to ResourceManager at /127.0.0.1:25001
2017-01-03 15:39:39,859 INFO client.AHSProxy: Connecting to Application History server at /0.0.0.0:10200
Killing application application_1483435241400_0002
2017-01-03 15:39:40,213 INFO impl.YarnClientImpl: Killed application application_1483435241400_0002
{noformat}

Step3: Do same query as per Step1. I have to get completed list here
{noformat}
HW12715:bin sunilgovindan$ ./yarn container -list appattempt_1483435241400_0002_000001
2017-01-03 15:39:44,914 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
2017-01-03 15:39:45,363 INFO impl.TimelineClientImpl: Timeline service address: 0.0.0.0:8188
2017-01-03 15:39:45,377 INFO client.RMProxy: Connecting to ResourceManager at /127.0.0.1:25001
2017-01-03 15:39:45,511 INFO client.AHSProxy: Connecting to Application History server at /0.0.0.0:10200
Total number of containers :2
                  Container-Id	          Start Time	         Finish Time	               State	                Host	   Node Http Address	                            LOG-URL
container_1483435241400_0002_01_000002	Tue Jan 03 15:38:06 +0530 2017	Tue Jan 03 15:38:30 +0530 2017	            COMPLETE	     localhost:25006	http://localhost:25008	http://0.0.0.0:8188/applicationhistory/logs/localhost:25006/container_1483435241400_0002_01_000002/container_1483435241400_0002_01_000002/sunilgovindan
container_1483435241400_0002_01_000001	Tue Jan 03 15:38:00 +0530 2017	Tue Jan 03 15:38:30 +0530 2017	            COMPLETE	     localhost:25006	http://localhost:25008	http://0.0.0.0:8188/applicationhistory/logs/localhost:25006/container_1483435241400_0002_01_000001/container_1483435241400_0002_01_000001/sunilgovindan
HW12715:bin sunilgovindan$
{noformat}

In step1, I am getting attemp1's completed containers and attemp2's running containers. Now once app is finished, same query will get completed containers of attempt1. [Behavior from trunk code]. 
To avoid confusion, we can avoid giving running containers of attemp2 when attemp1 is queried for. And we can have some checks internally to see whether containers was transferred or not and then add that running containers to completed list.But thats an over kill. So either we can show all running containers of current attempt when previous attempt is queried OR we can skip to show any containers from RM and show only completed containers from Timeline server. My vote is in showing RUNNING + COMPLETED together.

In 2.7.3, if results are coming like you have mentioned (only RUNNING and NO COMPLETED) and not like my test results, i think its a bug in 2.7.3. I will double check that also in 2.7.3., Hi
Would like to work on this, can i assign this.?, I think Step1 is producing the wrong result. The container IDs returned for attempt 1 are:
container_1483435241400_0002_02_000002
container_1483435241400_0002_02_000001
container_1483435241400_0002_01_000002
container_1483435241400_0002_01_000001

However, the first two container IDs indicate that they are from attempt 2 (note the 02 in the container ID). So they should not appear when querying for attempt 1.

I am not familiar on how YARN reuses containers from previous attempt, but if my understanding is correct, it's possible to have a query for attempt 2 returning containers from attempt 1, but not vice versa like what is happening., Hi [~davidyan]

Sorry for the delay here. I understood the explanation, thank you.

Yes, I think it makes more sense now. IIUC If any container is reused in attempt2, still the container id will be of attempt1. Hence its not necessary that we need to show attempt2 containers here. 
It may not very direct implementation though. Since attempt1 was not present, we go to current attempt and pull live containers from there. So we need to filter specific containers for given attempt from the running attempt., I think its fine, if [~davidyan] is not actively working one same., Thanks, I'm just a YARN user, not exactly a dev, at least not yet. :), Thanks [~davidyan]

[~ajithshetty] as mentioned [here|https://issues.apache.org/jira/browse/YARN-6008?focusedCommentId=15811143&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15811143], we were planning to show only those containers of a given attempt. Which means that, some containers may be in RM and some may be in Timeline as well. Pls share your thoughts., Without Timeline Server, I think that's the expected behavior. However with Timeline Server enabled, it is supposed to return historical containers along with live containers. , Yes. Thats correct. I was also meaning the same., I agree to this, will upload initial patch for the same shortly]