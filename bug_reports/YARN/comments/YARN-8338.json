[Full exception trace
{code:java}
java.lang.NoClassDefFoundError: org/objenesis/Objenesis
    at org.apache.hadoop.yarn.server.timeline.RollingLevelDBTimelineStore.<clinit>(RollingLevelDBTimelineStore.java:174)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:348)
    at org.apache.hadoop.conf.Configuration.getClassByNameOrNull(Configuration.java:2532)
    at org.apache.hadoop.conf.Configuration.getClassByName(Configuration.java:2497)
    at org.apache.hadoop.conf.Configuration.getClass(Configuration.java:2593)
    at org.apache.hadoop.conf.Configuration.getClass(Configuration.java:2619)
    at org.apache.hadoop.yarn.server.timeline.EntityGroupFSTimelineStore.createSummaryStore(EntityGroupFSTimelineStore.java:266)
    at org.apache.hadoop.yarn.server.timeline.EntityGroupFSTimelineStore.serviceInit(EntityGroupFSTimelineStore.java:152)
    at org.apache.hadoop.service.AbstractService.init(AbstractService.java:164)
    at org.apache.hadoop.service.CompositeService.serviceInit(CompositeService.java:108)
    at org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer.serviceInit(ApplicationHistoryServer.java:115)
    at org.apache.hadoop.service.AbstractService.init(AbstractService.java:164)
    at org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer.launchAppHistoryServer(ApplicationHistoryServer.java:177)
    at org.apache.hadoop.yarn.server.applicationhistoryservice.ApplicationHistoryServer.main(ApplicationHistoryServer.java:187)
Caused by: java.lang.ClassNotFoundException: org.objenesis.Objenesis
    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:338)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    ... 15 more{code}, Debugged this with [~leftnoteasy] and found out that HADOOP-15406 after doing a classpath diff of the server before and after that patch.

Attaching a simple patch that works on a cluster., Thanks for the patch!  Yeah, this looks like a case of a hidden dependency that isn't getting pulled in.

I was wondering why we have to explicitly add this dependency when I can find no use of objenesis in the code base.  However I did notice this in the same applicationhistoryservice pom that is being modified:
{code}
    <dependency>
      <groupId>de.ruedigermoeller</groupId>
      <artifactId>fst</artifactId>
      <version>2.50</version>
      <exclusions>
        <exclusion>
          <groupId>org.javassist</groupId>
          <artifactId>javassist</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.objenesis</groupId>
          <artifactId>objenesis</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
{code}

The explicit exclusion of the objenesis dependency looks like it could be the reason we're not getting what we need.  Does it make more sense to remove that exclusion rather than add a dependency we're not directly depending upon?  Pinging [~haibochen] since [this comment|https://issues.apache.org/jira/browse/YARN-5894?focusedCommentId=15985224&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15985224] implies we're not supposed to be using it in practice but apparently are.
, To clarify, the reason the removal of the objenesis dependency didn't appear to cause issues before was because hadoop-nfs was incorrectly depending directly on mockito which also brought in objenesis within the mockito-all jar.  So removing it from fst's dependencies didn't remove it from the classpath completely.  Once the incorrect dependency was fixed in hadoop-nfs, the objenesis classes were dropped when the mockito dependency was dropped, and that broke fst as used by the timeline server., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 24s{color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue}  0m  3s{color} | {color:blue} The patch file was not named according to hadoop's naming conventions. Please see https://wiki.apache.org/hadoop/HowToContribute for instructions. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 17s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 23m 48s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 27m 46s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 47s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 61m 45s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 41s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 18s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 25m 36s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 25m 36s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 49s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  2s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green}  8m 45s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 42s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  0m 16s{color} | {color:green} hadoop-project in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  4m 14s{color} | {color:green} hadoop-yarn-server-applicationhistoryservice in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 29s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}105m 54s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:abb62dd |
| JIRA Issue | YARN-8338 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12924587/YARN-8338.txt |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  xml  |
| uname | Linux 3dea3bd5a83f 4.4.0-64-generic #85-Ubuntu SMP Mon Feb 20 11:50:30 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / bcc8e76 |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_162 |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/20825/testReport/ |
| Max. process+thread count | 408 (vs. ulimit of 10000) |
| modules | C: hadoop-project hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice U: . |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/20825/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, [~jlowe], yeah, it wasn't easy to figure out who / what depends on that JAR.

No easy way to unit test your approach, let me try that in a cluster., [~jlowe], never mind, removing the exclusion failed in compilation itself. We will have to declare a version.

{code}
[INFO] --- maven-enforcer-plugin:3.0.0-M1:enforce (depcheck) @ hadoop-aws ---
[WARNING]
Dependency convergence error for org.objenesis:objenesis:2.1 paths to dependency are:
+-org.apache.hadoop:hadoop-aws:3.1.1-SNAPSHOT
  +-com.amazonaws:DynamoDBLocal:1.11.86
    +-org.mockito:mockito-core:1.10.19
      +-org.objenesis:objenesis:2.1
and
+-org.apache.hadoop:hadoop-aws:3.1.1-SNAPSHOT
  +-org.apache.hadoop:hadoop-yarn-server-tests:3.1.1-SNAPSHOT
    +-org.apache.hadoop:hadoop-yarn-server-resourcemanager:3.1.1-SNAPSHOT
      +-org.apache.hadoop:hadoop-yarn-server-applicationhistoryservice:3.1.1-SNAPSHOT
        +-de.ruedigermoeller:fst:2.50
          +-org.objenesis:objenesis:2.5.1

[WARNING] Rule 0: org.apache.maven.plugins.enforcer.DependencyConvergence failed with message:
Failed while enforcing releasability. See above detailed error message.
{code}, Ah right, we then have the conflict with aws jars.  Sigh.  So we have to pick a version to go with, and objenesis 1.0 is what we would have been picking up originally in the mockito-all 1.8.5 jar.  Not sure version 1.0 is the best one to pick long-term, but it's the safest pick to preserve what we we're doing before.

As such I'm +1 for the patch, but we may want a followup JIRA to consider updating objenesis in trunk to something like 2.1 which is what the aws jars want it to be., [~jlowe] [~vinodkv], I did not understand who else was depending on objenesis 2.1, so wanted to avoid the accidental upgrade of objenesis. The upgrade of de.ruedigermoeller:fst would have upgraded objenesis from 2.1 to 2.5.1 at the time, without the exclusion of objenesis from fst. Based on [this fst comment|https://github.com/RuedigerMoeller/fast-serialization/blob/aceaad0075b2e1ef796597a1098aeb39fbea7fc9/pom.xml#L141], I assumed it was safe to do so, and there was not issue found in my test (as Jason noted, a dependency of mockito-all previously brought in objensis transitively).

[This comment|https://github.com/RuedigerMoeller/fast-serialization/blob/aceaad0075b2e1ef796597a1098aeb39fbea7fc9/pom.xml#L141] says that if android is not used, we don't need objenesis. It'd be nice if we can remove such runtime dependency from application history service, and let hadoop-aws to choose whichever verion of objenesis it needs., bq.  This comment says that if android is not used, we don't need objenesis.

I think this JIRA proves that the comment is wrong.  There's no direct usage of objenesis in the Hadoop code base, but when we try to load fst classes in a static code block it fails trying to lookup objenesis classes.  That looks like objenesis classes are required for FST to work.  Maybe the methods of those classes aren't called when not running on android, but the classes need to be there.
, +1, thanks [~vinodkv] for reporting this issue and providing the patch., {code}
+-org.apache.hadoop:hadoop-aws:3.1.1-SNAPSHOT
  +-com.amazonaws:DynamoDBLocal:1.11.86
    +-org.mockito:mockito-core:1.10.19
      +-org.objenesis:objenesis:2.1
{code}
you shouldn't be getting that at all as its a test only dependency. We also have a patch to remove that lib and tests of it completely, as while it was useful in the past, we've outgrown it HADOOP-14918

local DDB shouldn't be the cause for holding back on objenesis., My personal preference would be to use objenesis 1.0 in this JIRA to reduce risk.  We have been shipping that version in our classpath, indirectly via mockito-all 1.8.5, since hadoop-nfs first went into the project back in 2.1.0-beta.  That's the lowest-risk change for downstream projects and users.  We can then followup with another JIRA to resolve the conflict between fst's objenesis and DynamoDBLocal's objenesis dependencies in 3.2.0, which sounds like removing the DynamoDBLocal dependency and removing the exclusion of the objenesis 2.5.1 dependency that fst wants.
, [~stevel@apache.org], any objections to using 1.0 version to unblock this JIRA for 3.1.1?, no, let's declare the use of the one in use up until now, and we can cull the local dynamo tests for 3.2, which would match well to an objenesis update, Thanks to [~vinodkv] for the contribution and to [~stevel@apache.org] and [~ajisakaa] for additional review!  I committed this to trunk, branch-3.1, and branch-3.0.  I also filed YARN-8374 to track upgrading the objenesis dependency in 3.2., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14307 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14307/])
YARN-8338. TimelineService V1.5 doesn't come up after HADOOP-15406. (jlowe: rev 31ab960f4f931df273481927b897388895d803ba)
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/pom.xml
* (edit) hadoop-project/pom.xml
, BTW, maven shading on the hadoop minicluster is now complaining about .class conflict between objenesis and a mockito JAR, at least on a run of HADOOP-15407. 
{code}
[INFO] No artifact matching filter org.rocksdb:rocksdbjni
[WARNING] objenesis-1.0.jar, mockito-all-1.8.5.jar define 30 overlapping classes: 
[WARNING]   - org.objenesis.ObjenesisBase
[WARNING]   - org.objenesis.instantiator.gcj.GCJInstantiator
[WARNING]   - org.objenesis.ObjenesisHelper
[WARNING]   - org.objenesis.instantiator.jrockit.JRockitLegacyInstantiator
[WARNING]   - org.objenesis.instantiator.sun.SunReflectionFactoryInstantiator
[WARNING]   - org.objenesis.instantiator.ObjectInstantiator
[WARNING]   - org.objenesis.instantiator.gcj.GCJInstantiatorBase$DummyStream
[WARNING]   - org.objenesis.instantiator.basic.ObjectStreamClassInstantiator
[WARNING]   - org.objenesis.ObjenesisException
[WARNING]   - org.objenesis.Objenesis
[WARNING]   - 20 more...
[WARNING] maven-shade-plugin has detected that some class files are
[WARNING] present in two or more JARs. When this happens, only one
[WARNING] single version of the class is copied to the uber jar.
[WARNING] Usually this is not harmful and you can skip these warnings,
[WARNING] otherwise try to manually exclude artifacts based on
[WARNING] mvn dependency:tree -Ddetail=true and the above output.
[WARNING] See http://maven.apache.org/plugins/maven-shade-plugin/
{code}

I've done a scan for any mockito refs other than in test & can't see them, so I'm not sure what is happening. Something, somehow, is pulling in a mockito onto the hadoop-minicluster. Except I can't see it. Anyway, not sure how much it actually matters....]