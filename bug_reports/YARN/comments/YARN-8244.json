[This happens with {{TestContainerSchedulerQueuing.testStartMultipleContainers}}., The problem is in the test.  It is using the same ContainerLaunchContext for the two containers that are launched at the same time.  So the same environment map is being used for both containers, and we're hitting the ConcurrentModificationException while iterating it.  Adding orderEnvBy Dependencies increases the likelihood of hitting it because more processing is happening during the iteration.

I've put up a patch that uses separate contexts.   I have not been able to reproduce the problem  with this fix.

 , +1 looks good to me.  Submit to jenkins for testing., Thanks for the patch, Jim!

There are a lot of other tests that are also reusing container launch contexts, e.g.: testQueueMultipleContainers, testStartAndQueueMultipleContainers, etc.  If updating the test is indeed the correct fix then there are many other tests that need to be changed.

Interestingly, I don't see anything in the ContainerLaunchContext that is necessarily specific to a particular container (e.g.: a container ID) that would force the container launch context to have a 1-to-1 mapping to a container instance.  Therefore I think theoretically ContainerLaunchContext could be reused across containers.  However in practice these things are deserialized from protocol buffers, and I don't see how the startContainers method could be invoked with a reused ContainerLaunchContext object for all container start requests.

So we either need to fix all instances in the tests that are sharing container launch context objects across container start requests, or the NM code would need to stop assuming ContainerLaunchContext objects are safe to scribble on if we ever support calling startContainers in such a way where a common launch context could be reused across container start requests.
, | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 24s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 23m 40s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 49s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green}  9m 44s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 50s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 47s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 47s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m  3s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 59s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 19s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 19m 55s{color} | {color:green} hadoop-yarn-server-nodemanager in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 20s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 70m 27s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:abb62dd |
| JIRA Issue | YARN-8244 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12922646/YARN-8244.001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux cd63626337ed 4.4.0-121-generic #145-Ubuntu SMP Fri Apr 13 13:47:23 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / af4fc2e |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_162 |
| findbugs | v3.1.0-RC1 |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/20668/testReport/ |
| Max. process+thread count | 408 (vs. ulimit of 10000) |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/20668/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Looking into why the other tests are not failing for me.

The concurrent modification exception is happening during simultaneous container launches.  Most of these tests only actually launch one container at a time - they are queuing additional requests.  This is true for the following tests in TestContainerSchedulerQueuing.java:
 * testQueueMultipleContainers
 * testStartAndQueueMultipleContainers
 * testStartOpportunistcsWhenOppQueueIsFull
 * testKillOpportunisticForGuaranteedContainer
 * testPauseOpportunisticForGuaranteedContainer
 * testQueueShedding
 * testContainerDeQueuedAfterAMKill
 * testStopQueuedContainer
 * testPromotionOfOpportunisticContainers

These tests are getting the concurrent modification exception, but it is not causing the test to fail:
 * testKillMultipleOpportunisticContainers
 * testKillOnlyRequiredOpportunisticContainers

This one is using startContainers, but it's only starting one container:
 * testContainerUpdateExecTypeGuaranteedToOpportunistic

I checked all of the other tests I could find that use ContainerManager.startContainers().  Most of them are using it with a single request (a list with one element).

The ones that are actually launching multiple containers are in TestContainerManager.java.  These also do not fail, but they do throw the concurrent modification exception.
 * testMultipleContainersLaunch

 * testMultipleContainersStopAndGetStatus

 * testIncreaseContainerResourceWithInvalidRequests

[~jlowe], I will work on a patch to fix all of these tests.  Let me know if you feel like we should use a different approach.

In code, I don't think we are re-using the full ContainerLaunchContext anywhere.  For example, in TaskAttemptImpl.createContainerLaunchContext(), we create a new context which is mostly copied from a common one, but with private copies of the environment, commands, service buffers, and ACLs., Since in practice deserializing the protocol buffers will create separate container launch context objects even when they contain the same data, I'm OK with just fixing the tests.

Probably the easiest fix is to create a utility method in the test that creates a new ContainerLaunchContext.  Each test can call that directly to generate the context parameter when creating a StartContainerRequest.  No need to name it in a local because the tests never care to track it.  Also I would go ahead and update all the instances of this code pattern in TestContainerSchedulerQueuing even if not strictly needed to get the test to pass since people tend to copy-n-paste code when creating new test cases.
, [~jlowe], I put up another patch that does pretty much what you requested.  Only difference is that I didn't create a utility function because it was already a one-liner to create the ContainerLaunchContext, so I just added that to the StartContainerRequests.  I updated all of the tests in TestContainerSchedulerQueuing.

In TestContainerManager, I only updated the three tests that were launching multiple containers.

 , | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 35s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 2 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 23m 51s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 48s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 31s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green}  9m 17s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 47s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 19s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 45s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 45s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 17s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green}  9m 35s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 53s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 19s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 19m 43s{color} | {color:green} hadoop-yarn-server-nodemanager in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 22s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 69m 23s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:abb62dd |
| JIRA Issue | YARN-8244 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12922853/YARN-8244.002.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux 3b7c2d1b23ab 4.4.0-64-generic #85-Ubuntu SMP Mon Feb 20 11:50:30 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / ba051b0 |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_162 |
| findbugs | v3.1.0-RC1 |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/20681/testReport/ |
| Max. process+thread count | 410 (vs. ulimit of 10000) |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/20681/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks for updating the patch!

+1 lgtm.  Committing this.
, Thanks to [~Jim_Brennan] for the contribution and to [~eyang] for additional review!  I committed this to trunk, branch-3.1, branch-3.0, branch-2, and branch-2.9., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14176 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14176/])
YARN-8244. TestContainerSchedulerQueuing.testStartMultipleContainers (jlowe: rev dc912994a1bcb511dfda32a0649cef0c9bdc47d3)
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/TestContainerSchedulerQueuing.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/TestContainerManager.java
]