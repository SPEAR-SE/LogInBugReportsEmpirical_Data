[This would need to work for clusters where DNS doesn't resolve the hostnames, but instead /etc/hosts does the work. This is a not unusual setup in virtualized clusters when the VMs are on a virtual subnet, verified that we already have such logic:
{code}
  public boolean isValidNode(String hostName) {
    synchronized (hostsReader) {
      Set<String> hostsList = hostsReader.getHosts();
      Set<String> excludeList = hostsReader.getExcludedHosts();
      String ip = NetUtils.normalizeHostName(hostName);
      return (hostsList.isEmpty() || hostsList.contains(hostName) || hostsList
          .contains(ip))
          && !(excludeList.contains(hostName) || excludeList.contains(ip));
    }
  }
{code}, Verified that we have test case to test this logic
{code}
// To test that IPs also work
    String ip = NetUtils.normalizeHostName("localhost");
    writeToHostsFile("host1", ip);

    rm.getNodesListManager().refreshNodes(conf);

    nodeHeartbeat = nm1.nodeHeartbeat(true);
    Assert.assertTrue(NodeAction.NORMAL.equals(nodeHeartbeat.getNodeAction()));
    Assert
        .assertEquals(0, ClusterMetrics.getMetrics().getNumDecommisionedNMs());
{code}, Will close the ticket.
[~yeshavora] If you re-produce this issue, you can re-open it and provide the details. Thanks]