[hi [~Feng Yuan], can you give more details about the issue , like heap dump and is this only in trunk ?, Hi [~Naganarasimha],Like this:
In LocalDirAllocator#confChanged will check local-dir configuration if changed.
The LocalDirsHandlerService will timing change this conf because local disk breakdown.
And ShuffleHandler will also use  LocalDirAllocator#confChanged because the AllocatorPerContext is singleton,
but the conf of shuffleHandler is a clone version,so if the conf changed is nm the sh`s conf is still old.
So if shuffleHandler invoke LocalDirAllocator#confChanged once nm will create a FileSystem.., I have attach a patch,this issue is due to ShuffleHandler and Nodemanager configuration is inconformity.
So if NM change the local-dir configs and ShuffleHandler would not synchronize.
, Thanks [~Feng Yuan] for reporting the issue and working on a patch! If I follow you correctly, the AllocatorPerContext instance for NM_LOCAL_DIR is global, and because ShuffleHandler and NM are not sharing the same configuration object, ShuffleHandler does not see the change if the local directory is changed in NM, resulting in ShuffleHandler and NM thinking of different values for NM_LOCAL_DIR
{code}
    private Context confChanged(Configuration conf) throws IOException {
      ........
      if (!newLocalDirs.equals(ctx.savedLocalDirs)) {
          ctx = new Context();
          String[] dirStrings = StringUtils.getTrimmedStrings(newLocalDirs);
          ctx.localFS = FileSystem.getLocal(conf);
          ....
          ctx.savedLocalDirs = newLocalDirs;
      }
    }
    ...
{code}
The if statement will always evaluate to true if the other has executed confChanged() previously, so we have this thrashing issue? But looking at FileSystem.getLocal() implementation though, it seems like that only when caching for local file system is disabled, will massive number of LocalFileSystem instances be created. Can you confirm is that your setting?, [~Feng Yuan], did you see this after YARN-4095 went in? Thanks!, [~kshukla],YARN-4095 could solve this.
But if ShuffleHandler could use the same Configuration object,i think will solve this more gracefully and more flawless.
So now my choke point is why ShufflerHandler will use itself configuration when initize., [~haibochen],our setting is default value(cache the filesystem objects),
so them will be contained in a Map.So lead to memory leak., YARN-4095 have solve this.More discusses see that issue., [~Feng Yuan] If cached is enabled, there shouldn't be massive LocalFileSystem instances, unless I am missing something.  For a given key, LocalFileSystem.NAME in this case, there is going to be just one instance in the cache., [~haibochen], it may not use {{LocalFileSystem.NAME}} as key, by instead it use key by follow:
{code}
static class Cache {
    private final ClientFinalizer clientFinalizer = new ClientFinalizer();

    private final Map<Key, FileSystem> map = new HashMap<Key, FileSystem>();
    private final Set<Key> toAutoClose = new HashSet<Key>();

    /** A variable that makes all objects in the cache unique */
    private static AtomicLong unique = new AtomicLong(1);

    FileSystem get(URI uri, Configuration conf) throws IOException{
      Key key = new Key(uri, conf);
      return getInternal(uri, conf, key);
    }

======
private FileSystem getInternal(URI uri, Configuration conf, Key key) throws IOException{
      FileSystem fs;
      synchronized (this) {
        fs = map.get(key);
      }
      if (fs != null) {
        return fs;
      }

      fs = createFileSystem(uri, conf);
{code}
potentialy a UGI is the key.

]