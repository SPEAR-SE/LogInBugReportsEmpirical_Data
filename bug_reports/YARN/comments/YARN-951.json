[I would be happy to be totally wrong about this but I think we might be digging ourselves deeper into a configuration hole. Just by reading the description I am confused about 0 resources allowed but some minimum hard requirements are enforced as OS does not allow 0. Minimum will come into play when 0 resources are allowed but not when 0 resources are not allowed. How do understand this as a user? I am not suggesting that this hasnt been thought through or there is no use for this etc. There are 2 paths 1) being really flexible and allowing all possible definitions and combinations 2) restricting the parameters and allowing most of the users to get stuff done easily. We seem to be going down the first path here., With YARN-789 we added to the FairScheduler the capability to allow zero capabilities in either dimension (memory or CPU) for a resource request. The use case for this as been articulated in YARN-789.

Currently, this works fine except when you configure your cluster enforce memory and/or CPU utilization. In this case zero is not possible because regardless how minimal the process running in the container is, it will use some memory and CPU.

To enable memory and/or CPU utilization enforcement when having one or more AM asking for zero capabilities in one dimension of their resource request, we need to have a 'correction' in the actual enforcement.

The proposed solution adds knobs to do enable that correction, but it does not change the behavior at all if your don't set those knobs.

Bottom line, we are enabling a different set of use-cases without harming/changing at all the current behavior.

This is not new, it was mentioned and clearly explained in YARN-789. This JIRA is just to follow up with that.
, I'm as confused as Bikas.

I thought with YARN-789 FS can now set minimum to 1 (or 10, or 120) and multiplier to 1024 and we are done. Why do we need anything else?]