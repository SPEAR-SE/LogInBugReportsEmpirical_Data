[This redhat link suggests that there are problems with stack-check: [https://access.redhat.com/security/vulnerabilities/stackguard |Redhat stackguard vulnerability]:

To avoid stack guard page jumping, every stack allocation primitive needs to implement freshly allocated memory probing with the stack guard gap size granularity. *The existing gcc -fstack-check implementation aims to do exactly that, but currently it is not working correctly.* Before the gcc -fstack-check implementation is fixed and all of the exposed binaries are rebuilt, we have a combination of kernel and glibc mitigations that addresses all known reporter-provided exploits available:, I've also verified this with a simple test program that just does the file_copy call.

{noformat}
[jbrennan02@imposeenclose test]$ ./copy_file_test-rhel7 /etc/services /tmp/foo
copy /etc/services to /tmp/foo
[jbrennan02@imposeenclose test]$ ./copy_file_test-rhel7-stack-check /etc/services /tmp/foo
copy /etc/services to /tmp/foo
[jbrennan02@imposeenclose test]$ ./copy_file_test-rhel6 /etc/services /tmp/foo
copy /etc/services to /tmp/foo
[jbrennan02@imposeenclose test]$ ./copy_file_test-rhel6-stack-check /etc/services /tmp/foo
copy /etc/services to /tmp/foo
Segmentation fault
{noformat}

The RHEL 6 versions were compiled on this system:

{noformat}
[jbrennan02@goalssoles test]$ hostname
goalssoles.corp.ne1.yahoo.com
[jbrennan02@goalssoles test]$ cat /etc/redhat-release 
Red Hat Enterprise Linux Server release 6.8 (Santiago)
[jbrennan02@goalssoles test]$ gcc --version
gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-18)
{noformat}

The RHEL 7 versions were compiled on this system:
{noformat}
[jbrennan02@imposeenclose test]$ hostname
imposeenclose.corp.ne1.yahoo.com
[jbrennan02@imposeenclose test]$ cat /etc/redhat-release 
Red Hat Enterprise Linux Server release 7.4 (Maipo)
[jbrennan02@imposeenclose test]$ gcc --version
gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-16)
{noformat}

Compiled with: gcc [-fstack-check] -o copy_file_test<suffix> copy_file_test.c

I propose that we remove the -fstack-check flag, and possibly replace it with -fstack-protector, though that does not provide the same protection.

, Also see the discussion in the comments in YARN-7796, Thank you, [~Jim_Brennan] for raising this. Indeed, you are right that it is not a simple stack overflow that causes YARN-7796. However, I looked into it and it might be the right fix.

The article you mentioned above is a bit coarse, and it does not tell much about the details. I reproduced your issue with the exact RHEL versions you mentioned. At the time of the crash we have the following values:
{code:java}
RBX=RSP=0x7fffffffe320=BOTTOM-0x1CE0
SIZE=128K=0x20000
RDX=(SIZE + 2*15)/16*16=0x20010
RAX=RSP-(4K-8)-n*4K=0x7ffffffdd328=RSP-0x20FF8 << crashing writing 0 here
RCX=RSP-((SIZE + 2*15)/16*16+3K-8)=0x7ffffffdb318=RSP-0x23008
BUFFER=(RSP - SIZE + 15)/16*16=0x7FFFFFFDE310
{code}
The stack check code writes a 0 to every page from RSP-(4K-8) down until RCX using RAX as the iterator, which is RSP-0x23008 at the time of the crash. The eventual location of the buffer is a bit above of the crash but not too much.
 However, RSP is just 2 pages above the bottom of the stack and we try to check just a few pages below the eventual buffer location, so the write should succeed. In fact, when I try to reproduce the same issue (rh68 built binary on rh74) with a 110K buffer instead of 128K, it works.
 As a conclusion, the stack check code seems to be legitimate. However, the code might address the same memory later ending up with the same crash without stack checking. The RHEL 7.4 code does an or of each location with itself and 0. Since the stack check code is similar to what Meltdown does, I am wondering, if we ran into some kernel protection. Moving the buffer to the heap removes all risk running into this protection., Thanks [~miklos.szegedi@cloudera.com] for the detailed analysis!

I am not suggesting that we revert the fix from YARN-7796 - it clearly resolves the failure we were seeing and works in all cases.

The proposal in this Jira is to remove the {{-fstack-check}} flag because it has been shown to cause binary incompatibility issues, depending on the version of gcc a binary is compiled with and the OS it is run on.
{quote}As a conclusion, the stack check code seems to be legitimate. However, the code might address the same memory later ending up with the same crash without stack checking.
{quote}
I'm not sure I follow this? It sounds like you've shown that the size of the buffer matters - 110KB buffer compiled on RHEL 6 with {{-fstack-check}} works on RHEL 7 while it fails for a 128 KB buffer. But the 128 KB buffer works when compiled on RHEL 7 (with or without {{-fstack-check}}).   I agree that it may be that the RHEL 6 version of the stack checking code is tripping some kernel protection when the buffer is big enough.  The RHEL 7 version of the stack checking code does not.  That seems like an incompatibility.

My concern is that if we leave the {{-fstack-check}} flag there, some future change may cause a similar problem to the one we fixed in YARN-7796., I put up a patch for this that changes {{-fstack-check}} to {{-fstack-protector}}., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 17s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 16m 43s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 51s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 28m  5s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 46s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} cc {color} | {color:green}  0m 46s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 46s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 11m 34s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 19m 20s{color} | {color:green} hadoop-yarn-server-nodemanager in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 23s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 61m 53s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:5b98639 |
| JIRA Issue | YARN-7857 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12908829/YARN-7857.001.patch |
| Optional Tests |  asflicense  compile  cc  mvnsite  javac  unit  |
| uname | Linux 0b6933f920b8 3.13.0-135-generic #184-Ubuntu SMP Wed Oct 18 11:55:51 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / ae2177d |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_151 |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/19566/testReport/ |
| Max. process+thread count | 302 (vs. ulimit of 5000) |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/19566/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, As this is a change to the command line for container-executor, it was tested by compiling on both RHEL6 and RHEL7 and running the mapreduce pi example.   Also ran with the RHEL6-compiled container-executor on RHEL7.

I manually tested the change by compiling a small program that just includes a main() that calls a stripped down version of copy_file().  With {{-fstack-check}}, this program fails when compiled on RHEL 6 and run on RHEL 7.  With {{-fstack-protect}}, the RHEL6 version runs on RHEL7.

Please review., Thank you, [~Jim_Brennan] for the patch. I am a little bit concerned that we sacrifice security over compatibility. Since RHEL7 code does not run on RHEL6 anyways for glibc compatibility issues, would it make sense to keep the stack check code for RHEL7 and above? I checked the RHEL74 stack guard code and it seems to be much more precise than the one in the previous version., Thanks [~miklos.szegedi@cloudera.com]! That is a good suggestion. I will need to do some more investigation - I would think the key factor is the GCC version, not the OS version., [~miklos.szegedi@cloudera.com] I have prepared another patch that only adds the {{-fstack-check}} option for GCC versions > 4.8.
But on further review and reflection, I have come around to the opinion that the security issue is more important than this incompatibility, especially given that we have addressed that incompatibility in YARN-7796.

I have not found anything that officially changes the recommendation of using {{-fstack-check}} to help combat stack clash attacks, and I have not found an alternative command line option for gcc.   So I am reluctant to remove {{-fstack-check}} for any versions of GCC when it is currently not causing a problem.   My original motivation of preventing us from running into the same incompatibility again (due to future changes to container-executor code) does not seem worth re-opening a significant security hole.
, [~Jim_Brennan], I agree let's postpone removing the guard. The RH7 code checks much less. It seems like it checks only the pages that it needs, so probably that is why it is not crashing like the RH6 code. However, I am interested why the kernel traps the expansion of the stack despite of the fact that we are within the actual limit of the stack., The proposed solution involves removing the {{-fstack-check}} flag for some versions of GCC.
Given that the solution in [YARN-7796] resolves the SIGSEGV issue for container-executor, it doesn't seem wise to remove this flag, which is currently still recommended to prevent stack clash attacks.
]