[We discovered this while testing for the timeline service v.2 (YARN-5094)., I'd also point out there is already some code in the timeline service (e.g. {{SystemMetricsPublisher}}) that "fills in this timestamp" with the current timestamp for some events when writing to storage. However, strictly speaking this is the time when the data is written to the timeline service storage, and is not necessarily the same thing as the actual event timestamp., Thanks [~sjlee0] for raising this issue! I noticed that in RM's SystemMetricsPublisher code, we're creating {{SystemMetricEvent}} s which will always have timestamps. Those timestamps are typically generated by the call-sites of each system metrics publisher call. For example, in {{appACLsUpdated}} call, the update time is generated in RMAppManager#createAndPopulateNewRMApp. Similarly, appFinished method of SMP is called in RMAppImpl, when we perform the final state transition to final state. We also generate the finish time at that time. Maybe we'd like to provide a similar mechanism in the NM? That is to say, we can have NMMetricsEvent exposed in NM's source code, and create those events when we publish the data (instead of using timestamps of existing events)? I think we may put part of this work in trunk, but one concern is the newly introduced NMMetricsEvent will not be used in trunk but just in YARN-2928 branch... , Thanks for your comments [~gtCarrera9]! I agree that using {{SystemMetricEvent}} and others to populate the timestamp is one approach to this. I have a bit broader question for the event timestamps, however. Are event timestamps for consumption by the timeline service exclusively? Or should we expect them to have reasonable timestamps more generally?

And also is the rationale of not generating the timestamp by default (being too expensive) still a valid conclusion?, Thanks [~sjlee0]! 

bq.  Are event timestamps for consumption by the timeline service exclusively? Or should we expect them to have reasonable timestamps more generally?
Right now timeline service may be the only user of this data, but providing this information would certainly be helpful to other components. 

bq. And also is the rationale of not generating the timestamp by default (being too expensive) still a valid conclusion?
This is also my concern. For NMs, my hunch is we have much less events generated, therefore performance problem should be less severe? , bq. This is also my concern. For NMs, my hunch is we have much less events generated, therefore performance problem should be less severe?

IMO the JVM is past the point of developers having to worry about the performance of {{System.currentTimeMillis()}}. That may have been a legitimate concern 5 years ago, but probably not any longer, no?, [~sjlee0] [~gtCarrera9], IIUC from the above discussion, RM is already using System.currentTimeMillis() to generate ATS event timestamps, that means we are not worried about its performance overhead? If so, I think we should probably be consistent at least for events like container localization that we persist in ATS v2. Otherwise, YARN_NM_CONTAINER_LOCALIZATION_STARTED event will just show a timestamp of -1, which I don't think is of much value to users. Thoughts?]