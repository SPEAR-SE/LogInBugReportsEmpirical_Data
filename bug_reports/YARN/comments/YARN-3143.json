[I think this is caused by this code in the RMWebServices.java:

{code}
    final ConcurrentMap<ApplicationId, RMApp> apps =
        rm.getRMContext().getRMApps();
    AppsInfo allApps = new AppsInfo();
    for (ApplicationReport report : appReports) {
      RMApp rmapp = apps.get(report.getApplicationId());

      if (finalStatusQuery != null && !finalStatusQuery.isEmpty()) {
        FinalApplicationStatus.valueOf(finalStatusQuery);
        if (!rmapp.getFinalApplicationStatus().toString()
            .equalsIgnoreCase(finalStatusQuery)) {
          continue;
        }
      }

      AppInfo app = new AppInfo(rmapp, hasAccess(rmapp, hsr),
          WebAppUtils.getHttpSchemePrefix(conf));
      allApps.add(app);
{code}

The problem here is that we're trying to look at a pool of applications asynchronously, therefore it is possible that we could get an app report for an application that is gone by the time we call apps.get(report.getApplicationId).  That means rmapp can be null, and note that AppInfo's constructor effectively does nothing if the RMApp argument is null.  That explains the lack of all sorts of fields by the time it gets to JSON.

So there are a couple of problems here:

# We should not be adding AppInfos if rmapp is null
# We can blindly dereference rmapp and generate an NPE if there's a final status query, Patch to skip non-existent apps as we're walking the app reports., bq. The problem here is that we're trying to look at a pool of applications asynchronously, therefore it is possible that we could get an app report for an application that is gone by the time we call apps.get(report.getApplicationId). That means rmapp can be null, and note that AppInfo's constructor effectively does nothing if the RMApp argument is null. That explains the lack of all sorts of fields by the time it gets to JSON.

That could be the issue. But [~kthrapp] Could you provide the RM logs, please ? That will help debug.


, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696592/YARN-3143.001.patch
  against trunk revision 5f4ef2d.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.TestFairScheduler

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6514//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6514//console

This message is automatically generated., Thank you for fixing this issue, [~jlowe]. The patch LGTM. +1

I verified that the failing test seems to be a manifestation of YARN-2666 and is not related to this patch., bq. Could you provide the RM logs, please ? That will help debug.

Here's what the RM log says when the NPE occurs with a finalStatus query:

{noformat}
2015-02-05 15:18:09,744 [1124535424@qtp-165859665-85345] WARN webapp.GenericExceptionHandler: INTERNAL_SERVER_ERROR
java.lang.NullPointerException
{noformat}

That's all there is.  No stacktrace or anything else.  Nothing else in the logs looks out of place around the time of the call.  We also saw nothing of note in the logs when the web services returned apps with missing fields, which aligns with what I'm pretty confident is happening.  The RM is removing applications from the RMApps map just as the web services are trying to walk it.  Given how expensive it is to grab all the scheduler lock for all those applications on this busy cluster, I'm not surprised that by the time the web services receives the full list of application reports at least one of the apps has retired from the RMApps collection., +1 the patch looks good., Thanks for the review, Kihwal!  Committing this., I committed this to trunk and branch-2., My apologies, I also meant to thank Eric for the original review!, FAILURE: Integrated in Hadoop-trunk-Commit #7045 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7045/])
YARN-3143. RM Apps REST API can return NPE or entries missing id and other fields. Contributed by Jason Lowe (jlowe: rev da2fb2bc46bddf42d79c6d7664cbf0311973709e)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServices.java
, Thanks [~jlowe] for debugging and the super quick patch and thanks [~eepayne] and [~kihwal] for reviewing., FAILURE: Integrated in Hadoop-Yarn-trunk #832 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/832/])
, FAILURE: Integrated in Hadoop-Yarn-trunk-Java8 #98 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/98/])
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #2030 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2030/])
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #95 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/95/])
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2049 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2049/])
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #99 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/99/])
]