[If my math is correct, we won't have this problem for about 292,277 millennia.  IMHO this is effectively a non-issue, as we would be so lucky for this code to be in use when that becomes a problem.  ;-)

On a separate note, the unit test doesn't actually test the code that was changed.  It just asserts that the JVM is performing math correctly with Longs.  The change in DelegationTokenRenewer could later regress while the unit test continues to pass, which doesn't make it a very effective unit test., Thanks for the review. Ok, you are right. The code won't be used until the time become Long.MAX_VALUE, which may not happen unless the system time is corrupted due to un-expected error from OS, Hardware, Time server...
My change can work better with error system time and the test code is to prove this error condition and I should remove it.
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695356/YARN-3114.000.patch
  against trunk revision 7acce7d.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.recovery.TestFSRMStateStore

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6459//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-YARN-Build/6459//artifact/patchprocess/patchReleaseAuditProblems.txt
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6459//console

This message is automatically generated., System.nanoTime require using difference to compare two nanoTime values because of the possibility of numerical overflow.
For currentTimeMillis we shouldn't worry numerical overflow. So this issue is really nonissue :) thanks [~jlowe] for your finding.]