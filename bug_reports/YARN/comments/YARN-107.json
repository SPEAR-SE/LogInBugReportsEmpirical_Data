[Currently, if we try to kill an absent application by calling ClientRMService.forceKillApplication(), it will simply throw out a YarnException. That works fine, but if the clients call yarn application -kill ${unknow_ApplicationId} in commandline, they will get the exception. Sometimes, it will let Clients confuse. The possible solution can be : We can create a exception, say NOTFOUNDException, which extends from YarnException. Instead of just throwing out YarnException, we can add informations in this exception and throw it out. And at Client or ApplicationCLI, we can catch this NOTFOUNDException, and print out the message instead of print out the exception., In Yarn-873, we introduced ApplicationNotFoundException. This exception will be used in ClientRMService.forceKillApplication(), too., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12594070/YARN-107.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1581//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1581//console

This message is automatically generated., The patch is fine for absent applications in RM. But when we issue kill command for non-running applications, it will simply give a message saying "Killing application <app-id>".

{code:xml}
host-10-18-40-24:/home/apache/install/hadoop-3.0.0-SNAPSHOT/bin # ./yarn application -list
Total Applications:1
                Application-Id      Application-Name        Application-Type          User           Queue                   
		State             Final-State       Progress                         Tracking-URL
application_1374754213039_0001            word count               MAPREDUCE          root               a                
	FINISHED               SUCCEEDED           100%  host-10-18-40-24:19888/jobhistory/job/job_1374754213039_0001
host-10-18-40-24:/home/apache/install/hadoop-3.0.0-SNAPSHOT/bin # ./yarn application -kill application_1374754213039_0001
Killing application application_1374754213039_0001
host-10-18-40-24:/home/apache/install/hadoop-3.0.0-SNAPSHOT/bin #
{code}

I think as part of this JIRA, we need to handle the non-running(FINISHED/FAILED/KILLED) applications kill also., Oh, I miss that part. Before we kill any applications, we can check current state of this application. If current state is FINISHED/FAILED/KILLED, we simply throw a YarnException (or maybe a new exception KillNonRunningApplicationException ?) saying we are trying to kill non-running application., One thing to note here is some potential use-cases I can see for the CLI.  A user may be invoking this in a script just to make sure the application is no longer running, and may not be thrilled to see that it occasionally fails because the application happened to finish (successfully or not) just before the kill request arrived.  In that case, will it be easy for their script to differentiate between this race or an completely invalid app ID or some other fatal error?  One way to solve that is to have the CLI support a flag stating it doesn't want the command to report failure if the application is already in a terminal state when the kill command arrives., Well, How to determine whether this kill command is valid or not is based on application's current state. It is very possible that there is a event that will change app to finished state. And this event is right before kill event. So, when the kill comment comes in, the finished/failed/killed state will be still the same.

I think the easiest way to differentiate the error is based on the exception types it catches. And for the user side, the easiest way is differentiate the error based on the different exist code if we set different exist code for different types of error instead of just simply throwing the exceptions , Cancelling patch to discuss and address the comments., bq. I think the easiest way to differentiate the error is based on the exception types it catches. And for the user side, the easiest way is differentiate the error based on the different exist code if we set different exist code for different types of error instead of just simply throwing the exceptions 

IMHO the most common case for this API is to make sure the application is no longer running, and the caller isn't so much worried about the exact final state as long as it's a terminal state.  That means for the common case, users are going to have to wrap calls to this in a try..catch just so they can ignore the corner-case exception.  Sounds like a pain.  Do we really need to throw an exception in this case?  Is the client really going to care and want to field said exception?  Same with the CLI, callers would need to check for explicit exit codes to make sure what looks like an error really is an error.  If the caller really cares about distinguishing between killing a running app and killing an already terminated app, can't they just check the state first?  Regardless of whether they do the check or this API does it for them, there will always be a race where the app completes before it is killed.

Maybe I'm in the minority here, and that's fine.  I just don't want the API to be difficult to wield in the common case if there's a way for the caller to cover the corner case in another way., Still throw out KillNonRunningApplicationException when we try to kill the application which is at Terminated state. At applicationCLI, simply catch this exception and print out the message., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12595123/YARN-107.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1622//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-YARN-Build/1622//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1622//console

This message is automatically generated., I still think throwing an exception for this is a mistake and makes the API harder to wield.  What is the use-case where throwing the exception is necessary?, Fix -1 release audit., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12595207/YARN-107.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1625//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1625//console

This message is automatically generated., Clearly, we have two options, throw an exception if an app is already finished or return quietly. It is indeed useful to say that an application finished for CLI, but the client itself can do that. ApplicationCLI can check the state and print a different message. If it is via API, anybody can do a state check if need be. In that light, I am not strongly opinionated eitherways, but we can keep forceKillApplication just one of a forced operations which usually return quietly. (Like rm -f)., Check state in CLI before we send the kill command, and will print out different message if the application is already in terminated state. Also keep forceKillApplication return quietly if it tries to kill a non-running application
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12595345/YARN-107.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1634//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1634//console

This message is automatically generated., I thought the consensus was to not throw an exception in the API. Please make that change.

Also, the message on CLI can simply be "Application has already finished" or something similar., bq.I thought the consensus was to not throw an exception in the API. Please make that change.

Oh, the exception in the forceKillApplication api is for the non-exist application_id, just like we did in getApplicationReport api. , Makes sense. The other point is you should have a separate test to validate that it doesn't throw an exception when an app is already finished. In TestClientRMService., bq.The other point is you should have a separate test to validate that it doesn't throw an exception when an app is already finished. In TestClientRMService.

Do not think we have to do this test. Because there is no other changes at forceKillApplication api in ClientRMService side except for checking the non-existing applicationId. The actual checking non-running application is at ApplicationCLI#killApplication side. In that function, we get appReport to check the application state, then decide whether the kill request will be sent or not. And this logic is already tested at TestYarnCLI., Address all latest comments, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12597639/YARN-107.5.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 2 warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1702//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1702//console

This message is automatically generated., There javadoc warnings are not related to this patch.
[WARNING] org/apache/directory/api/ldap/model/name/Dn.class(org/apache/directory/api/ldap/model/name:Dn.class): warning: Cannot find annotation method 'value()' in type 'edu.umd.cs.findbugs.annotations.SuppressWarnings': class file for edu.umd.cs.findbugs.annotations.SuppressWarnings not found
[WARNING] org/apache/directory/api/ldap/model/name/Dn.class(org/apache/directory/api/ldap/model/name:Dn.class): warning: Cannot find annotation method 'justification()' in type 'edu.umd.cs.findbugs.annotations.SuppressWarnings', We may have to re-visit the error handling for non-existing applications when ApplicationHistoryServer comes in and RM doesn't remember old apps anymore.

But for now, this looks good. +1. Checking this in., Committed this to trunk, branch-2 and branch-2.1. Thanks Xuan!, SUCCESS: Integrated in Hadoop-trunk-Commit #4286 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/4286/])
YARN-107. Fixed ResourceManager and clients to better handle forceKillApplication on non-running and finished applications. Contributed by Xuan Gong. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1514918)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/cli/TestYarnCLI.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestClientRMService.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk #304 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/304/])
YARN-107. Fixed ResourceManager and clients to better handle forceKillApplication on non-running and finished applications. Contributed by Xuan Gong. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1514918)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/cli/TestYarnCLI.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestClientRMService.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1494 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1494/])
YARN-107. Fixed ResourceManager and clients to better handle forceKillApplication on non-running and finished applications. Contributed by Xuan Gong. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1514918)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/cli/TestYarnCLI.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestClientRMService.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1521 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1521/])
YARN-107. Fixed ResourceManager and clients to better handle forceKillApplication on non-running and finished applications. Contributed by Xuan Gong. (vinodkv: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1514918)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/test/java/org/apache/hadoop/yarn/client/cli/TestYarnCLI.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestClientRMService.java
]