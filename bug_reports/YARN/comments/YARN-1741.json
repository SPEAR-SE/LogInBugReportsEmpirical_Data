[[~sirianni], will you be able to write a test-case simulating what happens your environment so that we can work towards a fix? Better if you can contribute a fix yourselves!, sounds like as an input stream is being passed in, there is no absolute path to resolve. It should be possible to tell the XML parser/config where the XML document base is.

(FWIW, I use xinclude too, to keep secrets like s3 & swift credentials out of SCM), Instead of using conf.addResource(InputStream), we can use conf.addResource(InputStream, String) which we can give Configuration file name as the parameter. 
Then we can do:

{code}
else if (resource instanceof InputStream) {
        doc = parse(builder, (InputStream) resource, wrapper.getName());
        returnCachedProperties = true;
      }
{code}
, Yes - This was the approach I was planning on investigating with a potential patch.  The trick is how to most cleanly get that to work with the {{ConfigurationProvider}} API.  Two main approaches seem possible:
# Change {{ConfigurationProvider.getConfigurationInputStream()}} to return a {{(String, InputStream)}} pair.
# Change {{ConfigurationProvider}} to provide directly into the {{Configuration}} object itself.  Something like {{ConfigurationProvider.provideTo(Configuration conf)}}.  With this approach, the different {{ConfigurationProvider}} subclasses could invoke the specific {{conf.addResource()}} overload that made sense for the subclass.

Based on investigating the usages of {{ConfigurationProvider.getConfigurationInputStream()}}, I was leaning towards the 2nd approach., Noted that ConfigurationProvider not only provides inputstream for Configuration files, also providers the inputStream for include_node file and exclude_node file, OK - approach 2 would not work then.  I thought when I did a usage search that all callers of {{ConfigurationProvider.getConfigurationInputStream()}} were immediately handing the returned {{InputStream}} to a {{Configuration}} object.  Guess I missed some usages., Bumping the priority of this based on YARN-2210 and the fact that existing configuration setups that relied on relative xincludes used to work in prior releases., +1 with the idea for the ConfigurationProvider to return a tuple object of (input stream, system id)., Since there is a general problem of loading conf via InputStream, to support these cases we need to enable users to pass custom EntityResolver.

We should implement this kind of method:
{code}
Configuration#addResource(InputStream is, EntityResolver er)
{code}, Targetting for 2.5.

[~sirianni]/[~jeffgx619], can one of you express intention of working on this by assigning this to yourselves?, [~vinodkv], unfortunately I'm no longer working with Hadoop at my day job so I likely won't have the bandwidth to work on this in any reasonable timeframe.  Great to hear that there is momentum to fix this though!, Tx for the note, Eric. Assigning this to Xuan for now as he did the original conf-provider work., I made a modification to my patch (v04) for HADOOP-10623 to highlight how xi:include issue can easily be resolved by using the existing FsUrlStreamHandler I stumbled upon., One caveat I forgot to mention is that FsUrlStreamHandlerFactory would need to be changed to have setter for conf to resolve the chicken-and-egg problem.]