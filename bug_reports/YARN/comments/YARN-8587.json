[This bug is result of docker run detach reports exit_code 0, but the process inside the container fail to run.  For a brief period of time, node manager will report back that container is in RUNNING state, then fail the container later.  One possible solution is to change container-executor for non-entry-point mode to become more similar to entry_point mode to run docker run in the foreground, and parent process have a set of retries for docker inspect to obtain PID.  This removes the possible false positive reporting of RUNNING state.  The synthetic timeout approach may kill container prematurely (or wait longer than necessary for failing container), if container takes more than 30 seconds (or configured values) to start the first process in the container.  Do we want to make non-entry-point to work like entry-point to prevent the false positive or we are ok with current state?, There is backward incompatibility concern with distributed shell, where we allow user to specify multiple unix command and output redirection of log file.  For fixing this transient false positive, logging mechanism behavior will change.  stderr, stdout will contain command output.  stderr.txt and stdout.txt will contain more information including command launched, and docker errors.  Hence, this can only be fixed if we agree that the incompatible change is negligible., [~yeshavora] YARN state machine transition from SCHEDULED to RUNNING then run container-executor with the docker run command.  SSH command tests happen in parallel while container-executor launch docker run command.  This may report incorrect result from v1 API when container-executor and docker run command take more time to start.  We might want to query for container sub-state RUNNING_BUT_NOT_READY from YARN service REST API (or yarn app -status [appname]) to determine if docker run command is actually started.  Only run docker ps -a after container sub-state has changed to RUNNING., DistributedShell uses YARN v1 API, which doesn't support more fine-grained status distinction between container-executor running vs docker running.  If docker run failed due to invalid parameters supplied by distributed shell, it may take up to a minute to fail the container because the delay happens in heart beat interval to report the status to AM and RM.  The recommendation is to update the test case to use yarn container -list [appId] to shorten the time to check container running status from RM, but not completely eliminate possible network delay in container status report.]