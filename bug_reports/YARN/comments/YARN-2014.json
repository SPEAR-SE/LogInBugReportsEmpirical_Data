[Note sure whether it is a MR issue or YARN issue yet. Moving to YARN for now., Tentatively setting target-version 2.5.0., I did a bit of investigation on this, and the problem appears to be around the duration of the tasks.  In 2.4 the sleep job tasks are taking about 660 msec longer to execute than they do in 0.23.  I didn't nail down exactly where this extra delay was coming from, but I did notice that the tasks in 2.4 are loading over 800 more classes than they do in 0.23.  I think most of these are coming from the service loader for FileSystem schemas, as the 2.4 tasks loads every FileSystem available and 0.23 does not.  In 0.23 FileSystem schemas are declared in configs, but in 2.4 they are dynamically detected and loaded via a service loader.

The ~0.5s delay in the task appears to be a fixed startup cost and is amplified by the AM scalability test since it runs very short tasks (the main portion of the map task lasts 1 second) and multiple tasks are run per map "slot" on the cluster, serializing the task startup delays., Thanks for the info Jason. Do you have a link to the JIRA covering the FS ServiceLoader stuff?

In your configs, what are the file-systems whose impls are defined? Or is it just the default impls added by the default config files? May be one thing that can be done, if possible and if you have time, is to remove the unnecessary service-loader declaration files (not sure what you call them) from the installation and try this again.

, HADOOP-7549 added service loading of filesystems, and HADOOP-7350 added service loading of compression codecs.  I'll see if I have some time to disable the service loading of unnecessary classes., Moving all tickets targeted for the already closed release 2.6.0 into 2.6.1/2.7.2., Should this be targeted to 2.6.2? We're trying to release 2.6.1 soon. Let me know., Unless the patch is ready to go and the JIRA is a critical fix, we'll defer it to 2.6.2. Let me know if you have comments. Thanks!, Targeting 2.6.3 now that 2.6.2 has shipped., [~patwhitey2007] / [~jlowe], any ideas if this ever got fixed?, No, AFAIK this was never fixed.  As I mentioned earlier, my best guess was that it was related to the significantly increased classloading that 2.x is doing relative to 0.23., Moving out all non-critical / non-blocker issues that didn't make it out of 2.7.2 into 2.7.3., Hi, can we move this out of 2.6.3? Thanks!]