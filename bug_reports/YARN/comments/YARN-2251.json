[A straightforward change to insure all XXXInfo objects check whether the elapsed time is not negative instead of not -1. Test cases is not necessary., I'll file a separate Jira about the global clock synchronization issue, and introduce the possible problem to result in negative elapsed time., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12652340/MAPREDUCE-5940.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4686//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4686//console

This message is automatically generated., +1, patch looks good., Thanks [~zjshen] to work on this and [~vvasudev] to review! This seems to be an interesting issue. I think a better/clean way to fix it is to update elapsed() method: If System.currentTimeMillis() < started, then we can return -1 or 0 instead (and log a warn that clock not getting synchronized). Thoughts?, Also adding a test in TestTimes.java could be a good idea., Silently making the elapsed time as 0 when it is negative may lead to hiding the bugs related to elapsed time. Adding a warning/info message before making it as 0 would help to diagnose/find out the issues if any., bq. Silently making the elapsed time as 0 when it is negative may lead to hiding the bugs related to elapsed time. Adding a warning/info message before making it as 0 would help to diagnose/find out the issues if any.
Agree. I have similar comments above., Thanks for review, Junping and Devaraj.

bq. If System.currentTimeMillis() < started, then we can return -1 or 0 instead

IMHO, Times#elapsed is to computed the delta between two timestamps: started and finished. Given System.currentTimeMillis() < started <= finished, it still should be a valid case. To make sure the elapsed time should always be non-negative, we need to check started <= finished, and return -1 if not.

bq. (and log a warn that clock not getting synchronized)
bq. Adding a warning/info message before making it as 0 would help to diagnose/find out the issues if any.
bq. Also adding a test in TestTimes.java could be a good idea.

Sounds a good idea. Will address it in the new patch.

In addition, add a code comment to explicitly declare the behavior of Times#elapsed, Kick off Jenkins test.
Patch looks good to me. [~devaraj.k], are you OK with the new patch? If so, I will commit it once Jenkins +1., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653860/MAPREDUCE-5940.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4712//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/4712//console

This message is automatically generated., +1, Latest patch looks good to me.
, Move to YARN project as all fix is happened in YARN side., Kick off Jenkins test again., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653860/MAPREDUCE-5940.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/4201//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/4201//console

This message is automatically generated., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12653860/MAPREDUCE-5940.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/4202//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/4202//console

This message is automatically generated., I have commit it to trunk and branch-2. Thanks [~zjshen] for the patch!, SUCCESS: Integrated in Hadoop-trunk-Commit #5826 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/5826/])
YARN-2251. Avoid negative elapsed time in JHS/MRAM web UI and services (Contributed by Zhijie Shen) (junping_du: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1607833)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Times.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/util/TestTimes.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1794 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1794/])
YARN-2251. Avoid negative elapsed time in JHS/MRAM web UI and services (Contributed by Zhijie Shen) (junping_du: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1607833)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Times.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/util/TestTimes.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1821 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1821/])
YARN-2251. Avoid negative elapsed time in JHS/MRAM web UI and services (Contributed by Zhijie Shen) (junping_du: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1607833)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Times.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/util/TestTimes.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #604 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/604/])
YARN-2251. Avoid negative elapsed time in JHS/MRAM web UI and services (Contributed by Zhijie Shen) (junping_du: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1607833)
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/Times.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/util/TestTimes.java
]