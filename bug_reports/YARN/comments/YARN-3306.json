[Here's a detailed proposal doc.

It's light on details on the leaf-queue policy interface - will do so in one of the sub-tasks.

[~cwelch] is helping with most of the implementation, Tx Craig., I agree with the pain points of a fragmented scheduler state in YARN. 

Is the proposal only to add a policy for assigning resources in the leaf queue and leave the rest of the schedulers as is? If so, can you elaborate the advantages (usecases)? 

Or, is the proposal to arrive at a single scheduler implementation with the existing schedulers becoming just policies? If so, we might want to implement a new scheduler, may be in a new branch, and capture all the existing features and phase the two out. , Thanks for your thoughts, [~kasha]

The immediate proposal is to begin adding new functionality in a fashion which can be easily shared across scheduler implementations and mixed together in a single cluster.  The first case is to support additional container assignment and preemption types to fifo for applications in the capacity scheduler and potentially the fair scheduler using the same code, but this is expected to be expanded to cover queue relationships and potentially other behaviors (limits, etc) over time.

The hope is that this allows us to iterate toward a state where the various behaviors of the schedulers can be mixed, matched, and shared across implementations rather than having to try and accomplish this all in one go, and allows us to achieve the benefit of mixing and matching some of the features earlier/along the way.

I suspect that at some point we'll hit a critical mass where enough of the functionality has been extracted to sharable components and where we've been able to establish an understanding of how these can be made to compose well, and then we'll take that as an inflection point and go down the path you are suggesting, introduce a new scheduler to house the policies and in that way complete the picture, deprecating the others.  That's by no means the only possible conclusion, but it seems to be a good and/or  likely one., [~cwelch] - thanks for the clarifications. I also spoke to Vinod offline on the goals and likely path of this work. 

I see the benefits of having a single scheduler with pluggable policies. I feel it might be easier to implement a new scheduler and plug-in FS and CS policies into it. However, I understand the iterative approach you propose will get validation from current users along the way.

I am a little circumspect about the iterative approach and how we avoid regressions, but remain hopeful the code will convince me it is the right approach. I would like to be involved in the work here, can we work on a branch and merge in as and when appropriate.  , Yup, the discussion above captures the main bits, but to summarize

How do we avoid the fragmentation for this feature itself?
 - By putting the framework in the common place and use it in specific schedulers one after another.

Is this only for leaf-queue?
 - No, we start with leaf queue and demonstrate viability across different existing policies and then move up to parent queue (which should be easier than leaf-queue) and extending to limits

Why not a new scheduler?
 # Getting existing users to validate our changes, and a smoother migration path.
 # Make sure current behaviors are completely absorbed., As I was asking earlier, can we work on a branch and merge in as and when we have a meaningful/complete parts? The code looks quite isolated and shouldn't be much overhead to work on a branch.

, I don't think it's really necessary at this point, we've been careful to keep the integration points narrow and controllable with configuration, as long as we continue to do that I don't think we need the separation of a branch., The branch is not only to avoid interfering with other work, but also to ensure we don't ship bits we don't have to. Integration points being narrow is probably more a reason to work on a branch. , bq. Integration points being narrow is probably more a reason to work on a branch

I don't see why - it seems to me to suggest the opposite, that we are able to achieve isolation of the functionality in the main codebase without risk

bq. The code looks quite isolated

Another reason we don't need to work in a branch

We're trying to approach this iteratively, building specific, narrow functionalities to completion and then making them available for use and feedback, this will be difficult if it's all isolated away in a branch.  The approach so far works well for that process - much better than doing all the work in isolation and then bringing a much larger change into the main codebase all at once.  

As far as I can tell, separating this out into a branch is a net negative- there is overhead to doing so and it runs contrary to the iterative approach we're trying to take, without providing any clear benefit., Rephrasing what I said earlier, I am perfectly fine with staging this work in trunk. 

My only concern is with shipping 2.8.0 with this code, especially if it is not used by anything else (Capacity, Fair or Fifo schedulers). 
We ll be expected to maintain API and wire compatibility. We could handle API by not referring to it as Public-Stable, but we don't have a to do that with wire compat.

bq. As far as I can tell, separating this out into a branch is a net negative- there is overhead to doing so and it runs contrary to the iterative approach we're trying to take, without providing any clear benefit.
The overhead is minimal. Provides benefit. Not sure how it interferes with the iterative approach, especially if you can merge in functionality as and when it is ready (we thought enough about API and wire). If you really think branches are evil, at least we could work on trunk first? 

As a community, I think we should be able to cut a branch-2.8 today, fix remaining blockers, and create an RC. I know it is not that simple and we have to jump through a few hoops, but we shouldn't be blocked from doing a release if one person working on a feature goes on vacation. 

I would have liked us to have worked on branches for some past features, e.g. sharedcache - mostly isolated feature I was involved with, and many others. 

]