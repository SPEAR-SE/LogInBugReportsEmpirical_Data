[I propose not passing Interrupted exception to client while stop rpc server, by interrupt responder before handlers in rpc server.
{code: title=Server.java}
  public synchronized void stop() {
    LOG.info("Stopping server on " + port);
    running = false;
    if (handlers != null) {
      for (int i = 0; i < handlerCount; i++) {
        if (handlers[i] != null) {
          handlers[i].interrupt();
        }
      }
    }
    listener.interrupt();
    listener.doStop();
    responder.interrupt();
{code}, Is this issue fixed in MAPREDUCE-6439? They have same stack trace., Thanks [~zxu], they're the same issue, but patch in MAPREDUCE-6439 only fixs MR AM, and our AM is using AMRMClientAync, MR AM catches most remote exceptions and retry, I don't know if it's the proper action if using in AMRMClientAsync, as in my mind, most remote exceptions are caused by bad request, retry has no effect such as a very big resource request.]