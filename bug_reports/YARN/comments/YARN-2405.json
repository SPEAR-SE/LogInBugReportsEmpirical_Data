[The problem seems to be that the two separate lists that maintain the list of apps are not in sync. The list of apps is taken from 
{code}
Map<ApplicationId, RMApp> rmContext.getRMApps() 
{code}
and then looked up in the second list in AbstractYarnScheduler
{code}
Map<ApplicationId, SchedulerApplication> applications
{code}
via the following code:
{code}
  public FSSchedulerApp getSchedulerApp(ApplicationAttemptId appAttemptId) {
    return (FSSchedulerApp) super.getApplicationAttempt(appAttemptId);
  }

  public T getApplicationAttempt(ApplicationAttemptId applicationAttemptId) {
    SchedulerApplication<T> app =
        applications.get(applicationAttemptId.getApplicationId());
    return app == null ? null : app.getCurrentAppAttempt();
  }
{code}
which returns null if it does not find the app attempt. The FairSchedulerAppsBlock does not check for the null returned value, thus NPE.

By code inspection we found one of such cases that it could happen. Not sure if it is the same case that we had though. Anyhow, checking for null return values by getSchedulerApp seems to be a broader fix that covers that cases that we have not discovered yet by code inspection.

One scenario that could potentially result into return null value is the following: FairScheduler#addApplication
{code}
    RMApp rmApp = rmContext.getRMApps().get(applicationId);
    FSLeafQueue queue = assignToQueue(rmApp, queueName, user);
    if (queue == null) {
      return;
    }
    // Enforce ACLs
    UserGroupInformation userUgi = UserGroupInformation.createRemoteUser(user);
    if (...) {
      return;
    }
  
    SchedulerApplication application =
        new SchedulerApplication(queue, user);
    applications.put(applicationId, application);
{code}, I am thinking of a simple patch that catches the NPE at skips adding the record to appsTableData. 

Comments are highly appreciated., Hi [~maysamyabandeh], could you tell us the version you faced this problem?, [~ozawa], we got the error in a fork of 2.0.5 but further code inspection showed that the problem also exist in 2.5. , If RMApp has not been accepted by scheduler, it will only be recorded in `Map<ApplicationId, RMApp> rmContext.getRMApps()`. So I think we could first test whether it is in `Map<ApplicationId, SchedulerApplication> applications`, then we decide whether to get its fair. Is it OK?, [~maysamyabandeh], [~hex108], I got the problem. I think trunk code still has the issue. Let me tackle this., Sounds good to me. We also need to decide of how to react to nonexistent app: return fair share of 0, -1, or skip the whole record from appsTableData? If the the problematic record is going to be skipped, instead of putting checks inside fair share computation, we can alternatively catch the NPE at FairSchedulerAppsBlock., [~maysamyabandeh], It's a bit tricky to throw and catch NPE in iteration. I prefer to use negative exit code to handle it., [~ozawa], all right then. Looking forward for your patch..., +1 for not masking NPE bugs. It's a performance problem, and would catch irrelevant NPE's as well., Thanks for your comment, Gera. Yes, I'm creating patch based on exit code approach. The work is almost done. I'm writing test code to verify., Attached a first patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12664602/YARN-2405.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:red}-1 javac{color:red}.  The patch appears to cause the build to fail.

Console output: https://builds.apache.org/job/PreCommit-YARN-Build/4740//console

This message is automatically generated., It seems build process is killed. Let me try attaching a patch again., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12664612/YARN-2405.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/4741//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/4741//console

This message is automatically generated., LGTM.

A minor comment: I was thinking that we might want to catch the exception in testFairSchedulerWebAppPageInIncosistentState and show a proper message with an assert. But as I said it is minor and not very important., Thanks for your suggestion, Maysam. Updated a patch to handle exceptions in testFairSchedulerWebAppPageInIncosistentState., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12664796/YARN-2405.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/4748//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/4748//console

This message is automatically generated., [~kkambatl], could you reivew a latest patch?, YARN-2405.2.patch LGTM. We should let junit catch the original exception and it will properly fail the test., Thanks for your review, [~jira.shegalov]. I think both designs are acceptable in this case. Let's wait for Karthik's review., Patch looks mostly good. Can we add javadoc for {{FairSchedulerInfo#getAppFairShare}}? , Thanks for the review, Karthik. Updated a patch to add the javadoc about {{FairSchedulerInfo#getAppFairShare}}., bq. ... I think both designs are acceptable in this case. 

True but one has more code for no reason.
, I see. In this case, I think we can show the error message "Failed to render FairSchedulerPage: " and it can be useful when we face the other problems. I think both approaches have pros and cons., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12665181/YARN-2405.4.patch
  against trunk revision d8774cc.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/4760//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/4760//console

This message is automatically generated., +1., Thanks Maysam and Gera for reporting and reviewing, and Tsuyoshi for the patch.

Just committed this to trunk and branch-2. , Thanks Maysam, Gera, and Karthik for review!, FAILURE: Integrated in Hadoop-Yarn-trunk #663 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/663/])
YARN-2405. NPE in FairSchedulerAppsBlock. (Tsuyoshi Ozawa via kasha) (kasha: rev fa80ca49bdd741823ff012ddbd7a0f1aecf26195)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/FairSchedulerAppsBlock.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/dao/FairSchedulerInfo.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebAppFairScheduler.java
* hadoop-yarn-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1854 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1854/])
YARN-2405. NPE in FairSchedulerAppsBlock. (Tsuyoshi Ozawa via kasha) (kasha: rev fa80ca49bdd741823ff012ddbd7a0f1aecf26195)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebAppFairScheduler.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/FairSchedulerAppsBlock.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/dao/FairSchedulerInfo.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1880 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1880/])
YARN-2405. NPE in FairSchedulerAppsBlock. (Tsuyoshi Ozawa via kasha) (kasha: rev fa80ca49bdd741823ff012ddbd7a0f1aecf26195)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/dao/FairSchedulerInfo.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/FairSchedulerAppsBlock.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebAppFairScheduler.java
]