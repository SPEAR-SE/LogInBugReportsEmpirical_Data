[cc/ [~rohithsharma]/[~sjlee0]/[~varun_saxena]/[~naganarasimha_gr@apache.org]
We should skip this event publish to timeline server on recovery.
Thoughts??, Thanks [~bibinchundatt]. Makes sense in not publishing an app ACLs' updated event on each RM restart even for apps being recovered (especially finished apps). As you said, the timestamp is different which would mean multiple entries in the store.
We republish the app created event on recovery too, to handle the case where app was created and stored but the event was not sent to timeline server.
Basically, it seems as of now we send the App ACLs' updated event even before we send an app created event which is a little weird.

I was thinking why not send app created event with ACLs' in application submission context. Or if events have to be differentiated, send both the events together.
Thoughts ? , {quote}
We republish the app created event on recovery too, to handle the case where app was created and stored but the event was not sent to timeline server.
{quote}
*Solution1* Since we are sending {{appCreated}} event during recovery also we might have to send {{aclUpdate}} also. if that is the case then we should use same {{application Start time}} for sending event.So that additional event entries are not added in store.

{quote}
Or if events have to be differentiated, send both the events together.
{quote}
*Solution 2* Currently we don't have interface in {{SystemMetricsPublisher}} for the same. Should we introduce ??, I think Solution 1 i.e. using application start time for ACL updated event should be fine, Would prefer solution 1 
bq. So that additional event entries are not added in store.
but just ensure that ATS v1 & v2 backward compatability is not impacted., bq. but just ensure that ATS v1 & v2 backward compatability is not impacted.
Agree. Current deployments might be checking ACL updated event to get ACLs' so we should send these as 2 separate events, probably inside a single entity., Attaching patch based on solution 1

MInor change in comment from last time instead of startTime should be *submitTime*. Apologies incase created any confusion
{code}
      // call RMAppManager to submit application directly
      rmAppManager.submitApplication(submissionContext,
          System.currentTimeMillis(), user);
{code}

Application start {{submit Time}} and {{aclUpdate}} time are set to same.
The same appSubmit time will be used to aclUpdate also. 
In recovery flow the {{acl update time}} will also same as {{submit Time}}  and no new entries., Do we need to publish twice ?
Why not wrap both app created and acls updated events in a single timeline entity publish ?, {quote}
Why not wrap both app created and acls updated events in a single timeline entity publish ?
{quote}
We dont have an interface as of now in {{SystemMetricsPublisher}} 
{code}
  void appCreated(RMApp app, long createdTime);

  void appACLsUpdated(RMApp app, String appViewACLs, long updatedTime);
{code}

Currently the acl set is of {{ApplicationAccessType.VIEW_APP}} if we add a new implementation on {{TimelineServiceV1Publisher}} which all types we will send as part of acls in new API. Will try to keep the events as same. Only will handle acl event publish with same {{submitTime}} instead of {{System.currentTimeMIlls}} which should solve restart event issue.

Any optmization we can discuss in another jira. Thoughts??, What I meant was report both the events from appCreated implementation and remove appACLsUpdated method altogether.  We do not need to introduce another method. Required info can be found from RMApp object for both the events.
We can alternatively move the appACLsUpdated call to where appCreated method is called. That is call them one by one. However I would prefer former as we will then publish a single entity.

Reporting app ACL event before app is saved in RM (which is currently being done) may create inconsistency between RM view of app on restart and timeline view of app (if RM restarts before app is saved in NEW state)

Thoughts ?, Single entity publish we might need more clarity . 
Attaching patch after moving aclUpdate along with appCreate , IMHO, i think the first approach mentioned by [~varun_saxena] i.e. ??report both the events from appCreated implementation and remove appACLsUpdated method altogether. We do not need to introduce another method. Required info can be found from RMApp object for both the events.?? would be more suitable avoiding many events during recovery.
[~bibinchundatt], any limitation which you foresee using this approach ? May be we can dicuss and get the clarity for it here as we have already prolonged this fix since lot many jiras, hence i would prefer to get it fixed as part of this jira itself. 
If we plan to handle it as per the above approach, we need to handle the fix differently for trunk and  2.9 & 2.8, as ATSv2 is not there yet in other than trunk branches. 
, I think till we send as 2 separate events it should be fine backward compatibility wise. If you ask me, there no need for 2 separate events if backward compatibility was not to be considered. ACLs' in application submission context are not going to change through the lifetime of an application as per current implementation.
If ever application ACLs' were to change for a running application in future, we can add the required interface in SystemMetricPublisher and publish an ACL updated event.
SMP is a private interface so changing it should not be an issue.

Moreover for ATSv2 I think we need not even send an ACL updated event. We can simply fill the info in entity info instead of having a separate event and an event info. This will aid in easy filtering using info filters.  

cc [~rohithsharma], as you were doing ATSv2 integration with Tez, can you confirm if last point would be fine for Tez. IIUC, ATSv2 interaction in Tez is a newly written piece of code with no expectation of receiving same events with same info as in ATSv1. Even if it was incompatible across, we have nowhere claimed the interface and responses to be compatible anyways.]