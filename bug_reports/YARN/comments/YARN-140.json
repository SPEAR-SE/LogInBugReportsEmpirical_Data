[Here is a patch that moves the capacity-scheduler.xml in the resources to capacity-scheduler-default.xml. It also modifies the CapacitySchedulerConfiguration.java to load the capacity-scheduler-default.xml first followed by capacity-scheduler.xml (which will be normally provided by the user in the conf directory).

I have confirmed that TestCapacityScheduler runs fine and also tested the patch using a single-node cluster with and without the capacity scheduler. I have confirmed that issues like the one mentioned in the description no longer exist., Ahmed - The CS already comes with the right capacity-scheduler.xml: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/target/classes/capacity-scheduler.xml

Looks like the bug is that hadoop-common-project/hadoop-common/src/main/packages/templates/conf/capacity-scheduler.xml is completely broken - we should probably just delete it., Uh, the right path for the correct capacity-scheduler.xml is hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/resources/capacity-scheduler.xml, Thanks Arun, I have added more description in the comment above. The conf exists in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/resources/capacity-scheduler.xml. So my patch basically renames it to *-default.xml and modifies the CapacitySchedulerConfiguration.java to load both. So now the capacity-scheduler.xml resource (provide in the conf) complements the default one. What do you think Arun?, Ahmed - the notion of (*-default.xml + *-site.xml) makes sense when you want a base set of defaults configs in *-default.xml and a partial override via *-site.xml.

In the case of CapacityScheduler this notion doesn't make sense. You only want one capacity-scheduler.xml which is overriden by the admin.

Hence, having the *correct* base capacity-scheduler.xml with the one 'default' queue is sufficient. Makes sense?, Thanks Arun,

Let carify my understanding of the issue a little bit:

- We already have the capacity-scheduler.xml (which contains the default confs) packaged in the hadoop-yarn-server-resourcemanager.<VERSION>.jar, so it is available in the classpath, and when the user sets the scheduler class to CS in yarn-site.xml, everything works fine and the default configutrations in capacity-scheduler.xml are picked and used.

The *problem* happens, when the user tries to provide his own capacity-scheduler.xml and places it in the conf directory. Since it has the same name as the one in the jar, then it replaces the one in the classpath and since CapacitySchedulerConfiguration constructor loads a single resource (capacity-scheduler.xml), then the loaded configuration will be only the ones from the user's capacity-scheduler.xml, and no defaults are loaded from the file packaged in the jar.

by default confs, I mean stuff like:

{code}
  <property>
    <name>yarn.scheduler.capacity.root.capacity</name>
    <value>100</value>
  </property>
  <property>
    <name>yarn.scheduler.capacity.maximum-applications</name>
    <value>10000</value>
  </property>
  <property>
    <name>yarn.scheduler.capacity.maximum-am-resource-percent</name>
    <value>0.1</value>
  </property>
{code}

which are all lost and the user need to explicitly add them again to his xml, or otherwise face errors like the one I mentioned above in the description.

So to address this problem, my attached patch modified the CapacitySchedulerConfiguration constructor to load two resources instead of one, so the default confs can be preserved and optionally overridden by the user confs.

One other option is to provide a template conf with our distribution and populate this file with all the defaults (basically a copy of the one in the package), and then instruct users to use this file, but I think this option is less convenient as it requires manual preservation of these defaults by the user and knoweledge of what to change vs what to keep, etc., I agree with Ahmed assessment/suggestion, we should have a c-s-default.xml with all default values in the JAR and a c-s-site.xml in conf/ for the admin to setup their custom values. Else the admin will have to provide always a c-s.xml file with ALL values, tweaked or not., Again, the notion of capacity-scheduler-default.xml overridden by capacity-scheduler-site.xml _does not_ make sense for CapacityScheduler - this has been the case for a *very long* time. 

-1 for *-default.xml + *-site.xml for the CS.

A simpler 'fix' for the problem at hand is to hard-code root capacity to 100, and provide sane defaults in code for the rest., Arun, unless I'm missing something ... currently the CS scheduler code lacks of many default values (not using *conf.get(KEY,DEFAULT)* ), this means the user provided *capacity-scheduler.xml* must include ALL values meaningful to the CS because the values in the *capacity-scheduler.xml* provided in the JAR will be lost if you create the file in *conf/*. Is this correct? If so, the fact that has been like that for very long time does not make right from the usability/ease-of-use. Please explain me what am I missing here. Thx, Or, another possibility, is to ensure CS uses *conf.get(KEY,DEFAULT)* for all the read configuration, then we can remove the *capacity-scheduler.xml* from the JAR and make it available in the *conf/* dir., Here is a new version of the patch that does the following:

- Addresses the getCapacity for the root queue, and modifies the test to verify it (the patch from YARN-143).

- Move capacity-scheduler.xml to hadoop-yarn-project/hadoop-yarn/conf/., so it will now be available in the conf directory in our distribution (etc/hadoop).

- Removes the incorrectly placed capacity-scheduler.xml from hadoop-common-project.

I have verified that TestCapacityScheduler runs successfully after these changes., Ahmed, looks good, the only NIT is that we should remove the ...root.capacity entry from the c-s.xml as this is always 100; having it there would give the impression to users that they can globally reduce the capacity to a percentage of the total one, which is not true., Thanks Tucu, Here is the updated patch incorporating your comment., Submitting the patch so it can go through jenkins., +1 pending jenkins, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12547845/YARN-140_rev3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.TestClientRMService
                  org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.TestQueueParsing
                  org.apache.hadoop.yarn.server.resourcemanager.TestResourceManager
                  org.apache.hadoop.yarn.server.resourcemanager.TestApplicationCleanup
                  org.apache.hadoop.yarn.server.resourcemanager.TestApplicationACLs
                  org.apache.hadoop.yarn.server.resourcemanager.TestResourceTrackerService
                  org.apache.hadoop.yarn.server.resourcemanager.applicationsmanager.TestAMRMRPCNodeUpdates
                  org.apache.hadoop.yarn.server.resourcemanager.webapp.TestRMWebServicesNodes
                  org.apache.hadoop.yarn.server.resourcemanager.TestApplicationMasterLauncher
                  org.apache.hadoop.yarn.server.resourcemanager.TestRM
                  org.apache.hadoop.yarn.server.resourcemanager.security.TestApplicationTokens
                  org.apache.hadoop.yarn.server.resourcemanager.applicationsmanager.TestAMRMRPCResponseId
                  org.apache.hadoop.yarn.server.resourcemanager.TestAMAuthorization
                  org.apache.hadoop.yarn.server.resourcemanager.tools.TestGetGroups

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/70//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/70//console

This message is automatically generated., The cause of these failures seems to be a couple of missing default configurations that were previously loaded from capacity-scheduler.xml. I have added such defaults to CapacitySchedulerConfiguration.java. I have ran all these failing tests locally, and all of them succeed except two  (TestApplicationCleanup & TestGetGroups) which fail with and without the patch, so they seem to be unrelated to this patch.

The two additional defaults that I needed to add to fix these tests are:

1- To return the queue "root.default" as a child for root if no children are defined for root.
2- To return a capacity of 100.0f for the queue "root.default" if it exists but no capacity is specified for it. (I was unsure about this default considering the case when root has other children specified, but I think it should be fine since both undefined capacity (i.e., -1) or maximum capacity (i.e., 100) will represent an invalid configuration.

I am attaching the updated patch., Ahmed, thanks, this is close - some feedback:

bq. To return the queue "root.default" as a child for root if no children are defined for root.

I wouldn't do this. If someone has not defined root.child.queues it is a serious mis-configuration - let's error out (as it happens today) and not try to 'guess'.

bq. To return a capacity of 100.0f for the queue "root.default" if it exists but no capacity is specified for it. 

Again, for same reason as above, this represents a serious mis-configuration and I wouldn't try to 'guess' capacities - error out is the right answer.

One more nit: Rather than delete/add capacity-scheduler.xml let's just do an 'svn mv' to preserve history. 

Furthermore, please add a test-case to TestCapacitySchedulerConf to test for defaults.

----

It seems to me that the additional defaults are necessary only for unit tests - in which case the correct fix is to make a copy of capacity-scheduler.xml into a test/resources folder and get it on the classpath for our tests.

, Thanks Arun!

bq. It seems to me that the additional defaults are necessary only for unit tests - in which case the correct fix is to make a copy of capacity-scheduler.xml into a test/resources folder and get it on the classpath for our tests.

Yes, those additional ones are only for tests. I'll move the xml to a test/resources and have it in the classpath for tests per you recommendation.

bq. Furthermore, please add a test-case to TestCapacitySchedulerConf to test for defaults.

The only remaining newly added default is the 100% capacity for root queue. I already modified the TestCapapcityScheduler to verify that, and I'll check if any other tests are needed.

I'll upload an updated version of the patch., Thanks, Here is the updated patch incorporating the needed changes. I have split the patch into an 'svn mv' script and the rest of the patch. Thanks Tucu for helping me offline to troubleshoot the pom issues to get c-s.xml on the classpath of tests., Here is a combined version of the previous two files only to kick it through jenkins test-patch., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12548080/YARN-140_rev5_onlyForJenkins.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/72//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/72//console

This message is automatically generated., Ahmed, overall looks good, there is one last change I'd do, where you add the check *if (capacity == UNDEFINED && queue.equals("root"))* it should be *if (capacity == UNDEFINED || queue.equals("root"))*, as for ROOT it should always be 100.
, Thanks Tucu,

Yes Tucu, I already had it like that in rev4 of the patch, but after a second thought I changed it in the latest patch. It is true that the capacity of root should be always 100, or otherwise an exception will be thrown, see ParentQueue.java:116:

{code}
    if (rootQueue &&
        (rawCapacity != CapacitySchedulerConfiguration.MAXIMUM_CAPACITY_VALUE)) {
      throw new IllegalArgumentException("Illegal " +
          "capacity of " + rawCapacity + " for queue " + queueName +
          ". Must be " + CapacitySchedulerConfiguration.MAXIMUM_CAPACITY_VALUE);
    }
{code}

However, I think we shouldn't overwrite a configuration given by the user, we can just provide the correct default if it is missing. 

Overwriting a configuration can have a negative consequence of having a configuration file contents which contradicts what is really used by the scheduler, which is problematic.

Using the latest patch, if the user sets the root capacity to a wrong value, then the system will throw an Exception, and the user will know it is wrong and correct it. But if the user misses it, the default will be picked. This is why I changed to {{&&}}. What do you think?, the thing is ... root.capacity is not a config property, that is why we removed it from the c-s.xml. it should ALWAYS be 100, I'd use an OR and I'd invert the order to check first for queue=='root', I have updated the patch to return 100 for root.capacity regardless of its specification in the configuration file., Here is the combined patch to get it through jenkins test-patch., The patch changes look good. But it isn't applying for me on trunk. hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml doesn't exist, the corresponding changes are stale?, Comment race. So YARN-140_rev6_onlyForJenkins.patch is the correct patch? YARN-140_rev6.patch doesn't apply on trunk for me., Yes :) Thanks Vinod! YARN-140_rev6.patch requires the mv script to run before it.  YARN-140_rev6_onlyForJenkins.patch is the combined patch including the mv then the patch changes., +1 pending jenkins, Alright, lgtm. +1. Kicking Jenkins., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12549555/YARN-140_rev6_onlyForJenkins.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.TestQueueParsing

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/97//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/97//console

This message is automatically generated., I am looking into this test failure., Ahmed, can you fix the test-case issue? There are lots of more occurrences of "setCapacity(CapacitySchedulerConfiguration.ROOT", we should remove all of them.

Also, I think you should modify setCapacity() to check for ROOT queue and throw IllegalArgumentException. We can leave testRootQueueParing() the way it is now to validate such behaviour., I checked this failure. testRootQueueParsing() in TestQueueParsing was checking that setting the root capacity to a non-100 value will throw an IllegalArgumentException, but this no longer happens  (i.e., 100 will override) per my discussion with tucu above. So I'm deleting this check and uploading the new patch., Comment Race again. Thanks Vinod! I'll check that. Please ignore my latest patch then., Here is the new patch. I have removed the instances where  {{setCapacity(CapacitySchedulerConfiguration.ROOT}} is used. I left the one in testRootQueueParing() per vinod suggestion, and modified setCapacity() to throw IllegalArgumentException for {{root}}. I checked that all these tests runs fine. Let's kick it through jenkins and see., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12549765/YARN-140_rev8_onlyForJenkins.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 7 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/99//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/99//console

This message is automatically generated., +1. Ahmed, would you please upload a script+patch based on the lastest patch? , Thanks! Here they are., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12550024/YARN-140_rev9.patch
  against trunk revision .

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-YARN-Build/103//console

This message is automatically generated., Thanks Ahmed. Committed to trunk and branch-2. (the last failure was cause test-patch tried to run the commit patch which requires the MV script)., Integrated in Hadoop-trunk-Commit #2901 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/2901/])
    YARN-140. Add capacity-scheduler-default.xml to provide a default set of configurations for the capacity scheduler. (ahmed via tucu) (Revision 1400335)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1400335
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/resources/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestApplicationLimits.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestCapacityScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestLeafQueue.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestParentQueue.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestQueueParsing.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesCapacitySched.java
, Integrated in Hadoop-Yarn-trunk #9 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/9/])
    YARN-140. Add capacity-scheduler-default.xml to provide a default set of configurations for the capacity scheduler. (ahmed via tucu) (Revision 1400335)

     Result = FAILURE
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1400335
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/resources/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestApplicationLimits.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestCapacityScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestLeafQueue.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestParentQueue.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestQueueParsing.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesCapacitySched.java
, Integrated in Hadoop-Hdfs-trunk #1201 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1201/])
    YARN-140. Add capacity-scheduler-default.xml to provide a default set of configurations for the capacity scheduler. (ahmed via tucu) (Revision 1400335)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1400335
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/resources/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestApplicationLimits.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestCapacityScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestLeafQueue.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestParentQueue.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestQueueParsing.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesCapacitySched.java
, Integrated in Hadoop-Mapreduce-trunk #1231 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1231/])
    YARN-140. Add capacity-scheduler-default.xml to provide a default set of configurations for the capacity scheduler. (ahmed via tucu) (Revision 1400335)

     Result = SUCCESS
tucu : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1400335
Files : 
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/pom.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerConfiguration.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/resources/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestApplicationLimits.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestCapacityScheduler.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestLeafQueue.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestParentQueue.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestQueueParsing.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebApp.java
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesCapacitySched.java
, Integrated in Hadoop-trunk-Commit #2919 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/2919/])
    YARN-181. Fixed eclipse settings broken by capacity-scheduler.xml move via YARN-140. Contributed by Siddharth Seth. (Revision 1401504)

     Result = SUCCESS
vinodkv : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1401504
Files : 
* /hadoop/common/trunk/hadoop-assemblies/src/main/resources/assemblies/hadoop-yarn-dist.xml
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/conf
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/pom.xml
, Integrated in Hadoop-Yarn-trunk #13 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/13/])
    YARN-181. Fixed eclipse settings broken by capacity-scheduler.xml move via YARN-140. Contributed by Siddharth Seth. (Revision 1401504)

     Result = FAILURE
vinodkv : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1401504
Files : 
* /hadoop/common/trunk/hadoop-assemblies/src/main/resources/assemblies/hadoop-yarn-dist.xml
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/conf
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/pom.xml
, Integrated in Hadoop-Hdfs-trunk #1205 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1205/])
    YARN-181. Fixed eclipse settings broken by capacity-scheduler.xml move via YARN-140. Contributed by Siddharth Seth. (Revision 1401504)

     Result = FAILURE
vinodkv : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1401504
Files : 
* /hadoop/common/trunk/hadoop-assemblies/src/main/resources/assemblies/hadoop-yarn-dist.xml
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/conf
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/pom.xml
, Integrated in Hadoop-Mapreduce-trunk #1235 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1235/])
    YARN-181. Fixed eclipse settings broken by capacity-scheduler.xml move via YARN-140. Contributed by Siddharth Seth. (Revision 1401504)

     Result = SUCCESS
vinodkv : http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1401504
Files : 
* /hadoop/common/trunk/hadoop-assemblies/src/main/resources/assemblies/hadoop-yarn-dist.xml
* /hadoop/common/trunk/hadoop-yarn-project/CHANGES.txt
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/conf
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/conf/capacity-scheduler.xml
* /hadoop/common/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/pom.xml
]