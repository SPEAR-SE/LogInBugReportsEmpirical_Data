[I'm not familiar with {{ssid}} on FreeBSD.  Does it have the same usage as Linux {{setsid}}?  If so, then perhaps an appropriate workaround is to copy that binary to {{setsid}} and make sure it's available on the {{PATH}}.  This might not require any YARN code changes.

bq. I propose to make Shell.isSetsidAvailable test more strict and fail to start if it is not found.

This would likely have to be considered backwards-incompatible, because applications would fail to start on existing systems that don't have {{setsid}}.  I suppose the new behavior could be hidden behind an opt-in configuration property.  Also, we need to keep in mind that {{Shell.isSetsidAvailable}} is always {{false}} on Windows.  (On Windows, we handle the issue of orphaned processes by using Windows API job objects instead of {{setsid}}.), Windows case is tested separately, see private static boolean isSetsidSupported() in
hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/Shel
l.java

for instance:

if (Shell.WINDOWS) {
      return false;
}

In any UNIX-like case I suppose it will leave orphaned processes, because if isSetsidSupported()==false it uses kill(pid) to kill task instead of kill(pgid) to kill the whole process group.

ssid(1) in FreeBSD  is the analog setsid(1) in Linux: userland wrapper for setsid() system call.

Renaming does not sound as sane idea, because it is hard to convince all people to do rename of installed binaries by hand.

I propose to treat it like system-dependent option and act accordingly.

(I suppose other OS's like Solaris also lack setsid(1) utility so they could also benefit).

For ssid source see http://tools.suckless.org/ssid/

As for backwards compatibility we can change that in 3.0, it is not fatal, failure to start without setsid will just remind users to install setsid() or ssid() and proceed futher, and be sure that there will be no side effects like orphaned tasks eating CPU., As Linux, OSX, Solaris and BSD all support the setsid(2) syscall and it's part of POSIX (http://pubs.opengroup.org/onlinepubs/9699919799/toc.htm), isn't a better solution just to wrap setsid() + exec() in a little bit of JNI? That would avoid the need to install external executables., bq. As Linux, OSX, Solaris and BSD all support the setsid(2) syscall and it's part of POSIX (http://pubs.opengroup.org/onlinepubs/9699919799/toc.htm), isn't a better solution just to wrap setsid() + exec() in a little bit of JNI? That would avoid the need to install external executables.

That would break platforms that don't have a working libhadoop (which are plentiful).

However, there could be a test here that says if libhadoop is available, use it., Yes, that's a good point about not every platform having libhadoop. Solaris for example has the syscall but not the executable, so in that case it's a better solution to use the syscall but that's not always going to be the case., Solaris can use the same ssid program (it is just a simple wrapper for setsid() syscall).
I just proposed a simplest fix for that problem.
JNI wrapper sounds like better approach.

What I want to see in any case is the loud error message in case setsid binary (or setsid() syscall if we go JNI way) is unavailable.  Right now it pretends to work and I spent some time digging out whats going wrong and why I see a lot of orphans., 21156330 is the Solaris bug which covers adding a setsid command-line utility to Solaris, Is Bugtraq+ (if that is what it is still called... haven't been a Sun employee for a while...)  still sealed off?, Bugtraq is long gone, everything is now in the bug database accessibly via My Oracle Support (https://support.oracle.com), So yes, it's still sealed off without a contract. Meh., This problem persists on Mac OS El Capitan. However, a workaround exists in the form of this simple Git project: https://github.com/jerrykuch/ersatz-setsid.

* Install the Apple XCode command line tools.
* Clone the project.
* Build the project using make.
cd ersatz-setsid
make
* Copy the resulting setsid program to /usr/bin:
sudo cp setsid /usr/bin
* Restart YARN.

Now, your process will shut down correctly.

YARN already has included C code. YARN could save us all a ton of grief (took me a day to track down this issue to find this bug) by including it's own version of setsid.]