[We have 2 options here.
Either send a more descriptive message and related exception back to the client. Considering this is unlikely to happen unless we are doing mass movement of apps on a busy cluster, this may be fine.
Or, wait for a while to let the attempt be added to be added to scheduler and then throw an exception.
, bq. Considering this is unlikely to happen unless we are doing mass movement of apps on a busy cluster, this may be fine.
Need not be, suppose during RM transition "Move app" is done then user might not be aware that RM transition was happening in the backend. Other approach what me and [~bibinchundatt] were thinking of was to send SchedulerEvent for handling this move, so that it gets queued up in the SchedulerEventDispatcher and not get immediately invoked. We will further check the pro's and cons of the same !, I feel you can check RMAppAttempImpl state. If state is SUBMITTED or NEW, its assured that scheduler is not having any information about the app.
Similar checks for app attempt states are done in ApplicationMasterService also. This can avoid such a bomb to occur within scheduler and we can avoid it., [~sunilg],
IIRC the RMAppAttempImpl was already in SUBMITTED state just that the recovery events were queued up in the SchedulerEventDispatcher, hence we were able to see the exception., I think this is because event was sitting in scheduler queue., RMAppAttempImpl  will be moved to RMAppAttemptState.SCHEDULED once  RMAppAttemptEventType.ATTEMPT_ADDED fired from scheduler. So from ClientRMService, move app can block any operation if the currentAppAttempt's state is not yet reached RMAppAttemptState.SCHEDULED. (ie; in effect NOT of SUBMITTED or NEW).
, bq. Other approach what me and Bibin A Chundatt were thinking of was to send SchedulerEvent for handling this move
If we do that, how are we going to indicate to Client that move was unsuccessful?, {code}
    if (!ACTIVE_APP_STATES.contains(application.getState())) {
      String msg = "App in " + application.getState() +
          " state cannot be moved.";
      RMAuditLogger.logFailure(callerUGI.getShortUserName(),
          AuditConstants.MOVE_APP_REQUEST, "UNKNOWN", "ClientRMService", msg);
      throw new YarnException(msg);
    }
{code}

In {{ClientRMService.moveApplicationAcrossQueues}}, we already have this check. So if we could check active attempt's state here, we could avoid this scenario rt?, bq. RMAppAttempImpl will be moved to RMAppAttemptState.SCHEDULED once RMAppAttemptEventType.ATTEMPT_ADDED
Yeah we can do that. But we still need to decide if we wait or just fail the move.
In my opinion, exception should be fine as I said in my first comment, {quote}
 we could check active attempt's state here, we could avoid this scenario rt?
{quote}
+1, bq. In ClientRMService.moveApplicationAcrossQueues, we already have this check. So if we could check active attempt's state here, we could avoid this scenario rt?
Agree., bq. So if we could check active attempt's state here, we could avoid this scenario rt?
Agree ..., Attaching patch for the same, Thanks for the patch [~bibinchundatt],
At broader aspect, on second thoughts, is it correct not to allow if the attempt state is not active ? consider the case where 1st attempt has failed and its about to launch second attempt, is it not valid to move it another queue in this scenario ?

few comments on the patch
# {{RMAppAttemptState.NEW, RMAppAttemptState.SUBMITTED}} is actually not {{ACTIVE_ATTEMPT_STATES}} and seems quite the opposite .
# Suppose if the first attempt is failed and second attempt is not yet launched then there can be a race where in 2nd attempt can be in NEW/ SUBMITTED and similar issue can still happen.


, {quote}
 is it correct not to allow if the attempt state is not active 
{quote}
Currently for move . Application state are checked in the same way. Since the move operation is not a frequent operation i think its fine to handle this way.
Will handle the first comment.Second could you explain more. i think npe will not be possible.
Another option is we can think of rejecting from scheduler side., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 29s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 15m 39s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 45s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 31s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 47s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 18s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 29s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 43s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 43s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 43s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 42m 18s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 20s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 68m 52s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.yarn.server.resourcemanager.TestClientRMService |
|   | hadoop.yarn.server.resourcemanager.TestRMRestart |
|   | hadoop.yarn.server.resourcemanager.scheduler.fair.TestFairSchedulerPreemption |
|   | hadoop.yarn.server.resourcemanager.scheduler.fair.TestFSAppStarvation |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12853477/YARN-6207.001.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux da079091ee81 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 172b23a |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15009/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15009/testReport/ |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15009/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 18s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m  7s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 38s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 26s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 40s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 16s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 12s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 24s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 24s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 23s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 40m 46s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 16s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 63m 37s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.fair.TestFSAppStarvation |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12853479/YARN-6207.002.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 474d8a83a4a3 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 172b23a |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15010/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15010/testReport/ |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15010/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, *move-app-to-queue* is majorly a scheduler operation. It  mandatory that we have app (fica/fs app) in a queue within scheduler. When an RMAttempt is failed, it ll be removed from scheduler (APP_ATTEMPT_REMOVED), and new attempt has to be added back to scheduler. In this mean time, there will not be any meaning for move_app operation. This new check added by the patch will now help in handling the same as we are checking state from current running app attempt., [~sunilg]/[~naganarasimha_gr@apache.org]
Hope the second approach done is fine. Fair already handles this case of attempt can be null in scheduler side.
Any scenario which causes attempt to be null will get handled with approach 2, bq. Any scenario which causes attempt to be null will get handled with approach 2
Agree, this should be good enough. And also further checked the scenario which i mentioned, failed first attempt is not actually removed from SchedulerApplication but anyway this check will further ensure that there are no other cases where it can fail.
+1 for the latest patch, if no other concerns will commit it., app null check may not fix the race condition correctly. It can still cause corner case. I would like to continue discussion on attempt states as well.
Lets take [~bibinchundatt] scenario itself where App Attempt events are in Async Dispatcher itself (delayed). The same scenario will happen after first attempt failure as well (2nd attempt is delayed). 

+What will happen in scheduler:+
In any case, we assume that {{SchedulerApplication}} is created inside scheduler (this is happening because we check app state in CientRMService as ACCEPTED/RUNNING). CS and FS’s *moveApplication* is invoking {{getApplicationAttempt}} to get app attempt object. {{AbsScheduler#getApplicationAttempt}} could return null is 2 cases. a) when application itself is not there. b) when curr attempt is null. As mentioned earlier in first line, app could not be null. Still attempt may be null. In case of first attempt failure, {{SchedulerApplication.getCurrentAppAttempt}} could return old object till 2nd attempt is set via {{APP_ATTEMPT_ADDED}}.
Hence the app null check will not help in both scheduler (FS has only a null check for app, not for attempt). Even attempt null check also won’t help in case of first AM failure as scheduler does have old stale object in stopped form. 

Also there could be another corner case. Assume move app has called when 1st attempt was failed and 2nd attempt was in init states. It could potentially push 2 attempts to target queue. Ideally if we fix in ClientRMServer, we need not have to worry changes across scheduler. If attempt state is ACCEPTED to RUNNING, we are sure that new attempt is added to scheduler.
Discussed offline with [~rohithsharma] as well.

, Thanks [~sunilg] for summarizing the discussion.
Adding more points what we discussed offline, we found many more corner cases that can create an issue in move application. It time to handle all those corner scenarios. And also we discussed that move application should *never-fail* if application attempt is not added yet. So, fix can be made from scheduler so that application can be moved even if attempt is NOT-added OR called done application attempt during attempt removal. 
May be new flag is required to identify in SchedulerApplicationAttempt that done-app-attempt is called-off or not. This will ensure move application need not fail if application is already in accepted state. , Thanks [~rohithsharma] & [~sunilg]
bq. And also we discussed that move application should never-fail if application attempt is not added yet. 
Yes. This is what i was trying to signify by saying once the app is accepted by the scheduler then there should not be any reason to reject the move application. And roughly Me and [~bibinchundatt] were discussing the same as it was easily acheiveable by updating {{SchedulerApplication.setQueue}} at the same we need to ensure that the parent queue stats are updated accordingly. When AppAttempt gets added anyway its taking the queue information from {{SchedulerApplication}} so though attempt is not there when attempt gets added it works properly.

bq. May be new flag is required to identify in SchedulerApplicationAttempt that done-app-attempt is called-off or not.
Agree that there is a corner race case where in 2 Attempts can be added to the target queue when the events which are triggered are {{doneApplicationAttempt->moveApplication-> addApplicationAttempt (new attempt)}}. And for this we can have a flag in SchedulerApplication present in CS. 

Hope with above modifications all concerns will be solved, Thoughts?
, Thanks [~naganarasimha_gr@apache.org] for summarizing what we have discussed. Hope [~bibinchundatt] can take over from here. , Thank you [~sunilg]/[~rohithsharma] finding already existing corner case and  [~Naganarasimha]  for summarizing.
Will handle those scenarios also as part of this jira.
In addition to above application update also seems to have issue.Submit is on dest queue and finish is done on parent.
{code}
source.getParent().finishApplication(appId, app.getUser());
{code}, bq. Submit is on dest queue and finish is done on parent.
Right. Actually this was fine pre YARN-5756. Because LeafQueue#finishApplication was just informing the users manager about deactivating the application and then calling ParentQueue#finishApplication. As we were merely moving app across queues, informing users manager for app deactivation was not required.
But now, we are maintaining queue state as well which will have to be updated for source queue (if queue is DRAINING) on move and hence needs to be handled by calling LeafQueue#appFinished., Attaching patch for handle the following case.
# Move to be successfull even when attempt is not created
# For corner case of attempt add-> attempt remove -> move -> attempt add
# update finish application to source queue, Few comments:

1. {{app.move(dest);}} is invoked event when app is STOPPED. Internally it updates queue metrics in source queue and also in appScheduling info (which also is stopped). I think if app is stopped, we can assume that all internal metrics of the app is released from source queue. Hence we may not need to do the same again in *move*. please check once .
2. {{abstractUsersManager.deactivateApplication(user, applicationId);}} this is invoked from *app.move()*. So do we need to call *LQ.finishApplication()* except the fact that queue may have to be moved to STOPPED if it was draining.
3. FS also need a null check for attempt, correct?, Few more comments
# I think  !app.isStopped() can be done at upper level along with null check. {{if (null != app || !app.isStopped() )}}
nit : change null check with java code style i.e app!=null., | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 18s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 14m  8s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 26s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 16s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  3s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 22s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 25s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 41m 32s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 18s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 64m 45s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.yarn.server.resourcemanager.TestRMRestart |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12853661/YARN-6207.003.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 2bd822c68f97 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 8035749 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15018/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15018/testReport/ |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15018/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~bibinchundatt]
Overall approach seems to be fine, few nits
# one corner case when ClientRMService validates app state is still running but when it reaches scheduler application might have got completed hence to be safe just we can check whether scheduler application is not null for appId.
# Can we think of moving {{dest.submitApplication(appId, user, destQueueName);}} below {{if (null != app)}} block so that its better we finish handling all attempt related stuff and then updated the application related modifcations ?
# ln 2058, i think we can directly get {{application.getCurrentAppAttempt}}
# ln 2103, Was wondering the queue partition information needs to be checked even if the attempt doesn't exist, thoughts?
# comment at ln 2067 can be moved to just before {{source.finishApplicationAttempt}, Thank you [~naganarasimha_gr@apache.org]/[~sunilg]/[~rohithsharma] for comments

{quote}
I think !app.isStopped() can be done at upper level along with null check. if (null != app || !app.isStopped() )
nit : change null check with java code style i.e app!=null.
{quote}	
Incase of application submitted with transferFromPreviousAttempt in app context. Live containers  metrics needs to be updated in queues
{quote}
1. app.move(dest); is invoked event when app is STOPPED. Internally it updates queue metrics in source queue and also in appScheduling info (which also is stopped). I think if app is stopped, we can assume that all internal metrics of the app is released from source queue. Hence we may not need to do the same again in move. please check once .
{quote}
Since live container metrics need to be updated {{app.move}} we can skip only the appSchedulingInfo update when stopped.
{quote}
2. abstractUsersManager.deactivateApplication(user, applicationId); this is invoked from app.move(). So do we need to call LQ.finishApplication() except the fact that queue may have to be moved to STOPPED if it was draining.
{quote}
As mentioned appSchedulingInfo update we can skip incase of stopped attempts.
{quote}
3. FS also need a null check for attempt, correct?
{quote}
SchedulerApplication null check i have handled in latest patch. Incase if the comment is regarding Fair Scheduler currently we will handle only Capacity scheduler cases in this jira
{quote}
1.one corner case when ClientRMService validates app state is still running but when it reaches scheduler application might have got completed hence to be safe just we can check whether scheduler application is not null for appId.
{quote}
Done
{quote} 
Can we think of moving dest.submitApplication(appId, user, destQueueName); below if (null != app) block so that its better we finish handling all attempt related stuff and then updated the application related modifcations ?
{quote}
As discussed offline validation for application submit to queue is done in  queue.submitApplication. Only when limits are reached we should update attempt level metrics.This is part of existing flow so no need to change.
{quote}
ln 2058, i think we can directly get application.getCurrentAppAttempt
{quote}
Done
{quote}
ln 2103, Was wondering the queue partition information needs to be checked even if the attempt doesn't exist, thoughts?
{quote}
When Fica app is null means the schedulingInfo based partition we will not be able get as per current  implementation .This we can skip probably another jira we can file for the same.
{quote}
comment at ln 2067 can be moved to just before {{source.finishApplicationAttempt}
{quote}
Done, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 24s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 59s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 37s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 38s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 15s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  3s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 25s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 23s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 10s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 19s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 42m 21s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 20s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 65m 42s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.fair.TestFairSchedulerPreemption |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12854003/YARN-6207.004.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux af756436b909 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 4f4250f |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15042/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15042/testReport/ |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15042/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, [~bibinchundatt], thanks for the patch. Had an offline discussion with [~rohithsharma], we were expecting something like below.

{code}
 FiCaSchedulerApp app = application.getCurrentAppAttempt();
 if (app != null) {
   // Move all live containers even when stopped.
   // For transferStateFromPreviousAttempt required
   for (RMContainer rmContainer : app.getLiveContainers()) {
     source.detachContainer(getClusterResource(), app, rmContainer);
     // attach the Container to another queue
     dest.attachContainer(getClusterResource(), app, rmContainer);
   }
   if (!app.isStopped()) {
     source.finishApplicationAttempt(app, sourceQueueName);
     // Submit to a new queue
     dest.submitApplicationAttempt(app, user);
     // Finish app & update metrics
     app.move(dest);
   }
   source.appFinished();
   source.getParent().finishApplication(appId, user);
 }	
 
 application.setQueue(dest);
 LOG.info("App: " + appId + " successfully moved from " + sourceQueueName
     + " to: " + destQueueName);
 return targetQueueName;
{code}

Reasons behind this proposal.
# {{source.finishApplication(appId, user);}} is not needed as {{AppSchedulingInfo.move}} is updating {{abstractUsersManager.deactivateApplication(user, applicationId);}}. So we jus need to invoke appFinished and inform parent. Hence those two lines are added.
# {{app.move}} need to be inside {{!app.isStopped()}} check. Because if app is stopped, we ensure that all running and reserved containers are invoked with completedContainer call.

Apart from this, {{app != null}} check need not have to throw exception. Any way app is done, so do we need to bomb to client?, [~sunilg]

{quote}
app.move need to be inside !app.isStopped() check. Because if app is stopped, we ensure that all running and reserved containers are invoked with completedContainer call.
{quote}

This could cause for  {{liveContainers}} queue  metrics not to be released and added to new.

{code}
    allocatedContainers.decr(containers);
    aggregateContainersReleased.incr(containers);
    allocatedMB.decr(res.getMemorySize() * containers);
    allocatedVCores.decr(res.getVirtualCores() * containers);
{code}

Metrics could go wrong for the following scenarios.
Appadded --> attempt added -> 2 * live containers.  -> attempt remove with transfer -> move application. -> add attempt, bq.Appadded --> attempt added -> 2 * live containers. -> attempt remove with transfer -> move application. -> add attempt

There are 2 scenarios rt
# AppAdded -> AttemptAdded -> Some Live Containers -> Attempt fail -> doneApplicationAttempt -> Attempt Stopped -> move application. -> add attempt
# AppAdded -> AttemptAdded -> Some Live Containers -> move application. -> add attempt

App will be STOPPED in case of 1) and App will be running in case of 2). I was mentioning case when app was STOPPED which is scenario 1. In that case, we have called *doneApplicationAttempt*.
{code}
      // Release all reserved containers
      for (RMContainer rmContainer : attempt.getLiveContainers()) {
        super.completedContainer(rmContainer, SchedulerUtils
            .createAbnormalContainerStatus(rmContainer.getContainerId(),
                "Application Complete"), RMContainerEventType.KILL);
      }
...
      // Release all reserved containers
      for (RMContainer rmContainer : attempt.getReservedContainers()) {
        super.completedContainer(rmContainer, SchedulerUtils
            .createAbnormalContainerStatus(rmContainer.getContainerId(),
                "Application Complete"), RMContainerEventType.KILL);
      }
{code}

So all containers are completed here. Since this is a part of completing an attempt, we must remove all metrics here rt. I am doubting its a different issue altogether or not., Thanks [~bibinchundatt] for pointing out {{keepContainers}} option. As in earlier patch, then u can keep out {{app.move}} from {{app.isStopped}} check provided {{appSchedulingInfo.move}} is protected.

Seems fine for me for this point., [~sunilg]
Thank you for confirming the same..
{code}
 source.getParent().finishApplication(appId, user);
{code}
Should be outside {{app != null}} loop.. Consider scenarios of
{{Application submit -> Attempt not added ->  Move -> attempt added.}} Application count in parent queue will be wrong .  Explaining in detail.

# Submit application to leaf . Parent queue ++numApplications will increase by 1 . 
# Move to queue 1              . Parent queue ++numApplications will increase by 1 .
# Application completed.  Number of application in parent will be still 1.

, Thanks [~bibinchundatt] for the clarification. I suppose you were mentioning something like below. Seems fine for me.

{code}
   if (!app.isStopped()) {
     source.finishApplicationAttempt(app, sourceQueueName);
     // Submit to a new queue
     dest.submitApplicationAttempt(app, user);
   }
   // Finish app & update metrics
   app.move(dest);
 }	
 source.appFinished();
 source.getParent().finishApplication(appId, user);
 application.setQueue(dest);
{code}, Yes [~sunilg] i meant the same .Will upload the patch with more testcase to cover all these scenarios too., Yes.. There were many corner cases we have discussed in this Jira. I feel we should have more test cases here to ensure all cases are handled well. Thanks for considering same., On an other note, many of these cases are also applicable for FairScheduler too. Is it planned in same jira or a new one?, {quote}
Incase if the comment is regarding Fair Scheduler currently we will handle only Capacity scheduler cases in this jira
{quote}
I had already mentioned will handle only CS .We have marked component also as Capacity scheduler.
Fair Scheduler probably we  handle in another jira, Attaching patch after handling comments and adding test cases, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 15s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 55s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 31s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 25s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 15s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  0s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 11s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  2s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 17s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 39m 26s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 19s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 60m 39s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.fair.TestFairScheduler |
|   | hadoop.yarn.server.resourcemanager.TestRMRestart |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12854409/YARN-6207.005.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 671f58b5720d 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 132f758 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15076/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15076/testReport/ |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15076/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks Bibin for the patch, overall patch looks good to me. Few comments on test
# Can you move these test cases to TestCapacityScheduler? Here, you can mock RMApp and directly trigger scheduler event. You can also control order of events like AppAdded->moveApplication->AppAttemptAdded and AppAdded->AppAttemptAdded->AppAttemptRemoved->moveApplication->AppAttemptAdded. Refer {{TestCapacityScheduler}}. Scheduler module remain same and can be test which ever the event order to be tested.
# I personally feel NOT to use countdown latch to verify event order. The test code is bit confusing also since latch is created multiple times and using old references for countDown in some cases. Latch initialization is done at setup with 0 and using different references for countdown in test code.
# Below test code hangs randomly. Countdown latch should be created before triggering attempt removal event. The test code hang because if event app-attempt-added is triggered before latch creating, then *eventAdd.await();* will never set to 0 which hangs forever. 
{code}
// remove attempt
    app1Attempt.handle(new RMAppAttemptEvent(app1Attempt.getAppAttemptId(),
        RMAppAttemptEventType.FAIL, "Launch Fail"));
    eventAdd = new CountDownLatch(1);
    eventDone = new CountDownLatch(1);
    eventAdd.await();
{code}
# Add a test timeout. 
, [~rohithsharma]
Thank you for review comment .. uploading patch after handling comments, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  0s{color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} docker {color} | {color:red}  8m 49s{color} | {color:red} Docker failed to build yetus/hadoop:a9ad5d6. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12855432/YARN-6207.007.patch |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15123/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  1m 11s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 20m 34s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 58s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 43s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 58s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 54s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 45s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 45s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 40s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 15 new + 313 unchanged - 0 fixed = 328 total (was 313) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 54s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 35s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 60m 22s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 51s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 96m 11s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.yarn.server.resourcemanager.scheduler.capacity.TestCapacityScheduler |
|   | hadoop.yarn.server.resourcemanager.TestRMRestart |
|   | hadoop.yarn.server.resourcemanager.security.TestDelegationTokenRenewer |
|   | hadoop.yarn.server.resourcemanager.TestRMEmbeddedElector |
| Timed out junit tests | org.apache.hadoop.yarn.server.resourcemanager.recovery.TestZKRMStateStorePerf |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12855422/YARN-6207.006.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux bb3ba1939ecc 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 82ef9ac |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/15122/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15122/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15122/testReport/ |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15122/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 19s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 13m 12s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 15s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  0s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 26s{color} | {color:orange} hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager: The patch generated 10 new + 313 unchanged - 0 fixed = 323 total (was 313) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  9s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 39m 33s{color} | {color:green} hadoop-yarn-server-resourcemanager in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 17s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 61m 36s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12855432/YARN-6207.007.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 789ce9691fa7 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 6f6dfe0 |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| checkstyle | https://builds.apache.org/job/PreCommit-YARN-Build/15131/artifact/patchprocess/diff-checkstyle-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15131/testReport/ |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15131/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, +1 LGTM.. [~bibinchundatt] would you mind checking checkstyle errors? , I kicked jenkins once again to see test cases since I saw a random local failure., Thank you [~rohithsharma] for review.
Attaching new patch after handling checkstyle, | (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 21s{color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 12m 54s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 39s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 16s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  4s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 27s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  5s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 39m 51s{color} | {color:red} hadoop-yarn-server-resourcemanager in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 16s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 61m 46s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.yarn.server.resourcemanager.TestRMRestart |
\\
\\
|| Subsystem || Report/Notes ||
| Docker |  Image:yetus/hadoop:a9ad5d6 |
| JIRA Issue | YARN-6207 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12856036/YARN-6207.008.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  findbugs  checkstyle  |
| uname | Linux 453514891c44 3.13.0-106-generic #153-Ubuntu SMP Tue Dec 6 15:44:32 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/hadoop/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 0f336ba |
| Default Java | 1.8.0_121 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-YARN-Build/15172/artifact/patchprocess/patch-unit-hadoop-yarn-project_hadoop-yarn_hadoop-yarn-server_hadoop-yarn-server-resourcemanager.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/15172/testReport/ |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/15172/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Test failure is not related to patch attached ., +1 committing shortly., Committed to trunk/branch-2.
Thanks [~bibinchundatt]. Thanks [~rohithsharma] [~naganarasimha_gr@apache.org] [~varun_saxena] for additional review., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #11369 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/11369/])
YARN-6207. Move application across queues should handle delayed event (sunilg: rev 1eb81867032b016a59662043cbae50daa52dafa9)
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestCapacityScheduler.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java
, SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14057 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14057/])
YARN-6207. Move application across queues should handle delayed event (aengineer: rev 7e68257ffafc86d7f6926603ea6d3deda66914d4)
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestCapacityScheduler.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java
]