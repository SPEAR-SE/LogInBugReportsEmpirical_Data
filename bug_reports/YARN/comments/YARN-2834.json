[The reason RM fails with NPE is that now if app fails to renew the token, it'll move to FAILED state and save the app final state. But we didn't fail the RMAppAttempt and save the attempt final state. So, on recovery, app won't be added to scheduler because app is already in final state, but it'll still try to add the attempt to scheduler which causes the NPE., Talked with Zhijie, it should be fine to just ignore the token-renew exception on recovery and let app continue. App itself could decide whether it choose to fail or not when the token eventually expires.  Even in the regular case, RM doesn't fail the app if token renew fails, why do we need to fail the app if token-renew fails on recovery. , bq. The reason RM fails with NPE is that now if app fails to renew the token, it'll move to FAILED state and save the app final state. But we didn't fail the RMAppAttempt and save the attempt final state.
Shouldn't we move app-attempts to FAILED state whose parent app itself has failed? That is consistent with what happens in the regular control path.

bq. Even in the regular case, RM doesn't fail the app if token renew fails, why do we need to fail the app if token-renew fails on recovery. 
Agreed this is an existing problem, but we should fix that too separately. YARN-342 is related., bq. Even in the regular case, RM doesn't fail the app if token renew fails, why do we need to fail the app if token-renew fails on recovery. 
After more discussions with [~jianhe] offline, for things like Timeline tokens which are automatically obtained whether the app needs it or not (we should fix this to be user driven), we can ignore failures. But for HDFS Tokens etc, ignoring failures is bad because it (1) wastes resources as AMs will continue and eventually fail (2) app doesn't know what happened it fails eventually.

Anyways, treating renewal failures is broken today. I am okay ignoring renewal failures during recovery in this ticket. But let's file a blocker for handling them correctly in 2.7., bq. Anyways, treating renewal failures is broken today. I am okay ignoring renewal failures during recovery in this ticket. But let's file a blocker for handling them correctly in 2.7.

Thanks for your comments. +1 for this proposal., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12680505/YARN-2834.1.patch
  against trunk revision 9ba8d8c.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5807//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5807//console

This message is automatically generated., This looks good, +1. Checking this in., FAILURE: Integrated in Hadoop-trunk-Commit #6501 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6501/])
YARN-2834. Fixed ResourceManager to ignore token-renewal failures on recovery consistent with the (somewhat incorrect) behaviour in the non-recovery case. Contributed by Jian He. (vinodkv: rev e76faebc9589654e83c8244ef9aff88391e56b80)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestWorkPreservingRMRestart.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
, Committed this to trunk, branch-2 and branch-2.6. Thanks Jian!, Filed YARN-2836 as a 2.7 blocker., SUCCESS: Integrated in Hadoop-Yarn-trunk #739 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/739/])
YARN-2834. Fixed ResourceManager to ignore token-renewal failures on recovery consistent with the (somewhat incorrect) behaviour in the non-recovery case. Contributed by Jian He. (vinodkv: rev e76faebc9589654e83c8244ef9aff88391e56b80)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestWorkPreservingRMRestart.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1929 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1929/])
YARN-2834. Fixed ResourceManager to ignore token-renewal failures on recovery consistent with the (somewhat incorrect) behaviour in the non-recovery case. Contributed by Jian He. (vinodkv: rev e76faebc9589654e83c8244ef9aff88391e56b80)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestWorkPreservingRMRestart.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1953 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1953/])
YARN-2834. Fixed ResourceManager to ignore token-renewal failures on recovery consistent with the (somewhat incorrect) behaviour in the non-recovery case. Contributed by Jian He. (vinodkv: rev e76faebc9589654e83c8244ef9aff88391e56b80)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestWorkPreservingRMRestart.java
, Sorry for missing this earlier, doesn't this undo YARN-2010?  If I am not mistaken, the RM will crash if it fails to recover apps now. [~jianhe] - thoughts? , bq.  If I am not mistaken, the RM will crash if it fails to recover apps now.
No, the patch won't cause RM to crash.   why ?]