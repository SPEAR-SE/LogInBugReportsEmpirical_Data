[Posted yarn-2990-test.patch that exposes this issue. The test fails in its current form, but the test passes when delay scheduling is disabled by setting the node/rack locality delays to -1., AM containers don't care about locality, so fixing this would improve the app launch time. , Looked more closely, unfortunately this appears to be by design. Each application has an "allowed locality level" - initially node-local, and transitions to rack-local and off-switch after the corresponding delays. Instead, it might be better to track this allowed locality level per {{ResourceRequest}}. I propose:
# In the short-term, to address the case where the AM has to go through the node-local and rack-local delays, we could start with the default locality level of off-switch and reset it node-local after the AM is allocated. 
# In the long-term, let us augment ResourceRequest to include allowed locality level. 

Thoughts? , Discussed this with Sandy offline. We agreed on the following approach when assigning work from an app to a node:
# Consider the app's node-local requests for that node.
# If there are no node-local requests for the app (for any node in the cluster), or if the allowed locality level is rack-local or off-switch, consider the app's rack-local requests for that rack.
# If there are no node-local or rack-local requests (for any node or rack), or if the allowed locality level is off-switch, consider the app's off-switch requests. 

Attached is a patch (v0) that works for off-switch requests. I tested the patch both using the unit test and on a cluster, and there is no longer a delay to launch the AM container. 

To handle the rack-local requests, we should be able to differentiate between node and rack names in the data-structure that holds all the ResourceRequests. Or, we could keep counters when adding RRs and assigning containers. , Triggering Jenkins to see if it finds any issue with the provided patch. The patch is not yet ready for review. , Handling rack-local requests the same way could be much more involved than handling off-switch requests. ResourceRequest has hostName, the RM/scheduler has mapping of NodeId -> SchedulerNode. Checking whether the hostName corresponds to a node or rack can't be achieved through a simple map.containsKey() and requires iterating through all racks/nodes which can be quite expensive.

How about we handle off-switch requests here and work on the rack-local requests in a follow-up JIRA? This lets us take care of the AM container which is very common. 
, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12692749/yarn-2990-0.patch
  against trunk revision 000ca83.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.TestFairScheduler

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6350//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6350//console

This message is automatically generated., Can anyNodeLocalRequests work by simply checking getResourceRequests at a priority? would that not include rack local requests as well? , anyNodeLocalRequests in the latest patch is incomplete. I propose we address only off-switch requests here, let me go ahead and remove the rack-local parts in the patch., Updated patch (v1)  handles only off-switch requests. , {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12693202/yarn-2990-1.patch
  against trunk revision 5a6c084.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6364//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6364//console

This message is automatically generated., Other than the addition of the anyLocalRequests check core here:
{code}
+          if (offSwitchRequest.getNumContainers() > 0 &&
+          (!anyLocalRequests(priority)
+              || allowedLocality.equals(NodeType.OFF_SWITCH))) {
{code}
are the other changes core to the fix?  If not, given that this is touchy code, can we leave things the way they are or make the changes in a separate cleanup JIRA?

Also, a couple nits:
* Need some extra indentation in the snippet above
* "anyLocalRequests" is kind of a confusing name for that method, because "any" often means "off-switch" when thinking about locality.  Maybe "hasNodeOrRackRequests"., Thanks Sandy. Agree with your comments. Here is a patch that addresses them. , {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696309/yarn-2990-2.patch
  against trunk revision bd69fb2.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.TestRMRestart

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/6500//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/6500//console

This message is automatically generated., TestRMRestart failures looks unrelated. , +1.  Sorry for the delay in getting to this., Thanks for the review, Sandy. Just committed to trunk and branch-2. , FAILURE: Integrated in Hadoop-trunk-Commit #7052 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/7052/])
YARN-2990. FairScheduler's delay-scheduling always waits for node-local and rack-local delays, even for off-rack-only requests. (kasha) (kasha: rev 7e42088abf230dce9c63497d0937fee4f9a1e4a5)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestContinuousScheduling.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
, FAILURE: Integrated in Hadoop-Yarn-trunk #833 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/833/])
YARN-2990. FairScheduler's delay-scheduling always waits for node-local and rack-local delays, even for off-rack-only requests. (kasha) (kasha: rev 7e42088abf230dce9c63497d0937fee4f9a1e4a5)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestContinuousScheduling.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk-Java8 #99 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/99/])
YARN-2990. FairScheduler's delay-scheduling always waits for node-local and rack-local delays, even for off-rack-only requests. (kasha) (kasha: rev 7e42088abf230dce9c63497d0937fee4f9a1e4a5)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestContinuousScheduling.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #100 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/100/])
YARN-2990. FairScheduler's delay-scheduling always waits for node-local and rack-local delays, even for off-rack-only requests. (kasha) (kasha: rev 7e42088abf230dce9c63497d0937fee4f9a1e4a5)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestContinuousScheduling.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #2031 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/2031/])
YARN-2990. FairScheduler's delay-scheduling always waits for node-local and rack-local delays, even for off-rack-only requests. (kasha) (kasha: rev 7e42088abf230dce9c63497d0937fee4f9a1e4a5)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestContinuousScheduling.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #2050 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/2050/])
YARN-2990. FairScheduler's delay-scheduling always waits for node-local and rack-local delays, even for off-rack-only requests. (kasha) (kasha: rev 7e42088abf230dce9c63497d0937fee4f9a1e4a5)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestContinuousScheduling.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
, SUCCESS: Integrated in Hadoop-Hdfs-trunk-Java8 #97 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/97/])
YARN-2990. FairScheduler's delay-scheduling always waits for node-local and rack-local delays, even for off-rack-only requests. (kasha) (kasha: rev 7e42088abf230dce9c63497d0937fee4f9a1e4a5)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/TestContinuousScheduling.java
]