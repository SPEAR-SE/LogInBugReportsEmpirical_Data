[Given that RMStateStore now is augmented with state machine, we may add a new FENCED state to handle such events., Adding a FENCED state makes sense to me. Once a state-store is fenced, we shouldn't allow any operations on it., Hi [~jianhe], can I work on this ? , sure, I've assigned this to you. thx, Thanks [~jianhe]. I will work on it. 
What I will do is as under :
1. Add a FENCED state in state machine.
2. When fencing happens, switch state to FENCED. RM will switch to standby as before.
3. Do nothing for Store and Update events if we are in FENCED state.
4. Reset state to DEFAULT when this RM switches back to Active., On a second check, state-store is actually already stopped/closed when RM gets fenced, which means no more store operation can be performed once RM gets fenced. [~kkambatl], is this the case?, Yes, no more store operations can be performed once RM switches to standby. But there might be some threads processing store/update once that is going on. I thought JIRA was to handle that case., While closing RMStateStore, we will first drain the event queue in the dispatcher. So, there may be some store/update events sitting in the queue, which will be completed first., bq. On a second check, state-store is actually already stopped/closed when RM gets fenced, which means no more store operation can be performed once RM gets fenced. Karthik Kambatla, is this the case?
Yes. That is correct. 

I was open to adding the FENCED state to future-proof against us not stopping the store when RM transitions to Standby, but I agree we could probably look into this when we get there. , [~jianhe], what I was talking about, was the fact that certain events may be queued up in dispatcher event queue while this RM is in Master. But when we close the State Store while switching to standby(on fencing), we will wait till all these events have been processed (queue is drained). Marking the state store as FENCED may avoid these events being processed. 

That is, let us say I have 5 events in the queue and 3rd event leads to Fencing. Then, the last 2 events will also be processed before switch to standby completes.

Your views on need for handling of this case ? , bq.we will wait till all these events have been processed

Will it be little long to wait at this stage to become standby?, [~sunilg], on closer look at the code, when we close the RMStateStore, we close the ZKClients as well. Hence dispatcher queue draining shouldn't matter as ZKClient is already closed. 
Ofcourse as more than one thread is involved, AsyncDispatcher's event handling thread may pick up an event and process it(store/update operation) before RM can close RMStateStore(while switching to standby). 

But in my view, this shouldn't be too big an impact I think to warrant adding a FENCED state.
, bq. Hence dispatcher queue draining shouldn't matter as ZKClient is already closed.
After checking the code, I think we should flip the order "closeInternal()" and "dispatcher.stop();"  right?
{code}
  protected void serviceStop() throws Exception {
    closeInternal();
    dispatcher.stop();
  }
{code}, Yes. I also feel we need to flip the order for dispatcher.stop.



, Yes, completely agree with you [~jianhe]. dispatcher.stop() will cause events in dispatcher queue(if any) to be processed first. These events would be lost if we call closeInternal() before dispatcher.stop(), However, if we do flip the order of these statements, I think we can then have a FENCED state because when we stop the dispatcher queue, it will be drained first and hence the pending events will be processed first. In this case, store/update will be sent to ZK.  What's your opinion, [~jianhe] and [~sunilg] ?, bq. it will be drained first and hence the pending events will be processed first.
we are supposed to handle these pending events.  right?, Ideally these events should be processed. But if Store is already fenced, I guess NoAuthException will again be reported by ZK, so processing this event wont lead to any useful operation., Hi [~jianhe], for flipping over these statements, I will raise a separate JIRA, If there are pending events in Dispatcher queue when the State store becomes fenced, there is no point in processing these events when RM switches to standby. A fenced state will avoid that., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12683240/YARN-2136.patch
  against trunk revision a4df9ee.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5911//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-YARN-Build/5911//artifact/patchprocess/patchReleaseAuditProblems.txt
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5911//console

This message is automatically generated., Added a new patch to fix release audit warnings, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12683246/YARN-2136.002.patch
  against trunk revision a4df9ee.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5913//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5913//console

This message is automatically generated., [~varun_saxena], thanks for your wok ! some comments:
- In the catch block of each transition(e.g.StoreAppTransition), we can return FENCED state directly.
{code}
      } catch (Exception e) {
        LOG.error("Error storing app: " + appId, e);
        store.notifyStoreOperationFailed(e);
      }
{code}
- naming suggestion: RMStateStoreEventType.FENCE_STATESTORE -> RMStateStoreEventType.FENCED
- rename RMStateStoreState#DEFAULT to ACTIVE.
- Fix the indentation format to conform with the rest transitionsâ€™ format
{code}
      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.DEFAULT,
          RMStateStoreEventType.UPDATE_APP_ATTEMPT, new UpdateAppAttemptTransition())
      .addTransition(RMStateStoreState.DEFAULT, RMStateStoreState.FENCED,
                     RMStateStoreEventType.FENCE_STATESTORE)
      .addTransition(RMStateStoreState.FENCED, RMStateStoreState.FENCED,
                     EnumSet.of(RMStateStoreEventType.STORE_APP,
                                RMStateStoreEventType.UPDATE_APP,
                                RMStateStoreEventType.REMOVE_APP,
                                RMStateStoreEventType.STORE_APP_ATTEMPT,
                                RMStateStoreEventType.UPDATE_APP_ATTEMPT,
                                RMStateStoreEventType.FENCE_STATESTORE));
{code}
- some store operations are invoked outside the transition scope, for example: removeRMDelegationToken, storeRMDelegationTokenAndSequenceNumberState. We need to check the FENCED state in those places too before allowing following operations.
- Newly added RMStateStoreFencedEvent, it should be fine to reuse the RMStateStoreEvent and pass the event type ?, Thanks [~jianhe] for reviewing and sharing your valuable comments.
Will address these suggestions/issues in a new patch., [~jianhe], kindly review the latest patch., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12683843/YARN-2136.003.patch
  against trunk revision aa7dac3.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.TestRM
                  org.apache.hadoop.yarn.server.resourcemanager.TestWorkPreservingRMRestart

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5943//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5943//console

This message is automatically generated., Test case failure is unrelated to code changed., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12684278/YARN-2136.004.patch
  against trunk revision 1556f86.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager:

                  org.apache.hadoop.yarn.server.resourcemanager.metrics.TestSystemMetricsPublisher

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5952//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5952//console

This message is automatically generated., Failure seems unrelated to code., [~varun_saxena], thanks for updating!  looks good overall,
one minor comment: we may break out of the while loop if it's at FENCED state.
{code}
          if(!isFencedState()) { 
            doMultiWithRetries(emptyOpList);
          }
{code}, Yes [~jianhe], we can break out of the loop.
Have uploaded a new patch with this change. Kindly review., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12684656/YARN-2136.005.patch
  against trunk revision b36f292.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5975//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5975//console

This message is automatically generated., Committed to trunk and branch-2, thanks [~varun_saxena] !, FAILURE: Integrated in Hadoop-trunk-Commit #6632 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6632/])
YARN-2136. Changed RMStateStore to ignore store opearations when fenced. Contributed by Varun Saxena (jianhe: rev 52bcefca8bb13d3757009f1f08203e7dca3b1e16)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
, ABORTED: Integrated in Hadoop-Mapreduce-trunk #1976 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1976/])
YARN-2136. Changed RMStateStore to ignore store opearations when fenced. Contributed by Varun Saxena (jianhe: rev 52bcefca8bb13d3757009f1f08203e7dca3b1e16)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
* hadoop-yarn-project/CHANGES.txt
, FAILURE: Integrated in Hadoop-Yarn-trunk #762 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/762/])
YARN-2136. Changed RMStateStore to ignore store opearations when fenced. Contributed by Varun Saxena (jianhe: rev 52bcefca8bb13d3757009f1f08203e7dca3b1e16)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
, SUCCESS: Integrated in Hadoop-Yarn-trunk-Java8 #24 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk-Java8/24/])
YARN-2136. Changed RMStateStore to ignore store opearations when fenced. Contributed by Varun Saxena (jianhe: rev 52bcefca8bb13d3757009f1f08203e7dca3b1e16)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk #1955 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1955/])
YARN-2136. Changed RMStateStore to ignore store opearations when fenced. Contributed by Varun Saxena (jianhe: rev 52bcefca8bb13d3757009f1f08203e7dca3b1e16)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
, FAILURE: Integrated in Hadoop-Hdfs-trunk-Java8 #24 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk-Java8/24/])
YARN-2136. Changed RMStateStore to ignore store opearations when fenced. Contributed by Varun Saxena (jianhe: rev 52bcefca8bb13d3757009f1f08203e7dca3b1e16)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk-Java8 #24 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk-Java8/24/])
YARN-2136. Changed RMStateStore to ignore store opearations when fenced. Contributed by Varun Saxena (jianhe: rev 52bcefca8bb13d3757009f1f08203e7dca3b1e16)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/TestZKRMStateStore.java
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStoreEventType.java
, Thanks [~jianhe] for reviewing and committing this.]