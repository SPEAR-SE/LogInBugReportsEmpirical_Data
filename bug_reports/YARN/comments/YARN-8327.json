[Before the patch:

!TestAggregatedLogFormat.png!

After the patch:

!image-2018-05-18-16-52-08-250.png!

I validated in Linux as well.

The length of System.lineSeparator() in Windows is equal to 2 while in Linux is 1.
 In the logline, there are 2 consecutive line separators that in Windows are converted to \r\n\n. Due to this, I changed every *\n* but one., Thanks [~giovanni.fumarola] for providing [^YARN-8327.v1.patch]. I think the picture you showed for "Before the patch" is not the correct one.

I see the following when I debug the test, last few characters in {{s}} is

{color:#d04437}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\nEnd of LogType:stdout\r\n\r\n{color}

Although it's just counting characters, it would still make more sense to have {{System.lineSeparator()}} twice in the end. Can you confirm line separator appears twice on Linux as well? By the way, do we know why it is {{\n}} before "{{End of Log}}"?, Thanks [~huanbang1993] for the feedback. I copied the wrong picture.

!image-2018-05-21-09-05-49-550.png!

In Linux I can see:
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx*\n*End of LogType:stdout*\n\n*

My initial statemant about \r\n\n was incorrect. The problem is about the \n before the "End of LogType". 

 , Thanks [~giovanni.fumarola] for providing more information. Would you consider changing
{code:java}
+        + numChars + ("\n").length() + (System.lineSeparator()
+            + "End of LogType:stdout" + System.lineSeparator()).length();
{code}
to
{code:java}
+        + numChars + ("\n").length() + ("End of LogType:stdout"
+            + System.lineSeparator() + System.lineSeparator()).length();
{code}
This seems more aligned with the output message., [~huanbang1993] thanks for the review. Attached v2., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 28s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  1s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 24m 41s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 23s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m 49s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 44s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 23s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green}  9m 41s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  3m 13s{color} | {color:green} hadoop-yarn-common in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 22s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 57m  2s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:abb62dd |
| JIRA Issue | YARN-8327 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12924426/YARN-8327.v2.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux 380119518e8b 4.4.0-64-generic #85-Ubuntu SMP Mon Feb 20 11:50:30 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 0b4c44b |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_162 |
| findbugs | v3.1.0-RC1 |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/20813/testReport/ |
| Max. process+thread count | 407 (vs. ulimit of 10000) |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/20813/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, +1 on [^YARN-8327.v2.patch]., +1 on  [^YARN-8327.v2.patch].
Committing., Thanks [~giovanni.fumarola] for the patch and [~huanbang1993] for the review.
Committed to trunk, branch-3.1, branch-3.0, branch-2, and branch-2.9., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14276 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14276/])
YARN-8327. Fix TestAggregatedLogFormat#testReadAcontainerLogs1 on (inigoiri: rev f09dc73001fd5f3319765fa997f4b0ca9e8f2aff)
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/logaggregation/TestAggregatedLogFormat.java
]