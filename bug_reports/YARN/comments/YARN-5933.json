[isnt this issue of ATS 1.5 ?, Yes. Removed the Components tag with v2., Hi [~sunilg] [~gtCarrera9], Below are some of the ways to fix this issue assuming an application which is not found in RM at first getApplicationReport call will never be one of APP_FINAL_STATES at subsequent getApplicationReport call.

1. Once the AppState is Unknown, the appDir can be removed from ActivePath immediately. Not sure why there is a wait of unknownActiveMillis and then app marked as completed. If we choose removal of appDir immediately, then there won't be any need for unknownActiveMillis handling code.
2. If there is a need to move unknown state app also to done directory, then the appDir can be moved immediately before waiting for unknownActiveMillis 

Please share your comments., bq. ATS will keep on requesting and which floods RM.

[~Prabhu Joseph] by saying "flood" do you mean the ATS launched requests to RM in a frequency higher than expected? , After putting some thoughts on this issue I have some hesitation to directly remove the active directory when we see an unknown application exception. The RM does not recognize the application ID does not mean the application is not running. It certainly does not mean there is no concurrent writer to this active directory, although in this reported case this is true. Therefore, simply removing the active directory may not work for the cases where some "hidden" applications are actually writing the directory although the RM does not recognize this app. , Thanks [~gtCarrera9], looks not a simple one to directly remove unknown appDir. Assume there are 10 tez jobs failed when ATS is down, then there will be 10 * unknownActiveSecs / scanIntervalSecs = 14400 ApplicationNotFoundException stacktrace will be in RM throughout that entire day logs. If there is no impact other than flooding of RM logs, is it better to change the ApplicationNotFoundException stacktrace into a single WARN message., Thanks [~Prabhu Joseph] for the clarification. Now I got the point for the flooded exceptions. Checking through the code it seems like in ApplicationClientProtocolPBServiceImpl we're converting the app not found exception into a service exception. We can ignore app not found exception here, but this feels risky as well. There seems to be no real quick solution to this issue, but one mitigation is to reduce unknownActiveSecs set by yarn.timeline-service.entity-group-fs-store.unknown-active-seconds. This decides the "wait time" of timeline server before it declares a lost app to be done. The default value is one full day but for some use cases this can be reduced to hours. 

For long term maybe we need another interval to check applications in unknown states? , Hi [~gtCarrera9] Okay, I think AppLogs#parseSummaryLogs() can skip subsequent getAppState for Unknown apps and move them to complete after unknownActiveSecs., bq. AppLogs#parseSummaryLogs() can skip subsequent getAppState for Unknown apps and move them to complete after unknownActiveSecs
This will abandon the ability for the ATS to quickly "recover" an application's state from unknown to known? Once an application's status becomes unknown, the timeline server will no longer check the application's status. Therefore, it is not possible to change the app's status back to known. For example, if the ATS server got isolated from the rest of the cluster temporarily, it will stop checking any app's status even though the isolation is only a short while. To solve this we need to have a separate scanning thread for "lost" applications, scanning at a different pace. ]