[Currently from YARN App states, we can come to know whether app is stopped by checking states as FAILED/FINISHED/KILLED.

If an app is any of this, we can show "Delete Service" again. But once we delete a service, yarn does nt give that info, hence Delete button ll be still there. [~yeshavora], do you think this behavior is fine for now?

Updated a patch for ref. cc [~gsaha] [~leftnoteasy], [~sunilg] in addition to checking states FAILED/FINISHED/KILLED can we also hit the YARN SERVICE REST API (running on RM host/port). If the app is deleted, then the REST API will return 404. If the app is stopped (not running) but not deleted it will return a 200 with a JSON which has "state":"STOPPED" in the body as well. In fact, we don't need to check YARN App states at all and just rely on the REST API response., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 24s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 15m 15s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 25m 40s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m 25s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 17s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 37m  9s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:5b98639 |
| JIRA Issue | YARN-7957 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12911580/YARN-7957.01.patch |
| Optional Tests |  asflicense  shadedclient  |
| uname | Linux d2b86b2181f7 4.4.0-64-generic #85-Ubuntu SMP Mon Feb 20 11:50:30 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 3132709 |
| maven | version: Apache Maven 3.3.9 |
| Max. process+thread count | 410 (vs. ulimit of 5500) |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/19783/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~gsaha].

I ll check this api and see how we can integrate., It seems GET api to check service status was never used in UI.

UI was always depending on ATS to get teh status.

[~gsaha] are we publishing this details (state as STOPPED or DELETED) to ATS so that UI can read from there.?, [~sunilg], I see. Now, YarnApplicationState does not have a state which represents DELETED or DESTROYED. So, when a service is destroyed, if YARN Service writes to ATS  a string which does not have any enum reference, is that acceptable? Or do we have to introduce this state in some enum? , I think if we have service state which is similar to YarnApplicationState, it will be better. Because app states are different to a service, and hence such an enum will help us for metrics etc as well other than UI, [~sunilg] , YARN Service already has a ServiceState enum. Although not exactly same as YarnApplicationState, it does have some mapping between the YarnApplicationState states. We can introduce a DELETED state in ServiceState, and use it, but then looks like ATSv2 is using YarnApplicationState. So, is a mix of 2 enums ok for ATSv2? If not, what are the options?, We need to have a new field for this and use ServiceState enum. And UI can refer to this. As its a new data, we need ATS change as well here. Looping [~rohithsharma] also.

This is the cleanest way of doing it as service state will be available from SERVICE_ATTEMPT?all rest endpoint., {{ServiceTimelinePublisher#serviceAttemptUnregistered}} publishes state. This code can be modified to publish service state rather than yarn application state. But at this point of time, service should have already updated the right state otherwise old state will be published. 
{code}
diff --git a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java
index 949ce19c8dc..4e2b03959ee 100644
--- a/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java
+++ b/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/timelineservice/ServiceTimelinePublisher.java
@@ -135,7 +135,7 @@ public void serviceAttemptUnregistered(ServiceContext context,
         context.attemptId.getApplicationId().toString());
     Map<String, Object> entityInfos = new HashMap<String, Object>();
     entityInfos.put(ServiceTimelineMetricsConstants.STATE,
-        FinalApplicationStatus.ENDED);
+        context.service.getState());
     entityInfos.put(DIAGNOSTICS_INFO, diagnostics);
     entity.addInfo(entityInfos);
{code}, yes. service should be at correct state like RUNNING (when service is running), or STOPPED (when service is stopped from cli or rest), or DELETED (when service is now deleted after stopping or from running).

But as [~rohithsharma] mentioned, if service state is not updated correctly, ATS may send us stale data. And DELETED state is not there in ServiceState also. [~gsaha] could u pls help to confirm this?, I clearly see that we need to add the state DELETED to ServiceState. We should also switch to publishing ServiceState instead of FinalApplicationStatus (as [~rohithsharma]  mentioned) and make sure that the DELETED state is published to ATS on the destroy event.

Note, the DELETED state will not be used to respond to cli or REST API GET calls on a previously-existing-but-deleted service. It will stick to the current behavior of responding with a 404 with no payload (or at least this Jira will not address this).

The DELETED state (along with the other already existing ones in ServiceState) can be used to cover all the logic in the UI as to when to show the Stop/Delete and even a Start option in the Settings drop-down.

I will file a sub-task for the Service side of changes. [~sunilg] , you can file sub-task(s) to address the UI changes required after the service change is available., Thanks [~gsaha] This makes sense. Filed a Jira under this for UI changes., [~sunilg] Please review the patch., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 25s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 30m 18s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 41m 31s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 12m 29s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 28s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 55m 23s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:ba1ab08 |
| JIRA Issue | YARN-7957 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12934429/YARN-7957.001.patch |
| Optional Tests |  asflicense  shadedclient  |
| uname | Linux 112369425ba8 3.13.0-153-generic #203-Ubuntu SMP Thu Jun 14 08:52:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / bcfc985 |
| maven | version: Apache Maven 3.3.9 |
| Max. process+thread count | 336 (vs. ulimit of 10000) |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-ui |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/21513/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~akhilpb]. Patch almost looks good.

Pls check any more states to be added to {{const serviceStates = ['ACCEPTED', 'STARTED', 'STABLE', 'RUNNING'];}}, Below are the service states enums defined.  
{code:java}
public enum ServiceState {
  ACCEPTED, STARTED, STABLE, STOPPED, FAILED, FLEX, UPGRADING,
  UPGRADING_AUTO_FINALIZE;
}
{code}
So for a deployed service,
1. Show both Stop and Delete button when states are
{code:java}
ACCEPTED, STARTED, STABLE, FLEX, UPGRADING, UPGRADING_AUTO_FINALIZE
{code}
2. Show Delete button only when state is
{code:java}
STOPPED
{code}
3. Do not show any buttons when state is 
{code:java}
FAILED
{code}
OR if response code is 404 error.

 

cc [~sunilg] [~gsaha] please share your thoughts., Thanks [~akhilpb] Makes sense to me. Pls help to implement same.]