[Hi [~zjshen], could you help me verify if this is a right bug to fix? I have found a way to show those related entities with primary filter by adding the keys of related entities into indexed entity section., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12708207/YARN-3422.1.patch
  against trunk revision 82fa3ad.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice:

                  org.apache.hadoop.yarn.server.timeline.TestLeveldbTimelineStore

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/7151//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/7151//console

This message is automatically generated., I think it a valid bug. I took a look at the patch, and it seems that you need to care care of relatedEntitiesWithoutStartTimes too. In addition, would you please add the test case to cover this?

/cc [~billie.rinaldi@gmail.com], Letâ€™s say we post entity A with related entity B and primary filter C.  This implies a directional relationship B -> A.  The entries stored include the following:
{noformat}
entity entry: A (with hidden B)
related entity entry: B A
primary filter entry: C A (no B)
{noformat}
The patch submitted adds primary filter entry C B A, which is not correct for the existing design because C was posted as a primary filter for A, not for B.  What we might want (that the store does not currently do) is for A to be added under primary filter entries for B (i.e. D B A, where D is a primary filter for B).  One problem with doing this is that we do not know the primary filters for B when we are posting entity A, and a further problem is that the primary filters for B could change over time and have to be kept up to date., In retrospect, the directional nature of the related entity relationship seems to make things more confusing.  Perhaps it would be better if relatedness were bidirectional., [~billie.rinaldi@gmail.com], thanks for explaining the rationale. Hence the attache patch should not be the right fix.

bq. In retrospect, the directional nature of the related entity relationship seems to make things more confusing. Perhaps it would be better if relatedness were bidirectional.

I think directional may be okay, but the confusing part is that we're storing A <- B, but we query B -> A, while we always say related entities. In fact, we need to differentiate both. When storing A, B resides in A entity as isRelatedTo entity, and when querying B, A is shown as the relatesTo entity. Of cause, we can querying A, and B should be shown as the isRelatedTo entity, which is not supported here. This problem will be resolved in ATS v2.

Moreover, it's also the limitation about the way we store the primary filter. The index table is a copy of the whole entity (only the information comes with the current put) and attach the primary filter as the prefix of the key. It makes it expensive to define one primary key for an entity, and probably results in different snapshot of the entity with different primary keys. In this example, B doesn't have primary filter C, but even later we add C for B, we will still be not able to get related entity A when querying B via primary filter C. That's one reason why I suggest using reverse index in YARN-3448.

However, for current LeveldbTimelineStore, I'm not sure if we have a quick way to resolve the problem. Thoughts?, That's true, changing the name to indicate direction would also be helpful.  I think that fixing this limitation would complicate the write path significantly and is probably not worthwhile in ATS v1.  If someone were to implement it, we would need to take before and after performance measurements and possibly make the new feature optional., Moving out all non-critical / non-blocker issues that didn't make it out of 2.7.1 into 2.7.2.]