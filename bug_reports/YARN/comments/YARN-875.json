[For the callback, we can catch Throwable, and call handler.onError(Exception). This will tell ApplicationMaster to jump out of loop, and go into finish function. And eventually, AMRMClientAsync will call unregisterApplicationMaster and set keepRunning flag to false which will stop the heartBeat thread.

But we can let HeartBeat thread stop a little bit earlier.
Option one : inside the catch block, we can call heartBeatThread.interrupt() and set keepRunning = false
Option two : we define a volatile Exception savedCallBackException, inside the catch block, we can set savedCallBackException, and inside heartBeatThread.run(), before we do the allocate(), we alway check whether savedCallBackException is null.

[~bikassaha] anu other suggestions ?, Its fine to catch the Throwable and report an error to the app and exit the callback thread. Looks like if we simply assign the exception to the existing savedException everything will work as expected. We should probably not stop the heartbeat thread since then the RM will start AM exit timer. Its reasonable to expect the app to call stop when AMRMClient sends it an onError() like you suggest above. We should add this instruction to the javadoc of onError() suggesting calling stop() as the recommended action., We should also augment the javadoc onError() to say that error comes from RM communications as well as from errors in the callback itself from the app., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592456/YARN-875.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 1 warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client:

                  org.apache.hadoop.yarn.applications.distributedshell.TestDistributedShell
                  org.apache.hadoop.yarn.client.api.impl.TestAMRMClientContainerRequest
                  org.apache.hadoop.yarn.client.api.impl.TestAMRMClient
                  org.apache.hadoop.yarn.client.api.impl.TestNMClient

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1489//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1489//console

This message is automatically generated., Kicking test again., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592471/YARN-875.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 1 warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1491//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1491//console

This message is automatically generated., fix -1 on javadoc, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12592488/YARN-875.2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1495//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1495//console

This message is automatically generated., We should probably change onError(Exception) to onError(Throwable)?, +1 onError(Throwable). However, does it belong to the incompatible API changes?

Should we catch Throwable t? For example, RuntimeException can also break the callback thread. 
{code}
+        } catch (Exception ex) {
{code}
 
Another question is how AMRMClientAsync wants to handle RuntimeException from CallbackHandler APIs, though they're not supposed to throw Exception. What NMClientAsync does is to wrap try-catch for each calling of CallbackHanlder APIs, catching Throwable, logging and then ignoring it., We should not ignore any exceptions unless there is a good reason to do so. It leads unpredictable behavior on the application., IMHO, users know best about the implementations of CallbackHandler APIs. They're supposed to handle all the possible exceptions with the scope of the callback methods. In contrast, AMRMClientAsync cannot judge how severe the runtime exception is. I'm afraid stopping the callback thread is too harsh given a minor or fixable exception. In addition, for example, if onError() throws a RuntimeException for some reason and the exception is not ignored, onError() will keep handle and throw a new one circularly.

Another consideration is that CallbackHandlers of AMRMClientAsync and NMClientAsync are good to have consistent behavior., If users have done their homework then the libraries catch stmt will not be executed and we are fine. If users have not done their homework and we ignore their exceptions then we can get into bad cases where an allocation from the RM is lost due to exception in onContainersAllocated() and so the app is hung now because its waiting for that the allocation to happen. That is not acceptable IMO. These libraries are all freshly written and IMO its better to fail fast and expose issues than to silently ignore them. If we see a common case of innocuous exceptions then we can choose to ignore them but we first need to see them in real life usage.

We should fix the circular exception. The last patch attached has a bug in that regard.

Changing to Throwable will not be incompatible because the async library has not yet been officially released. It did not go out in 2.0.4-alpha., wrt NMClientAsync, we should probably check if silently ignoring exceptions can lead to incorrectness. While its good to be inconsistent I would currently trade of consistency with correctness as of now. Ignoring exceptions can lead to correctness issues in scheduling., Currently, if callback handler has exception, this thread will stop. But applicationMaster will keep running. We try to stop ApplicationMaster if callback handler has exception. That is why we add a try..catch block, and at catch block, we call handler.onError().

And calling stop() inside onError() is not required, it is the recommended action. If it call stop() inside onError(), that is fine, too. Eventually, AMRMClientAsync will call unregisterApplicationMaster and set keepRunning flag to false which will stop the heartBeat thread. But it is good to let heartBeat thread stop earlier., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12593101/YARN-875.3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1529//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1529//console

This message is automatically generated., Recreate the patch based on the latest trunk, {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12593865/YARN-875.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client:

                  org.apache.hadoop.yarn.client.api.impl.TestNMClient

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1562//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1562//console

This message is automatically generated., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12593865/YARN-875.4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client:

                  org.apache.hadoop.yarn.client.api.impl.TestNMClient

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1566//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1566//console

This message is automatically generated., +1 Looks good. Committing to trunk, branch-2 and branch-2.1-beta.]