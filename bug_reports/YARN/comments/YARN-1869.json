[Please code review. , Thank you for contributing, Blue. IMO, we should hold more small lock from performance's point of view.

{code}
      } else {
        synchronized(zkAcl) {
          opList.add(Op.create(nodeCreatePath, tokenOs.toByteArray(), zkAcl,
              CreateMode.PERSISTENT));
        }
      }
{code}

This can be done because zkAcl is initialized in initInternal() and is not updated after that.

{code}
  @Override
  public synchronized void initInternal(Configuration conf) throws Exception {
    ...
    zkAcl = RMZKUtils.getZKAcls(conf);
    ...
  }
{code}
, Shorter duration locks are good as a general principle for performance but do we know if the difference is worth worrying about in this case? One nice thing about the method being synchronized is that it makes the synchronization clear and visible when future code changes are made, which is always a plus when working with concurrency. (It does leave the possibility of deadlocks via external references versus synchronizing using a private). If we want to implement a shorter duration lock, we should make that consistent by modifying the other methods that are accessing zkAcl? Do we know if access/manipulation of zkAcl is the only critical section in these methods? Thoughts? , [~BlueArrow], Thank you for pointing. At first I focused on fixing critical section of zkAcl. From maintenance's point of view, we should discuss whether updateRMDelegationTokenAndSequeceNumberInternal() should be synchronized or not before doing this. It accesses some instance fields which needs synchronization. IMHO, the method should be synchronized for simplicity.

[~kkambatl], can you take a look?, Currently addStoreOrUpdateOps() has 4 arguments, instead of 5., The method is gone.]