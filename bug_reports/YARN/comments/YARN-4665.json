[The scenario is valid, but it is handled at YarnClient. Is that is not sufficient?
In method YarnClientImpl#submitApplication()
{code}
try{
//
rmClient.submitApplication(request);
//
}catch (ApplicationNotFoundException ex) {
        // FailOver or RM restart happens before RMStateStore saves
        // ApplicationState
        LOG.info("Re-submit application " + applicationId + "with the " +
            "same ApplicationSubmissionContext");
        rmClient.submitApplication(request);
      }
{code}, [~rohithsharma], I've updated the description to be more specific about the issue.  Yes, the client will keep polling, and it fails cleanly when the RM fails, but the RM failure is not always clean, leaving the potential for huge numbers of client failures., As Rohith points out, I believe the intent of YARN-514 is to handle this mostly on the client side.  Technically until the application gets into the ACCEPTED state (or later) the submission process has not completed, and the YARN client code will not return back to the user code until that has completed.  Failures besides ApplicationNotFoundException should be automatically retried by the retry proxy layer, and the code snippet above should handle the case where the new RM doesn't understand the application being queried because it failed to make it into the state store.

Could you elaborate one or more specific scenarios that aren't handled properly?  I'm curious to know the sequence of events that occur during the failover that make the user code believe the application submission was successful (i.e.: the YARN client submit code returned successfully to the caller), and how that same error doesn't occur if the call was made synchronous., Hi [~jlowe] & [~rohithsharma], 
One flow i can think of is submission of the Apps through REST as there is no functionality of retrying similar to the rpc clients..
, Wouldn't a REST interface follow the same principal?  I haven't looked at the REST API lately, but I'd expect the submission logic to be a POST followed by GET polling until the state is ACCEPTED or later.  If the GET results in a no-such-app error then the client retries the POST and continues polling.  Yes, this is not the most ideal REST interface design, but unless I'm missing something it should be functionally equivalent to the RPC path.  In either case the client is going to have to do some kind of retry to handle failovers.  Even with a synchronous interface we can end up with submissions that appear to fail from the client's perspective but actually succeed (because it was successfully recorded in the state store before failing to deliver a response to the client), so it's not just fire-and-forget from the client's perspective., Jason's understanding on the REST API is correct - the user submits the app using POST and polls using GET. Internally the functionality uses the same code flow as the RPC path - all calls flow through ClientRMService#submitApplication.  The RMAppManager has a check - {code} if (rmContext.getRMApps().putIfAbsent(applicationId, application) {code} so subsequent re-submits should not result in anything destructive., Thanks for some clarification [~vvasudev] & [~jlowe],
bq.  but I'd expect the submission logic to be a POST followed by GET polling until the state is ACCEPTED or later. If the GET results in a no-such-app error then the client retries the POST and continues polling.
IIUC REST API user *needs to take care explicitly* in the above mentioned way so that its successfully submitted, if yes then we should better capture it in the document as nothing about this is mentioned 2.7.2 doc. Or correct me if i am missing something. 
[~vvasudev],
bq.  Internally the functionality uses the same code flow as the RPC path - all calls flow through ClientRMService#submitApplication. 
IIUC here the concern is, as the app submission is asynchronous so the submit call might return successfully but the statestore operation fails so on RM failover the submitted app is lost. In case of {{YarnClient}}, client takes care of re-requesting till the app state is appropriate but in case of REST, caller/user needs to take care of calling GET apps after doing a POST submission of a app.  ??subsequent re-submits?? is handled in the server side but client needs to retry until it doesn't get a  no-such-app error, right ?, {quote}
IIUC here the concern is, as the app submission is asynchronous so the submit call might return successfully but the statestore operation fails so on RM failover the submitted app is lost. In case of YarnClient, client takes care of re-requesting till the app state is appropriate but in case of REST, caller/user needs to take care of calling GET apps after doing a POST submission of a app. subsequent re-submits is handled in the server side but client needs to retry until it doesn't get a no-such-app error, right ?
{quote}

Yes. In the REST case, the submit call will return a 202 Accepted. It's the responsibility of the REST client to poll to figure out the state and re-submit if necessary. , In that case would it be helpful if we have a retry logic in {{RMWebServices.submitApplication}} ? so  that it either gets succeeded or fails during RM failover ?, I'm closing this issue as invalid.  Turns out what I was seeing was actually quirks in the RM failover, which are now addressed by YARN-5677 and YARN-5694.]