[Found only two culprits through my grep analysis - AsyncDispatcher and ResourceTrackerService., Karthik, 

Both the named services extend {{AbstractService}}, whose {{serviceStart()}} method is a no-op; you could delete the superclass invocations in both methods and it would do nothing: all the service state management logic is now in {{AbstractService.start()}} and  {{AbstractService.stop()}}, which shouldn't be subclassed (the only reason they aren't final is that some mocking tests like to override these methods)

When I moved to the new service APIs in YARN-117 I didn't reorder things here on in service stop, on the assumption that the code knew what it was doing -and left the calls to the superclass in just to remind others building services that it is wise to relay up, even if the default class is empty.
, super.serviceStart() is just common service-start code, which as of now is empty. The actual method that changes state is AbstractService.start(conf). It is not mandatory to call super.serviceStart() in the end, starting YARN-117 and related tickets. This can be closed as invalid., downgrading to minor as state management logic is not in {{serviceStart()}} and the state management should now be robust irrespective of what the clients do., {color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12598537/yarn-1075-1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/1734//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/1734//console

This message is automatically generated., Thanks  [~stevel] and [~vinodkv]. Read through YARN-117, agree these changes are not required. 

Before I close this as invalid, just wondering if it would still make sense to include these changes  to future-proof any additions to {{AbstractService#serviceStart()}}?

If we are going to leave {{AbstractService#serviceStart()}} as an empty stub, it might be worth making it an abstract method. No?

, Sorry [~stevel], meant to refer [~stevel@apache.org]., [~vinodkv], [~stevel@apache.org]: what do you think? Should I still go ahead and close this as invalid?]