[working on a patch for this issue., Attaching a patch which checks if the map of ACLs foran application is null. 
If null, it uses the default ACL.

A new test case is added which checks the normal case as well as the case when the ACLis not set for an application., [~vinodkv], could you please review this jira ?
Could you also make me a Yarn contributor so that I can assign the jira to me?
, {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12667532/YARN-2527.patch
  against trunk revision 28d99db.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/4864//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/4864//console

This message is automatically generated., [~zjshen], could you please review this jira ?
Could you also make me a Yarn contributor so that I can assign the jira to me?, [~benoyantony], I'va added you as a YARN contributor, and assign this Jira to you.

W.R.T the NPE, did you have a chance to see why NPE will happen? For each submitted app, its acls seem to be added into ApplicationACLsManager. ContainerLaunchContext#getApplicationACLs should return a empty acls map, if user doesn't specify anything, right?, Thank you [~zjshen].
I am investigating on how that happened and will probably open another jira with the root cause. 
But I believe, the NullPointer issue in _ApplicationACLsManager_ should be fixed regardless of that. Based on the current logic, Admin and application owner should be able to perform actions on the Application regardless of ACLS. The NullPointer issue prevents it., Attaching a new patch. Added one more test case to test the case of partial set of ACLS., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12667768/YARN-2527.patch
  against trunk revision 3072c83.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/4870//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/4870//console

This message is automatically generated., bq. But I believe, the NullPointer issue in ApplicationACLsManager should be fixed regardless of that.

My concern is that each submitted app should have a map of acls in the acls manager, even if it is empty. If we make this change, we may hide some potential bugs.

I looked into RMAppManager.createAndPopulateNewRMApp: app is put into RMContext first and then its acls is put into ApplicationACLsManager.

In AppBlock, app is obtained from RMContext, and then its acls is going to be checked. If this happens after app is put into RMContext, but its acls isn't put into ApplicationACLsManager yet, user should hit the NPE case.

Would you please see whether it is the race condition that you ran into before?, 
{code}
 this.applicationACLsManager.addApplication(applicationId,
        submissionContext.getAMContainerSpec().getApplicationACLs());
{code}
My guess is that {code}submissionContext.getAMContainerSpec().getApplicationACLs(){code} could be null for some Application types. (non mapreduce).  


, [~zjshen], any comments ?
Since the ACLS are provided by Application Master and , isn't Null a valid value ?
If not, we could log a warning.  
Any other suggestions are welcome., This is the code in ContainerLaunchContextPBImpl. It seems that acls will never been null from CLC.
{code}
  public Map<ApplicationAccessType, String> getApplicationACLs() {
    initApplicationACLs();
    return this.applicationACLS;
  }

  private void initApplicationACLs() {
    if (this.applicationACLS != null) {
      return;
    }
    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;
    List<ApplicationACLMapProto> list = p.getApplicationACLsList();
    this.applicationACLS = new HashMap<ApplicationAccessType, String>(list
        .size());

    for (ApplicationACLMapProto aclProto : list) {
      this.applicationACLS.put(ProtoUtils.convertFromProtoFormat(aclProto
          .getAccessType()), aclProto.getAcl());
    }
  }
{code}

I'm still thinking it may be the race condition that app is already in RMContext but acls is not put into ApplicationACLsManager. It needs to be confirmed from [~miguenther].

Anyway NPE happens, and ApplicationACLsManager should be self-sufficient to handle the potential null case. Let's do the fix as just suggested. Will review the patch and come back to you asap., The patch almost looks good to me, in particular the additional test cases for ApplicationACLsManager. Just one nit:

1. The logic here is a bit counter-intuitive. Can we just assign acls.get(applicationAccessType) to applicationACL only when it is not null?
{code}
      applicationACL = acls.get(applicationAccessType);
      if (applicationACL == null) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("ACL not found for access-type " + applicationAccessType
              + " for application " + applicationId + " owned by "
              + applicationOwner + ". Using default ["
              + YarnConfiguration.DEFAULT_YARN_APP_ACL + "]");
        }
        applicationACL = DEFAULT_YARN_APP_ACL;
{code}, Thanks for the review [~zjshen]. 
Do you mean to change as below ?
{code}
 if (acls.get(applicationAccessType) != null) {
      applicationACL = acls.get(applicationAccessType) ; 
else { 
        if (LOG.isDebugEnabled()) {
          LOG.debug("ACL not found for access-type " + applicationAccessType
              + " for application " + applicationId + " owned by "
              + applicationOwner + ". Using default ["
              + YarnConfiguration.DEFAULT_YARN_APP_ACL + "]");
        }
        applicationACL = DEFAULT_YARN_APP_ACL;
      }

{code}
The only downside to suggested approach is that it will involve two lookups in _acls_  _HashMap_ whereas the current apprach in the above comment involves only one lookup., Thanks for be patient about the comment. How about doing the following?
{code}
AccessControlList applicationACLInMap = acls.get(applicationAccessType);
if (applicationACLInMap) {
     applicationACL = applicationACLInMap;
else { 
     if (LOG.isDebugEnabled()) {
        LOG.debug("ACL not found for access-type " + applicationAccessType
            + " for application " + applicationId + " owned by "
            + applicationOwner + ". Using default ["
            + YarnConfiguration.DEFAULT_YARN_APP_ACL + "]");
     }
     applicationACL = DEFAULT_YARN_APP_ACL;
}
{code}, Thanks for the code, [~zjshen]. 
I have updated the patch based on the comment., {color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12672583/YARN-2527.patch
  against trunk revision 5e0b49d.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-YARN-Build/5238//testReport/
Console output: https://builds.apache.org/job/PreCommit-YARN-Build/5238//console

This message is automatically generated., +1, will commit the patch, Committed to trunk, branch-2 and branch-2.6. Thanks, [~benoyantony]!, FAILURE: Integrated in Hadoop-trunk-Commit #6182 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/6182/])
YARN-2527. Fixed the potential NPE in ApplicationACLsManager and added test cases for it. Contributed by Benoy Antony. (zjshen: rev 1c93025a1b370db46e345161dbc15e03f829823f)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/server/security/ApplicationACLsManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/server/security/TestApplicationACLsManager.java
, Thanks a lot, [~zjshen]., SUCCESS: Integrated in Hadoop-Yarn-trunk #699 (See [https://builds.apache.org/job/Hadoop-Yarn-trunk/699/])
YARN-2527. Fixed the potential NPE in ApplicationACLsManager and added test cases for it. Contributed by Benoy Antony. (zjshen: rev 1c93025a1b370db46e345161dbc15e03f829823f)
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/server/security/TestApplicationACLsManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/server/security/ApplicationACLsManager.java
* hadoop-yarn-project/CHANGES.txt
, SUCCESS: Integrated in Hadoop-Hdfs-trunk #1890 (See [https://builds.apache.org/job/Hadoop-Hdfs-trunk/1890/])
YARN-2527. Fixed the potential NPE in ApplicationACLsManager and added test cases for it. Contributed by Benoy Antony. (zjshen: rev 1c93025a1b370db46e345161dbc15e03f829823f)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/server/security/TestApplicationACLsManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/server/security/ApplicationACLsManager.java
, FAILURE: Integrated in Hadoop-Mapreduce-trunk #1915 (See [https://builds.apache.org/job/Hadoop-Mapreduce-trunk/1915/])
YARN-2527. Fixed the potential NPE in ApplicationACLsManager and added test cases for it. Contributed by Benoy Antony. (zjshen: rev 1c93025a1b370db46e345161dbc15e03f829823f)
* hadoop-yarn-project/CHANGES.txt
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/server/security/ApplicationACLsManager.java
* hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/test/java/org/apache/hadoop/yarn/server/security/TestApplicationACLsManager.java
]