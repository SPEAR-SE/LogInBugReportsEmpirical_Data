[[~csingh] Thanks for filing this. The properties 

          "yarn.service.container-failure.retry.max": 1,
          "yarn.service.container-failure.validity-interval-ms": 5000

control how many NM retries are attempted.

Option 1: Retain the existing properties as-is as part of component configuration section with the following behaviour

a. for RestartPolicy=NEVER, no retries will be attempted and these properties will be ignored
b. For RestartPolicy=ALWAYS/ON_FAILURE, we retain current behaviour and attempt NM retries as per 
"yarn.service.container-failure.retry.max" and AM will always add the containers and retry until yarn.service.container-failure-per-component threshold is reached.

Option 2:
Make the container failure retry parameters part of the restart policy context which is a good suggestion but this would be a backward in-compatible change and would require spec migration for existing applications. If this is acceptable, then we can think of what the configuration parameters for restart policy would make sense.

Thoughts [~billie.rinaldi] [~eyang] [~gsaha] [~wangda] ?
 , Thanks [~suma.shivaprasad] for the proposal and [~csingh] for reporting this issue.

I would prefer option #1., Option 1 is better proposal from my point of view., | (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 37s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 2 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 26m  4s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 11s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m 35s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 37s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 15s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 27s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m  8s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 24s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 11m 15s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 45s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 14s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 11m 29s{color} | {color:green} hadoop-yarn-services-core in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 23s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 65m  4s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:abb62dd |
| JIRA Issue | YARN-8360 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12931072/YARN-8360.1.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux 7c7b4c6dcfef 4.4.0-130-generic #156-Ubuntu SMP Thu Jun 14 08:53:28 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 4e59b92 |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_171 |
| findbugs | v3.1.0-RC1 |
|  Test Results | https://builds.apache.org/job/PreCommit-YARN-Build/21206/testReport/ |
| Max. process+thread count | 756 (vs. ulimit of 10000) |
| modules | C: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core U: hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core |
| Console output | https://builds.apache.org/job/PreCommit-YARN-Build/21206/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.

, Thanks [~suma.shivaprasad], patch 1 looks good to me. +1., [~suma.shivaprasad] Thank you for the patch.  If number_of_containers is greater than 1 for a given component, yarn.service.container-failure.retry.max applies to total count of the component rather than applying yarn.service.container-failure.retry.max to each instance that should stay up.  This means if an application requires: 100 containers, in order for the container to retry on failure that covers all instances, yarn.service.container-failure.retry.max should set to 100 for every container to have a chance to retry once.  It is also possible for one container to fail, and get retried 100 times.  This logic seems a little odd.  Would it be possible to track retries count by instance?, [~eyang] Thanks for the review. Thats a good question. The " yarn.service.container-failure.retry.max " setting applies to each instance individually and not at a component level.  It is set on ContainerRetryContext and retries are handled by NM. Please refer Abstractprovider.buildContainerRetry for the same and let me know if you have any further questions., [~suma.shivaprasad] Thanks for the information.  I had an environment that one of the node manager is failing, and this skewed the result of the container restart count by NM and AM.  The patch looks correct., +1 I just committed this.  Thank you [~suma.shivaprasad] for the patch.
Thank you [~gsaha] for the review., SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #14615 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14615/])
YARN-8360. Improve YARN service restart policy and node manager auto (eyang: rev 84d7bf1eeff6b9418361afa4aa713e5e6f771365)
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/ComponentRestartPolicy.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/AlwaysRestartPolicy.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/test/java/org/apache/hadoop/yarn/service/containerlaunch/TestAbstractLauncher.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/OnFailureRestartPolicy.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/test/java/org/apache/hadoop/yarn/service/ServiceTestUtils.java
* (edit) hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/NeverRestartPolicy.java
]