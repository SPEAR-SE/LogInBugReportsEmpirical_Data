{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "fields": {
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "aggregatetimeestimate": null,
        "aggregatetimeoriginalestimate": null,
        "aggregatetimespent": null,
        "assignee": null,
        "components": [
            {
                "id": "12319322",
                "name": "resourcemanager",
                "self": "https://issues.apache.org/jira/rest/api/2/component/12319322"
            },
            {
                "id": "12319325",
                "name": "scheduler",
                "self": "https://issues.apache.org/jira/rest/api/2/component/12319325"
            }
        ],
        "created": "2014-05-07T21:39:55.000+0000",
        "creator": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=criccomini&avatarId=27141",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=criccomini&avatarId=27141",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=criccomini&avatarId=27141",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=criccomini&avatarId=27141"
            },
            "displayName": "Chris Riccomini",
            "key": "criccomini",
            "name": "criccomini",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=criccomini",
            "timeZone": "America/Los_Angeles"
        },
        "customfield_10010": null,
        "customfield_12310191": null,
        "customfield_12310192": null,
        "customfield_12310220": "2014-05-08T22:11:33.864+0000",
        "customfield_12310222": null,
        "customfield_12310250": null,
        "customfield_12310290": null,
        "customfield_12310291": null,
        "customfield_12310300": null,
        "customfield_12310310": "0.0",
        "customfield_12310320": null,
        "customfield_12310420": "391267",
        "customfield_12310920": "391487",
        "customfield_12310921": null,
        "customfield_12311020": null,
        "customfield_12311024": null,
        "customfield_12311120": null,
        "customfield_12311820": "0|i1vdzz:",
        "customfield_12312022": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "customfield_12312026": null,
        "customfield_12312220": null,
        "customfield_12312320": null,
        "customfield_12312321": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312324": null,
        "customfield_12312325": null,
        "customfield_12312326": null,
        "customfield_12312327": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312330": null,
        "customfield_12312331": null,
        "customfield_12312332": null,
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12312335": null,
        "customfield_12312336": null,
        "customfield_12312337": null,
        "customfield_12312338": null,
        "customfield_12312339": null,
        "customfield_12312340": null,
        "customfield_12312341": null,
        "customfield_12312520": null,
        "customfield_12312521": "Sat May 17 22:41:55 UTC 2014",
        "customfield_12312720": null,
        "customfield_12312823": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "customfield_12312923": null,
        "customfield_12313422": "false",
        "customfield_12313520": null,
        "description": "YARN appears to be ignoring host-level ContainerRequests.\n\nI am creating a container request with code that pretty closely mirrors the DistributedShell code:\n\n{code}\n  protected def requestContainers(memMb: Int, cpuCores: Int, containers: Int) {\n    info(\"Requesting %d container(s) with %dmb of memory\" format (containers, memMb))\n    val capability = Records.newRecord(classOf[Resource])\n    val priority = Records.newRecord(classOf[Priority])\n    priority.setPriority(0)\n    capability.setMemory(memMb)\n    capability.setVirtualCores(cpuCores)\n    // Specifying a host in the String[] host parameter here seems to do nothing. Setting relaxLocality to false also doesn't help.\n    (0 until containers).foreach(idx => amClient.addContainerRequest(new ContainerRequest(capability, null, null, priority)))\n  }\n{code}\n\nWhen I run this code with a specific host in the ContainerRequest, YARN does not honor the request. Instead, it puts the container on an arbitrary host. This appears to be true for both the FifoScheduler and the CapacityScheduler.\n\nCurrently, we are running the CapacityScheduler with the following settings:\n\n{noformat}\n<configuration>\n\n  <property>\n    <name>yarn.scheduler.capacity.maximum-applications<\/name>\n    <value>10000<\/value>\n    <description>\n      Maximum number of applications that can be pending and running.\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.maximum-am-resource-percent<\/name>\n    <value>0.1<\/value>\n    <description>\n      Maximum percent of resources in the cluster which can be used to run\n      application masters i.e. controls number of concurrent running\n      applications.\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.resource-calculator<\/name>\n    <value>org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator<\/value>\n    <description>\n      The ResourceCalculator implementation to be used to compare\n      Resources in the scheduler.\n      The default i.e. DefaultResourceCalculator only uses Memory while\n      DominantResourceCalculator uses dominant-resource to compare\n      multi-dimensional resources such as Memory, CPU etc.\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.root.queues<\/name>\n    <value>default<\/value>\n    <description>\n      The queues at the this level (root is the root queue).\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.root.default.capacity<\/name>\n    <value>100<\/value>\n    <description>Samza queue target capacity.<\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.root.default.user-limit-factor<\/name>\n    <value>1<\/value>\n    <description>\n      Default queue user limit a percentage from 0.0 to 1.0.\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.root.default.maximum-capacity<\/name>\n    <value>100<\/value>\n    <description>\n      The maximum capacity of the default queue.\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.root.default.state<\/name>\n    <value>RUNNING<\/value>\n    <description>\n      The state of the default queue. State can be one of RUNNING or STOPPED.\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.root.default.acl_submit_applications<\/name>\n    <value>*<\/value>\n    <description>\n      The ACL of who can submit jobs to the default queue.\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.root.default.acl_administer_queue<\/name>\n    <value>*<\/value>\n    <description>\n      The ACL of who can administer jobs on the default queue.\n    <\/description>\n  <\/property>\n\n  <property>\n    <name>yarn.scheduler.capacity.node-locality-delay<\/name>\n    <value>40<\/value>\n    <description>\n      Number of missed scheduling opportunities after which the CapacityScheduler\n      attempts to schedule rack-local containers.\n      Typically this should be set to number of nodes in the cluster, By default is setting\n      approximately number of nodes in one rack which is 40.\n    <\/description>\n  <\/property>\n\n<\/configuration>\n{noformat}\n\nDigging into the code a bit (props to [~jghoman] for finding this), we have a theory as to why this is happening. It looks like RMContainerRequestor.addContainerReq adds three resource requests per container request: data-local, rack-local, and any:\n\n{code}\nprotected void addContainerReq(ContainerRequest req) {\n  // Create resource requests\n  for (String host : req.hosts) {\n    // Data-local\n    if (!isNodeBlacklisted(host)) {\n      addResourceRequest(req.priority, host, req.capability);\n    }      \n  }\n\n  // Nothing Rack-local for now\n  for (String rack : req.racks) {\n    addResourceRequest(req.priority, rack, req.capability);\n  }\n\n  // Off-switch\n  addResourceRequest(req.priority, ResourceRequest.ANY, req.capability);\n}\n{code}\n\nThe addResourceRequest method, in turn, calls addResourceRequestToAsk, which in turn calls ask.add(remoteRequest):\n\n{code}\nprivate void addResourceRequestToAsk(ResourceRequest remoteRequest) {\n  // because objects inside the resource map can be deleted ask can end up \n  // containing an object that matches new resource object but with different\n  // numContainers. So exisintg values must be replaced explicitly\n  if(ask.contains(remoteRequest)) {\n    ask.remove(remoteRequest);\n  }\n  ask.add(remoteRequest);    \n}\n{code}\n\nThe problem is that the \"ask\" variable is a TreeSet:\n\n{code}\nprivate final Set<ResourceRequest> ask = new TreeSet<ResourceRequest>(\n    new org.apache.hadoop.yarn.api.records.ResourceRequest.ResourceRequestComparator());\n{code}\n\nThe ResourceRequestComparator sorts the TreeSet according to:\n\n{code}\npublic int compare(ResourceRequest r1, ResourceRequest r2) {\n\n  // Compare priority, host and capability\n  int ret = r1.getPriority().compareTo(r2.getPriority());\n  if (ret == 0) {\n    String h1 = r1.getResourceName();\n    String h2 = r2.getResourceName();\n    ret = h1.compareTo(h2);\n  }\n  if (ret == 0) {\n    ret = r1.getCapability().compareTo(r2.getCapability());\n  }\n  return ret;\n}\n{code}\n\nThe first thing to note is that our resource requests all have the same priority, so the TreeSet is really sorted by resource name (host/rack). The resource names that are added as part of addContainerReq are host, rack, and any, which is denoted as \"\\*\" (see above). The problem with this is that the TreeSet is going to sort the resource requests with the \"\\*\" request first, even if the host request was added first in addContainerReq.\n\n{code}\n> import java.util.TreeSet\n> val set = new TreeSet[String]\n\nset: java.util.TreeSet[String] = []\n\n> set.add(\"eat1-app\")\n> set\n\nres3: java.util.TreeSet[String] = [eat1-app]\n\n> set.add(\"*\")\n> set\n\nres5: java.util.TreeSet[String] = [*, eat1-app]\n{code}\n\nFrom here on out, it seems to me that anything interacting with the \"ask\" TreeSet (including the allocation requests) will be using the most general resource request, not the most specific.",
        "duedate": null,
        "environment": "RHEL 6.1\nYARN 2.4",
        "fixVersions": [],
        "issuelinks": [
            {
                "id": "12408762",
                "inwardIssue": {
                    "fields": {
                        "issuetype": {
                            "avatarId": 21146,
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "id": "7",
                            "name": "Sub-task",
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "subtask": true
                        },
                        "priority": {
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "id": "3",
                            "name": "Major",
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
                        },
                        "status": {
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "id": "1",
                            "name": "Open",
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "statusCategory": {
                                "colorName": "blue-gray",
                                "id": 2,
                                "key": "new",
                                "name": "To Do",
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2"
                            }
                        },
                        "summary": "add ability to specify affinity/anti-affinity in container requests"
                    },
                    "id": "12662451",
                    "key": "YARN-1042",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/12662451"
                },
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12408762",
                "type": {
                    "id": "10030",
                    "inward": "is related to",
                    "name": "Reference",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                }
            },
            {
                "id": "12486851",
                "inwardIssue": {
                    "fields": {
                        "issuetype": {
                            "avatarId": 21141,
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "id": "2",
                            "name": "New Feature",
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "subtask": false
                        },
                        "priority": {
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "id": "3",
                            "name": "Major",
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
                        },
                        "status": {
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "id": "1",
                            "name": "Open",
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "statusCategory": {
                                "colorName": "blue-gray",
                                "id": 2,
                                "key": "new",
                                "name": "To Do",
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2"
                            }
                        },
                        "summary": "[Umbrella] [YARN-1042] add ability to specify affinity/anti-affinity in container requests"
                    },
                    "id": "13021599",
                    "key": "YARN-5907",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13021599"
                },
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12486851",
                "type": {
                    "id": "10030",
                    "inward": "is related to",
                    "name": "Reference",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                }
            }
        ],
        "issuetype": {
            "avatarId": 21133,
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "id": "1",
            "name": "Bug",
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "subtask": false
        },
        "labels": [],
        "lastViewed": null,
        "priority": {
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "id": "3",
            "name": "Major",
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3"
        },
        "progress": {
            "progress": 0,
            "total": 0
        },
        "project": {
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12313722&avatarId=15135",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12313722&avatarId=15135",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12313722&avatarId=15135",
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12313722&avatarId=15135"
            },
            "id": "12313722",
            "key": "YARN",
            "name": "Hadoop YARN",
            "projectCategory": {
                "description": "Scalable Distributed Computing",
                "id": "10292",
                "name": "Hadoop",
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/10292"
            },
            "self": "https://issues.apache.org/jira/rest/api/2/project/12313722"
        },
        "reporter": {
            "active": true,
            "avatarUrls": {
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=criccomini&avatarId=27141",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=criccomini&avatarId=27141",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=criccomini&avatarId=27141",
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=criccomini&avatarId=27141"
            },
            "displayName": "Chris Riccomini",
            "key": "criccomini",
            "name": "criccomini",
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=criccomini",
            "timeZone": "America/Los_Angeles"
        },
        "resolution": null,
        "resolutiondate": null,
        "status": {
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "id": "1",
            "name": "Open",
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "statusCategory": {
                "colorName": "blue-gray",
                "id": 2,
                "key": "new",
                "name": "To Do",
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2"
            }
        },
        "subtasks": [],
        "summary": "YARN ignores host-specific resource requests",
        "timeestimate": null,
        "timeoriginalestimate": null,
        "timespent": null,
        "updated": "2016-11-17T21:36:29.000+0000",
        "versions": [{
            "archived": false,
            "description": "2.4.0 release",
            "id": "12326142",
            "name": "2.4.0",
            "releaseDate": "2014-04-07",
            "released": true,
            "self": "https://issues.apache.org/jira/rest/api/2/version/12326142"
        }],
        "votes": {
            "hasVoted": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/YARN-2027/votes",
            "votes": 0
        },
        "watches": {
            "isWatching": false,
            "self": "https://issues.apache.org/jira/rest/api/2/issue/YARN-2027/watchers",
            "watchCount": 14
        },
        "workratio": -1
    },
    "id": "12712951",
    "key": "YARN-2027",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/12712951"
}